<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE methods SYSTEM "config.dtd">
<methods>
  <method name="getEncoded">
    <id>android.util.apk.VerbatimX509Certificate.getEncoded( )</id>
    <exceptions>
      <e>CertificateEncodingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="flush">
    <id>android.hardware.SensorManager.flush( SensorEventListener )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>SensorEventListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setActiveScorer">
    <id>android.net.NetworkScoreManager.setActiveScorer( String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getNanoAppMessage">
    <id>android.hardware.location.ContextHubIntentEvent.getNanoAppMessage( )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="readObject">
    <id>android.util.Rational.readObject( ObjectInputStream )</id>
    <exceptions>
      <e>InvalidObjectException</e>
      <e>IOException</e>
      <e>ClassNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ObjectInputStream</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="rebootWipeAb">
    <id>android.os.RecoverySystem.rebootWipeAb( Context File String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>File</type>
        <name>packageFile</name>
      </param>
      <param>
        <type>String</type>
        <name>reason</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="checkServerTrusted">
    <id>android.security.net.config.RootTrustManager.checkServerTrusted( X509Certificate[] String SSLEngine )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>X509Certificate[]</type>
        <name>certs</name>
      </param>
      <param>
        <type>String</type>
        <name>authType</name>
      </param>
      <param>
        <type>SSLEngine</type>
        <name>engine</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="insert">
    <id>android.content.ContentInsertHandler.insert( ContentResolver InputStream )</id>
    <exceptions>
      <e>IOException</e>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>ContentResolver</type>
        <name>contentResolver</name>
      </param>
      <param>
        <type>InputStream</type>
        <name>in</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setText">
    <id>android.widget.TextView.setText( char[] int int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>char[]</type>
        <name>text</name>
      </param>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>len</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="checkPacked">
    <id>android.util.proto.ProtoInputStream.checkPacked( long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>fieldId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="resumeAppSwitches">
    <id>android.app.ActivityManager.resumeAppSwitches( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="attemptUsapSendArgsAndGetResult">
    <id>android.os.ZygoteProcess.attemptUsapSendArgsAndGetResult( ZygoteState String )</id>
    <exceptions>
      <e>ZygoteStartFailedEx</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ZygoteState</type>
        <name>zygoteState</name>
      </param>
      <param>
        <type>String</type>
        <name>msgStr</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="areEffectiveMatch">
    <id>android.content.pm.Signature.areEffectiveMatch( Signature Signature )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>Signature</type>
        <name>a</name>
      </param>
      <param>
        <type>Signature</type>
        <name>b</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getFdDup">
    <id>android.hardware.SyncFence.getFdDup( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="openFileInput">
    <id>android.app.ContextImpl.openFileInput( String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addAll">
    <id>android.widget.ArrayAdapter.addAll( T[] )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>items</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="registerTorchCallback">
    <id>android.hardware.camera2.CameraManager.registerTorchCallback( Executor TorchCallback )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>TorchCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="clearPackagePersistentPreferredActivities">
    <id>android.app.admin.DevicePolicyManager.clearPackagePersistentPreferredActivities( ComponentName String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="makeDirectories">
    <id>android.os.incremental.IncrementalStorage.makeDirectories( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="submitRequestList">
    <id>android.hardware.camera2.impl.ICameraDeviceUserWrapper.submitRequestList( CaptureRequest[] boolean )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest[]</type>
        <name>requestList</name>
      </param>
      <param>
        <type>boolean</type>
        <name>streaming</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="taskStarted">
    <id>android.hardware.camera2.utils.TaskDrainer.taskStarted( T )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>task</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="mapResourceId">
    <id>android.view.inspector.PropertyMapper.mapResourceId( String int )</id>
    <exceptions>
      <e>PropertyConflictException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>attributeId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="verifyPackageInfo">
    <id>android.webkit.WebViewFactory.verifyPackageInfo( PackageInfo PackageInfo )</id>
    <exceptions>
      <e>MissingWebViewPackageException</e>
    </exceptions>
    <params>
      <param>
        <type>PackageInfo</type>
        <name>chosen</name>
      </param>
      <param>
        <type>PackageInfo</type>
        <name>toUse</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isSecurityLoggingEnabled">
    <id>android.app.admin.DevicePolicyManager.isSecurityLoggingEnabled( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getIntentOld">
    <id>android.content.Intent.getIntentOld( String )</id>
    <exceptions>
      <e>URISyntaxException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>uri</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createStateListAnimatorFromXml">
    <id>android.animation.AnimatorInflater.createStateListAnimatorFromXml( Context XmlPullParser AttributeSet )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attributeSet</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="deleteProvisionedVpnProfile">
    <id>android.net.VpnManager.deleteProvisionedVpnProfile( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getFloat">
    <id>android.os.HwBlob.getFloat( long )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="registerClientCallback">
    <id>android.os.ServiceManagerProxy.registerClientCallback( String IBinder IClientCallback )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>IBinder</type>
        <name>service</name>
      </param>
      <param>
        <type>IClientCallback</type>
        <name>cb</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="startSystemDataTransfer">
    <id>android.companion.CompanionDeviceManager.startSystemDataTransfer( int )</id>
    <exceptions>
      <e>DeviceNotAssociatedException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>associationId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isExternalStorageEmulated">
    <id>android.os.Environment.isExternalStorageEmulated( File )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>path</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setSecurityLoggingEnabled">
    <id>android.app.admin.DevicePolicyManager.setSecurityLoggingEnabled( ComponentName boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>boolean</type>
        <name>enabled</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="performHandwritingGesture">
    <id>android.view.inputmethod.InputConnectionWrapper.performHandwritingGesture( HandwritingGesture Executor IntConsumer )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>HandwritingGesture</type>
        <name>gesture</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>IntConsumer</type>
        <name>consumer</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isCallerActiveScorer">
    <id>android.net.NetworkScoreManager.isCallerActiveScorer( int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>callingUid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setActiveProfileOwner">
    <id>android.app.admin.DevicePolicyManager.setActiveProfileOwner( ComponentName String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>ownerName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="dumpTheme">
    <id>android.view.ViewDebug.dumpTheme( View OutputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>view</name>
      </param>
      <param>
        <type>OutputStream</type>
        <name>clientStream</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="checkUriPermission">
    <id>android.content.ContentInterface.checkUriPermission( Uri int int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>int</type>
        <name>uid</name>
      </param>
      <param>
        <type>int</type>
        <name>modeFlags</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setKeyguardDisabledFeatures">
    <id>android.app.admin.DevicePolicyManager.setKeyguardDisabledFeatures( ComponentName int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>int</type>
        <name>which</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="rejectQuery">
    <id>android.service.voice.VisualQueryDetectionService.rejectQuery( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="resetPassword">
    <id>android.app.admin.DevicePolicyManager.resetPassword( String int )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>password</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getGlobalPrivateDnsMode">
    <id>android.app.admin.DevicePolicyManager.getGlobalPrivateDnsMode( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="abandonSession">
    <id>android.content.pm.PackageInstaller.abandonSession( int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>sessionId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="captureSingleRequest">
    <id>android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl.captureSingleRequest( CaptureRequest Executor CaptureCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>listener</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getPackageGids">
    <id>android.content.pm.PackageManager.getPackageGids( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="querySearchDocuments">
    <id>android.provider.DocumentsProvider.querySearchDocuments( String String[] Bundle )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>rootId</name>
      </param>
      <param>
        <type>String[]</type>
        <name>projection</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>queryArgs</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="peekDrawable">
    <id>android.app.WallpaperManager.peekDrawable( int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>which</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setWallpaper">
    <id>android.content.Context.setWallpaper( InputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>data</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="grantRuntimePermission">
    <id>android.app.UiAutomation.grantRuntimePermission( String String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>String</type>
        <name>permission</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getListValue">
    <id>android.view.autofill.AutofillValue.getListValue( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getSerial">
    <id>android.hardware.usb.UsbAccessory.getSerial( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getValue">
    <id>android.view.translation.ViewTranslationRequest.getValue( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>key</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createDependenciesFromPackage">
    <id>android.content.pm.split.SplitDependencyLoader.createDependenciesFromPackage( PackageLite )</id>
    <exceptions>
      <e>IllegalDependencyException</e>
    </exceptions>
    <params>
      <param>
        <type>PackageLite</type>
        <name>pkg</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createOnDeviceSpeechRecognizer">
    <id>android.speech.SpeechRecognizer.createOnDeviceSpeechRecognizer( Context )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readNextHeader">
    <id>android.app.backup.BackupDataInput.readNextHeader( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="readExceptionWithOperationApplicationExceptionFromParcel">
    <id>android.database.DatabaseUtils.readExceptionWithOperationApplicationExceptionFromParcel( Parcel )</id>
    <exceptions>
      <e>OperationApplicationException</e>
    </exceptions>
    <params>
      <param>
        <type>Parcel</type>
        <name>reply</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="list">
    <id>android.os.HwNoService.list( )</id>
    <exceptions>
      <e>android.os.RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getUpdatableNames">
    <id>android.os.ServiceManagerProxy.getUpdatableNames( String )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>apexName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseSize">
    <id>android.util.Size.parseSize( String )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>NumberFormatException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>string</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getColorStateList">
    <id>android.content.res.Resources.getColorStateList( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isDeclared">
    <id>android.os.ServiceManagerProxy.isDeclared( String )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="clearWindowContentFrameStats">
    <id>android.app.UiAutomation.clearWindowContentFrameStats( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>windowId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readFloat">
    <id>android.view.inspector.PropertyReader.readFloat( int float )</id>
    <exceptions>
      <e>PropertyTypeMismatchException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>float</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="verifyV4Signature">
    <id>android.util.apk.ApkSignatureVerifier.verifyV4Signature( ParseInput String int boolean )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ParseInput</type>
        <name>input</name>
      </param>
      <param>
        <type>String</type>
        <name>apkPath</name>
      </param>
      <param>
        <type>int</type>
        <name>minSignatureSchemeVersion</name>
      </param>
      <param>
        <type>boolean</type>
        <name>verifyFull</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="put">
    <id>android.net.http.HttpResponseCache.put( URI URLConnection )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>URI</type>
        <name>uri</name>
      </param>
      <param>
        <type>URLConnection</type>
        <name>urlConnection</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="loadXmlResourceParser">
    <id>android.content.res.ResourcesImpl.loadXmlResourceParser( String int int String )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>file</name>
      </param>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>assetCookie</name>
      </param>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="Capability">
    <id>android.content.pm.Capability.Capability( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="finalizeOutputConfigs">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.finalizeOutputConfigs( List )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>outputConfigs</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getResourcesForApplication">
    <id>android.app.ApplicationPackageManager.getResourcesForApplication( ApplicationInfo )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ApplicationInfo</type>
        <name>app</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDomainVerificationUserState">
    <id>android.content.pm.verify.domain.DomainVerificationManager.getDomainVerificationUserState( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="checkIfCameraClosedOrInError">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.checkIfCameraClosedOrInError( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="skipValue">
    <id>android.util.JsonReader.skipValue( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="executeForBlobFileDescriptor">
    <id>android.database.sqlite.SQLiteConnection.executeForBlobFileDescriptor( String Object[] CancellationSignal )</id>
    <exceptions>
      <e>OperationCanceledException</e>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>bindArgs</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="updateTransportAttributes">
    <id>android.app.backup.BackupManager.updateTransportAttributes( ComponentName String Intent String Intent CharSequence )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>transportComponent</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>Intent</type>
        <name>configurationIntent</name>
      </param>
      <param>
        <type>String</type>
        <name>currentDestinationString</name>
      </param>
      <param>
        <type>Intent</type>
        <name>dataManagementIntent</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>dataManagementLabel</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="openTypedAssetFile">
    <id>android.content.ContentProvider.openTypedAssetFile( Uri String Bundle CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeTypeFilter</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>opts</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="verifyResourceName">
    <id>android.app.admin.ParcelableResource.verifyResourceName( Resources )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>resources</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getNetworkTemplateBytesForBackup">
    <id>android.net.NetworkPolicy.getNetworkTemplateBytesForBackup( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="onScrollCaptureSearch">
    <id>android.view.View.onScrollCaptureSearch( Rect Point Consumer )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Rect</type>
        <name>localVisibleRect</name>
      </param>
      <param>
        <type>Point</type>
        <name>windowOffset</name>
      </param>
      <param>
        <type>Consumer</type>
        <name>targets</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getStartUserSessionMessage">
    <id>android.app.admin.DevicePolicyManager.getStartUserSessionMessage( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="applyBatch">
    <id>android.content.ContentProviderClient.applyBatch( ArrayList )</id>
    <exceptions>
      <e>RemoteException</e>
      <e>OperationApplicationException</e>
    </exceptions>
    <params>
      <param>
        <type>ArrayList</type>
        <name>operations</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="initializeSession">
    <id>android.hardware.camera2.CameraExtensionCharacteristics.initializeSession( IInitializeSessionCallback )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>IInitializeSessionCallback</type>
        <name>cb</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="moveFile">
    <id>android.os.incremental.IncrementalStorage.moveFile( String String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sourcepath</name>
      </param>
      <param>
        <type>String</type>
        <name>destpath</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="startPrefixMapping">
    <id>android.content.DefaultDataHandler.startPrefixMapping( String String )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>prefix</name>
      </param>
      <param>
        <type>String</type>
        <name>uri</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="RecurrenceRule">
    <id>android.util.RecurrenceRule.RecurrenceRule( DataInputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataInputStream</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readParcelableCreator">
    <id>android.os.Parcel.readParcelableCreator( ClassLoader )</id>
    <exceptions>
      <e>BadParcelableException</e>
    </exceptions>
    <params>
      <param>
        <type>ClassLoader</type>
        <name>loader</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startService">
    <id>android.content.Context.startService( Intent )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>BackgroundServiceStartNotAllowedException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent</type>
        <name>service</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setContentDescription">
    <id>android.view.accessibility.AccessibilityNodeInfo.setContentDescription( CharSequence )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>contentDescription</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readParcelableArray">
    <id>android.os.Parcel.readParcelableArray( ClassLoader Class )</id>
    <exceptions>
      <e>BadParcelableException</e>
    </exceptions>
    <params>
      <param>
        <type>ClassLoader</type>
        <name>loader</name>
      </param>
      <param>
        <type>Class</type>
        <name>clazz</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setQueryFromAppProcessEnabled">
    <id>android.view.accessibility.AccessibilityNodeInfo.setQueryFromAppProcessEnabled( View boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>view</name>
      </param>
      <param>
        <type>boolean</type>
        <name>enabled</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="noteOp">
    <id>android.app.AppOpsManager.noteOp( String int String String String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>op</name>
      </param>
      <param>
        <type>int</type>
        <name>uid</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>String</type>
        <name>attributionTag</name>
      </param>
      <param>
        <type>String</type>
        <name>message</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="debugDump">
    <id>android.os.HwNoService.debugDump( )</id>
    <exceptions>
      <e>android.os.RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getActiveScorerPackage">
    <id>android.net.NetworkScoreManager.getActiveScorerPackage( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="onUserSwitchComplete">
    <id>android.app.UserSwitchObserver.onUserSwitchComplete( int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>newUserId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getRealtimeStillCaptureLatency">
    <id>android.hardware.camera2.CameraExtensionSession.getRealtimeStillCaptureLatency( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="rebootWipeCache">
    <id>android.os.RecoverySystem.rebootWipeCache( Context String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>String</type>
        <name>reason</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="loadFromApk">
    <id>android.content.res.loader.ResourcesProvider.loadFromApk( ParcelFileDescriptor long long AssetsProvider )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>fileDescriptor</name>
      </param>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>long</type>
        <name>length</name>
      </param>
      <param>
        <type>AssetsProvider</type>
        <name>assetsProvider</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="createCommSocketPair">
    <id>android.os.ParcelFileDescriptor.createCommSocketPair( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getType">
    <id>android.content.IContentProvider.getType( AttributionSource Uri )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="fillBuffer">
    <id>android.util.proto.ProtoInputStream.fillBuffer( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="read">
    <id>android.util.jar.StrictJarManifest.read( InputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>is</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="stopProfile">
    <id>android.app.ActivityManager.stopProfile( UserHandle )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>UserHandle</type>
        <name>userHandle</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="removeOnWindowAttachListener">
    <id>android.view.ViewTreeObserver.removeOnWindowAttachListener( OnWindowAttachListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OnWindowAttachListener</type>
        <name>victim</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="retrievePreRebootSecurityLogs">
    <id>android.app.admin.DevicePolicyManager.retrievePreRebootSecurityLogs( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="disableWriteAheadLogging">
    <id>android.database.sqlite.SQLiteDatabase.disableWriteAheadLogging( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="clear">
    <id>android.app.WallpaperManager.clear( int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>which</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="requery">
    <id>android.database.IBulkCursor.requery( IContentObserver )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>IContentObserver</type>
        <name>observer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="MultiResolutionStreamInfo">
    <id>android.hardware.camera2.params.MultiResolutionStreamInfo.MultiResolutionStreamInfo( int int String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>streamWidth</name>
      </param>
      <param>
        <type>int</type>
        <name>streamHeight</name>
      </param>
      <param>
        <type>String</type>
        <name>physicalCameraId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="readFullyIgnoringContents">
    <id>android.util.apk.ApkSignatureVerifier.readFullyIgnoringContents( InputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="call">
    <id>android.content.ContentProviderProxy.call( AttributionSource String String String Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>String</type>
        <name>authority</name>
      </param>
      <param>
        <type>String</type>
        <name>method</name>
      </param>
      <param>
        <type>String</type>
        <name>request</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="removePermission">
    <id>android.permission.PermissionManager.removePermission( String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>permissionName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getApplicationIcon">
    <id>android.content.pm.PackageManager.getApplicationIcon( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createFromXml">
    <id>android.os.UserBatteryConsumer.createFromXml( TypedXmlPullParser Builder )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>Builder</type>
        <name>builder</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="finalize">
    <id>android.app.backup.FileBackupHelperBase.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createDirectChannel">
    <id>android.hardware.SensorManager.createDirectChannel( MemoryFile )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>UncheckedIOException</e>
    </exceptions>
    <params>
      <param>
        <type>MemoryFile</type>
        <name>mem</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addSurface">
    <id>android.hardware.camera2.params.OutputConfiguration.addSurface( Surface )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="syncRun">
    <id>android.view.contentcapture.ContentCaptureManager.syncRun( MyRunnable )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>MyRunnable</type>
        <name>r</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readEntries">
    <id>android.util.jar.StrictJarManifestReader.readEntries( Map Map )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Map</type>
        <name>entries</name>
      </param>
      <param>
        <type>Map</type>
        <name>chunks</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getUnsignedInt">
    <id>android.security.keymaster.KeymasterArguments.getUnsignedInt( int long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tag</name>
      </param>
      <param>
        <type>long</type>
        <name>defaultValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="delete">
    <id>android.content.ContentProviderProxy.delete( AttributionSource Uri Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="resolvePullParser">
    <id>android.util.Xml.resolvePullParser( InputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isPackageSuspended">
    <id>android.app.ApplicationPackageManager.isPackageSuspended( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setForeignKeyConstraintsEnabled">
    <id>android.database.sqlite.SQLiteDatabase.setForeignKeyConstraintsEnabled( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>enable</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="SigningDetails">
    <id>android.content.pm.SigningDetails.SigningDetails( Signature[] int )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>Signature[]</type>
        <name>signatures</name>
      </param>
      <param>
        <type>int</type>
        <name>signatureSchemeVersion</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="handleException">
    <id>android.accounts.AbstractAccountAuthenticator.handleException( IAccountAuthenticatorResponse String String Exception )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>IAccountAuthenticatorResponse</type>
        <name>response</name>
      </param>
      <param>
        <type>String</type>
        <name>method</name>
      </param>
      <param>
        <type>String</type>
        <name>data</name>
      </param>
      <param>
        <type>Exception</type>
        <name>e</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getRecoverySecretTypes">
    <id>android.security.keystore.recovery.RecoveryController.getRecoverySecretTypes( )</id>
    <exceptions>
      <e>InternalRecoveryServiceException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createCaptureRequest">
    <id>android.hardware.camera2.CameraDevice.createCaptureRequest( int Set )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>templateType</name>
      </param>
      <param>
        <type>Set</type>
        <name>physicalCameraIdSet</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nextField">
    <id>android.util.proto.ProtoInputStream.nextField( long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>fieldId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isConcurrentSessionConfigurationSupported">
    <id>android.hardware.camera2.CameraManager.isConcurrentSessionConfigurationSupported( Map )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>Map</type>
        <name>cameraIdAndSessionConfig</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setAutoTimeRequired">
    <id>android.app.admin.DevicePolicyManager.setAutoTimeRequired( ComponentName boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>boolean</type>
        <name>required</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="detectorStatusFromString">
    <id>android.app.time.DetectorStatusTypes.detectorStatusFromString( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>detectorStatusString</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="queryParameter">
    <id>android.service.voice.AlwaysOnHotwordDetector.queryParameter( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>modelParam</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getCrossProfileWidgetProviders">
    <id>android.app.admin.DevicePolicyManager.getCrossProfileWidgetProviders( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setOpenParams">
    <id>android.database.sqlite.SQLiteOpenHelper.setOpenParams( OpenParams )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OpenParams</type>
        <name>openParams</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onActivityRequestedOrientationChanged">
    <id>android.app.TaskStackListener.onActivityRequestedOrientationChanged( int int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>taskId</name>
      </param>
      <param>
        <type>int</type>
        <name>requestedOrientation</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setMovementGranularity">
    <id>android.view.accessibility.AccessibilityEvent.setMovementGranularity( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>granularity</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="notifyVirtualViewsReady">
    <id>android.view.autofill.AutofillManager.notifyVirtualViewsReady( View SparseArray )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>view</name>
      </param>
      <param>
        <type>SparseArray</type>
        <name>infos</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createConstrainedHighSpeedCaptureSession">
    <id>android.hardware.camera2.CameraDevice.createConstrainedHighSpeedCaptureSession( List StateCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>outputs</name>
      </param>
      <param>
        <type>StateCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="dup">
    <id>android.os.NativeHandle.dup( )</id>
    <exceptions>
      <e>java.io.IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getUserControlDisabledPackages">
    <id>android.app.admin.DevicePolicyManager.getUserControlDisabledPackages( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="confirmCredentials">
    <id>android.accounts.AbstractAccountAuthenticator.confirmCredentials( AccountAuthenticatorResponse Account Bundle )</id>
    <exceptions>
      <e>NetworkErrorException</e>
    </exceptions>
    <params>
      <param>
        <type>AccountAuthenticatorResponse</type>
        <name>response</name>
      </param>
      <param>
        <type>Account</type>
        <name>account</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="onEnrollmentFrame">
    <id>android.hardware.face.FaceServiceReceiver.onEnrollmentFrame( FaceEnrollFrame )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>FaceEnrollFrame</type>
        <name>frame</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="valueOf">
    <id>android.util.Half.valueOf( String )</id>
    <exceptions>
      <e>NumberFormatException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>s</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addAction">
    <id>android.view.accessibility.AccessibilityNodeInfo.addAction( AccessibilityAction )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>AccessibilityAction</type>
        <name>action</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="loadThumbnail">
    <id>android.content.ContentResolver.loadThumbnail( Uri Size CancellationSignal )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>Size</type>
        <name>size</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="openRawResource">
    <id>android.content.res.ResourcesImpl.openRawResource( int TypedValue )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>TypedValue</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getInstanceForSurfaceControl">
    <id>android.view.Choreographer.getInstanceForSurfaceControl( long Looper )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>layerHandle</name>
      </param>
      <param>
        <type>Looper</type>
        <name>looper</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getAlwaysOnVpnLockdownWhitelist">
    <id>android.app.admin.DevicePolicyManager.getAlwaysOnVpnLockdownWhitelist( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="DevicePolicyDrawableResource">
    <id>android.app.admin.DevicePolicyDrawableResource.DevicePolicyDrawableResource( Context String String int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>String</type>
        <name>drawableId</name>
      </param>
      <param>
        <type>String</type>
        <name>drawableStyle</name>
      </param>
      <param>
        <type>int</type>
        <name>resourceIdInCallingPackage</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="openAssetFile">
    <id>android.content.ContentProvider.openAssetFile( Uri String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createInputStream">
    <id>android.hardware.camera2.impl.ICameraDeviceUserWrapper.createInputStream( int int int boolean )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>width</name>
      </param>
      <param>
        <type>int</type>
        <name>height</name>
      </param>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isMultiResolution</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getType">
    <id>android.content.ContentProviderProxy.getType( AttributionSource Uri )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createRect">
    <id>android.hardware.camera2.utils.ParamsUtils.createRect( RectF )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>RectF</type>
        <name>rect</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openXmlBlockAsset">
    <id>android.content.res.AssetManager.openXmlBlockAsset( int String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>cookie</name>
      </param>
      <param>
        <type>String</type>
        <name>fileName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="decodeCert">
    <id>android.security.keystore.recovery.X509CertificateParsingUtils.decodeCert( byte[] )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>certBytes</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="loadObjectAnimator">
    <id>android.animation.AnimatorInflater.loadObjectAnimator( Resources Theme AttributeSet float )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
      <param>
        <type>float</type>
        <name>pathErrorScale</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getService">
    <id>android.os.HwBinder.getService( String String )</id>
    <exceptions>
      <e>RemoteException</e>
      <e>NoSuchElementException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>iface</name>
      </param>
      <param>
        <type>String</type>
        <name>serviceName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getProperty">
    <id>android.content.pm.PackageManager.getProperty( String ComponentName )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
      <param>
        <type>ComponentName</type>
        <name>component</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="validateRemoteLockscreen">
    <id>android.app.KeyguardManager.validateRemoteLockscreen( byte[] )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>encryptedCredential</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getLastResourceResolution">
    <id>android.content.res.Resources.getLastResourceResolution( )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setNearbyAppStreamingPolicy">
    <id>android.app.admin.DevicePolicyManager.setNearbyAppStreamingPolicy( int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>policy</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="verifyAdditionalAttributes">
    <id>android.util.apk.ApkSignatureSchemeV2Verifier.verifyAdditionalAttributes( ByteBuffer )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ByteBuffer</type>
        <name>attrs</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="installKeyPair">
    <id>android.app.admin.DevicePolicyManager.installKeyPair( ComponentName PrivateKey Certificate[] String int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>PrivateKey</type>
        <name>privKey</name>
      </param>
      <param>
        <type>Certificate[]</type>
        <name>certs</name>
      </param>
      <param>
        <type>String</type>
        <name>alias</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getCaCertAlias">
    <id>android.app.admin.DevicePolicyManager.getCaCertAlias( byte[] )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>certBuffer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openTypedAssetFileDescriptor">
    <id>android.content.ContentProviderClient.openTypedAssetFileDescriptor( Uri String Bundle CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeType</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>opts</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="finalize">
    <id>android.database.sqlite.SQLiteConnectionPool.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="parsePermissionTree">
    <id>android.content.pm.PackageParser.parsePermissionTree( Package Resources XmlResourceParser String[] )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Package</type>
        <name>owner</name>
      </param>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>String[]</type>
        <name>outError</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="read">
    <id>android.timezone.TzDataSetVersion.read( )</id>
    <exceptions>
      <e>TzDataSetException</e>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="beginObject">
    <id>android.util.JsonReader.beginObject( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="ListEnabledProvidersException">
    <id>android.credentials.ListEnabledProvidersException.ListEnabledProvidersException( String String Throwable )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>String</type>
        <name>message</name>
      </param>
      <param>
        <type>Throwable</type>
        <name>cause</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getAllocatableBytes">
    <id>android.os.storage.StorageManager.getAllocatableBytes( UUID )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>UUID</type>
        <name>storageUuid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="saveToXml">
    <id>android.app.admin.PolicyKey.saveToXml( TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>serializer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="removeDynamicShortcuts">
    <id>android.content.pm.ShortcutManager.removeDynamicShortcuts( List )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>shortcutIds</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="load">
    <id>android.gesture.GestureStore.load( InputStream boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>stream</name>
      </param>
      <param>
        <type>boolean</type>
        <name>closeStream</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPackageUid">
    <id>android.app.ApplicationPackageManager.getPackageUid( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getFastDrawable">
    <id>android.app.WallpaperManager.getFastDrawable( int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>which</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="loadDescription">
    <id>android.app.admin.DeviceAdminInfo.loadDescription( PackageManager )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>PackageManager</type>
        <name>pm</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openLegacy">
    <id>android.hardware.Camera.openLegacy( int int )</id>
    <exceptions>
      <e>RuntimeException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>cameraId</name>
      </param>
      <param>
        <type>int</type>
        <name>halVersion</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getBluetoothContactSharingDisabled">
    <id>android.app.admin.DevicePolicyManager.getBluetoothContactSharingDisabled( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addDateIfNotNull">
    <id>android.security.keymaster.KeymasterArguments.addDateIfNotNull( int Date )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tag</name>
      </param>
      <param>
        <type>Date</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getFreeBytes">
    <id>android.app.usage.StorageStatsManager.getFreeBytes( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>uuid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="preloadDefault">
    <id>android.os.ZygoteProcess.preloadDefault( String )</id>
    <exceptions>
      <e>ZygoteStartFailedEx</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>abi</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="removeOnUidImportanceListener">
    <id>android.app.ActivityManager.removeOnUidImportanceListener( OnUidImportanceListener )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>OnUidImportanceListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createExtensionSession">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.createExtensionSession( ExtensionSessionConfiguration )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>ExtensionSessionConfiguration</type>
        <name>extensionConfiguration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nativeGetTypeFromTag">
    <id>android.hardware.camera2.impl.CameraMetadataNative.nativeGetTypeFromTag( int long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tag</name>
      </param>
      <param>
        <type>long</type>
        <name>vendorId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="registerKeyboardBacklightListener">
    <id>android.hardware.input.InputManager.registerKeyboardBacklightListener( Executor KeyboardBacklightListener )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>KeyboardBacklightListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="expect">
    <id>android.util.JsonReader.expect( JsonToken )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>JsonToken</type>
        <name>expected</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getHighSpeedVideoSizesFor">
    <id>android.hardware.camera2.params.RecommendedStreamConfigurationMap.getHighSpeedVideoSizesFor( Range )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Range</type>
        <name>fpsRange</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getBool">
    <id>android.os.HwBlob.getBool( long )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="zygoteSendArgsAndGetResult">
    <id>android.os.ZygoteProcess.zygoteSendArgsAndGetResult( ZygoteState int ArrayList )</id>
    <exceptions>
      <e>ZygoteStartFailedEx</e>
    </exceptions>
    <params>
      <param>
        <type>ZygoteState</type>
        <name>zygoteState</name>
      </param>
      <param>
        <type>int</type>
        <name>zygotePolicyFlags</name>
      </param>
      <param>
        <type>ArrayList</type>
        <name>args</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="uncanonicalize">
    <id>android.content.ContentProviderProxy.uncanonicalize( AttributionSource Uri )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="switchToOffline">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.switchToOffline( Collection Executor CameraOfflineSessionCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>Collection</type>
        <name>offlineOutputs</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>CameraOfflineSessionCallback</type>
        <name>listener</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createView">
    <id>android.view.LayoutInflater.createView( Context String String AttributeSet )</id>
    <exceptions>
      <e>InflateException</e>
      <e>ClassNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>viewContext</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>String</type>
        <name>prefix</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setSource">
    <id>android.view.accessibility.AccessibilityRecord.setSource( View )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>source</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="SystemTextClassifier">
    <id>android.view.textclassifier.SystemTextClassifier.SystemTextClassifier( Context TextClassificationConstants boolean )</id>
    <exceptions>
      <e>ServiceManager.ServiceNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>TextClassificationConstants</type>
        <name>settings</name>
      </param>
      <param>
        <type>boolean</type>
        <name>useDefault</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setStream">
    <id>android.app.WallpaperManager.setStream( InputStream Rect boolean int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>bitmapData</name>
      </param>
      <param>
        <type>Rect</type>
        <name>visibleCropHint</name>
      </param>
      <param>
        <type>boolean</type>
        <name>allowBackup</name>
      </param>
      <param>
        <type>int</type>
        <name>which</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getTimerTime">
    <id>android.os.health.HealthStats.getTimerTime( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>key</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="RemoteViews">
    <id>android.widget.RemoteViews.RemoteViews( RemoteViews RemoteViews )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>RemoteViews</type>
        <name>landscape</name>
      </param>
      <param>
        <type>RemoteViews</type>
        <name>portrait</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="load">
    <id>android.view.PointerIcon.load( Context )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getStreamTypes">
    <id>android.content.IContentProvider.getStreamTypes( Uri String )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeTypeFilter</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="copyInternalSplice">
    <id>android.os.FileUtils.copyInternalSplice( FileDescriptor FileDescriptor long CancellationSignal Executor ProgressListener )</id>
    <exceptions>
      <e>ErrnoException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>in</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>out</name>
      </param>
      <param>
        <type>long</type>
        <name>count</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>ProgressListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="isAppSourceCertificateTrusted">
    <id>android.security.FileIntegrityManager.isAppSourceCertificateTrusted( X509Certificate )</id>
    <exceptions>
      <e>CertificateEncodingException</e>
    </exceptions>
    <params>
      <param>
        <type>X509Certificate</type>
        <name>certificate</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="enforceWritePermissionInner">
    <id>android.content.ContentProvider.enforceWritePermissionInner( Uri AttributionSource )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readInt32">
    <id>android.os.HwParcel.readInt32( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="not">
    <id>android.service.autofill.Validators.not( Validator )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Validator</type>
        <name>validator</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="connectLocal">
    <id>android.net.LocalSocketImpl.connectLocal( FileDescriptor String int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>namespace</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="enableShutterSound">
    <id>android.hardware.Camera.enableShutterSound( boolean )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>enabled</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseApkLite">
    <id>android.content.pm.parsing.ApkLiteParseUtils.parseApkLite( ParseInput String XmlResourceParser SigningDetails int )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ParseInput</type>
        <name>input</name>
      </param>
      <param>
        <type>String</type>
        <name>codePath</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>SigningDetails</type>
        <name>signingDetails</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="writeToStream">
    <id>android.content.pm.Checksum.writeToStream( DataOutputStream Checksum )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataOutputStream</type>
        <name>dos</name>
      </param>
      <param>
        <type>Checksum</type>
        <name>checksum</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getValue">
    <id>android.content.res.ResourcesImpl.getValue( String TypedValue boolean )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>TypedValue</type>
        <name>outValue</name>
      </param>
      <param>
        <type>boolean</type>
        <name>resolveRefs</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getCacheQuotaBytes">
    <id>android.os.storage.StorageManager.getCacheQuotaBytes( UUID )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>UUID</type>
        <name>storageUuid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPointCount">
    <id>android.hardware.camera2.params.TonemapCurve.getPointCount( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>colorChannel</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="engineInit">
    <id>android.security.net.config.RootTrustManagerFactorySpi.engineInit( KeyStore )</id>
    <exceptions>
      <e>KeyStoreException</e>
    </exceptions>
    <params>
      <param>
        <type>KeyStore</type>
        <name>ks</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAllBookmarks">
    <id>android.provider.Browser.getAllBookmarks( ContentResolver )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>ContentResolver</type>
        <name>cr</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="finalize">
    <id>android.view.InputApplicationHandle.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createRequest">
    <id>android.hardware.camera2.impl.CameraExtensionSessionImpl.createRequest( CameraDevice List Surface int )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CameraDevice</type>
        <name>cameraDevice</name>
      </param>
      <param>
        <type>List</type>
        <name>captureStageList</name>
      </param>
      <param>
        <type>Surface</type>
        <name>target</name>
      </param>
      <param>
        <type>int</type>
        <name>captureTemplate</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getColumnIndexOrThrow">
    <id>android.database.Cursor.getColumnIndexOrThrow( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>columnName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setLocale">
    <id>android.database.sqlite.SQLiteDatabase.setLocale( Locale )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createPipe">
    <id>android.os.ParcelFileDescriptor.createPipe( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="putBoolArray">
    <id>android.os.HwBlob.putBoolArray( long boolean[] )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>x</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setClassName">
    <id>android.view.accessibility.AccessibilityRecord.setClassName( CharSequence )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>className</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createRect">
    <id>android.hardware.camera2.utils.ParamsUtils.createRect( Size )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>Size</type>
        <name>size</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="disableScoring">
    <id>android.net.NetworkScoreManager.disableScoring( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getDataSize">
    <id>android.app.backup.BackupDataInput.getDataSize( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="sendMessageToNanoApp">
    <id>android.hardware.location.ContextHubClient.sendMessageToNanoApp( NanoAppMessage )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>NanoAppMessage</type>
        <name>message</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="loadFromXml">
    <id>android.hardware.display.BrightnessCorrection.loadFromXml( TypedXmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="objectValue">
    <id>android.util.JsonReader.objectValue( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="addOnTouchModeChangeListener">
    <id>android.view.ViewTreeObserver.addOnTouchModeChangeListener( OnTouchModeChangeListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OnTouchModeChangeListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getString">
    <id>android.content.res.Resources.getString( int Object[] )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>Object</type>
        <name>formatArgs</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getSurfaceSize">
    <id>android.hardware.camera2.utils.SurfaceUtils.getSurfaceSize( Surface )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="allowPurging">
    <id>android.os.MemoryFile.allowPurging( boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>allowPurging</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="collectCertificates">
    <id>android.content.pm.PackageParser.collectCertificates( Package boolean )</id>
    <exceptions>
      <e>PackageParserException</e>
    </exceptions>
    <params>
      <param>
        <type>Package</type>
        <name>pkg</name>
      </param>
      <param>
        <type>boolean</type>
        <name>skipVerify</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="unregisterClientCallback">
    <id>android.os.HwNoService.unregisterClientCallback( IBase IClientCallback )</id>
    <exceptions>
      <e>android.os.RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>IBase</type>
        <name>server</name>
      </param>
      <param>
        <type>IClientCallback</type>
        <name>cb</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="wipeData">
    <id>android.app.admin.DevicePolicyManager.wipeData( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="checkActionType">
    <id>android.view.textclassifier.SelectionEvent.checkActionType( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>eventType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="bindService">
    <id>android.content.Context.bindService( Intent ServiceConnection int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent</type>
        <name>service</name>
      </param>
      <param>
        <type>ServiceConnection</type>
        <name>conn</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="startSmoothZoom">
    <id>android.hardware.Camera.startSmoothZoom( int )</id>
    <exceptions>
      <e>RuntimeException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="queryCratesForPackage">
    <id>android.app.usage.StorageStatsManager.queryCratesForPackage( UUID String UserHandle )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
      <e>NameNotFoundException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>UUID</type>
        <name>storageUuid</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="startDocument">
    <id>android.content.DefaultDataHandler.startDocument( )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getText">
    <id>android.content.res.Resources.getText( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="shellCommand">
    <id>android.os.IBinder.shellCommand( FileDescriptor FileDescriptor FileDescriptor String[] ShellCallback ResultReceiver )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>in</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>out</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>err</name>
      </param>
      <param>
        <type>String[]</type>
        <name>args</name>
      </param>
      <param>
        <type>ShellCallback</type>
        <name>shellCallback</name>
      </param>
      <param>
        <type>ResultReceiver</type>
        <name>resultReceiver</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="getResourcesForApplication">
    <id>android.app.ApplicationPackageManager.getResourcesForApplication( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>appPackageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="findEncodingByName">
    <id>android.util.Xml.findEncodingByName( String )</id>
    <exceptions>
      <e>UnsupportedEncodingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>encodingName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onActivityDismissingDockedTask">
    <id>android.app.TaskStackListener.onActivityDismissingDockedTask( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setPreferentialNetworkServiceConfigs">
    <id>android.app.admin.DevicePolicyManager.setPreferentialNetworkServiceConfigs( List )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>preferentialNetworkServiceConfigs</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getUidForSharedUser">
    <id>android.app.ApplicationPackageManager.getUidForSharedUser( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sharedUserName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getShortSupportMessage">
    <id>android.app.admin.DevicePolicyManager.getShortSupportMessage( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="updateMediaTapToTransferSenderDisplay">
    <id>android.app.StatusBarManager.updateMediaTapToTransferSenderDisplay( int MediaRoute2Info Executor Runnable )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>displayState</name>
      </param>
      <param>
        <type>MediaRoute2Info</type>
        <name>routeInfo</name>
      </param>
      <param>
        <type>Executor</type>
        <name>undoExecutor</name>
      </param>
      <param>
        <type>Runnable</type>
        <name>undoCallback</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setOrganizationName">
    <id>android.app.admin.DevicePolicyManager.setOrganizationName( ComponentName CharSequence )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>title</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="deserialize">
    <id>android.gesture.Gesture.deserialize( DataInputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataInputStream</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="rebootWipeUserData">
    <id>android.os.RecoverySystem.rebootWipeUserData( Context boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>boolean</type>
        <name>shutdown</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="send">
    <id>android.app.PendingIntent.send( Context int Intent )</id>
    <exceptions>
      <e>CanceledException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>int</type>
        <name>code</name>
      </param>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="onTaskCreated">
    <id>android.app.TaskStackListener.onTaskCreated( int ComponentName )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>taskId</name>
      </param>
      <param>
        <type>ComponentName</type>
        <name>componentName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nativeOpenNonAssetFd">
    <id>android.content.res.AssetManager.nativeOpenNonAssetFd( long int String long[] )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>ptr</name>
      </param>
      <param>
        <type>int</type>
        <name>cookie</name>
      </param>
      <param>
        <type>String</type>
        <name>fileName</name>
      </param>
      <param>
        <type>long[]</type>
        <name>outOffsets</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getEnd">
    <id>android.text.method.WordIterator.getEnd( int boolean )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>offset</name>
      </param>
      <param>
        <type>boolean</type>
        <name>getNextWordEndOnTwoWordBoundary</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="profileViewAndChildren">
    <id>android.view.ViewDebug.profileViewAndChildren( View BufferedWriter )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>view</name>
      </param>
      <param>
        <type>BufferedWriter</type>
        <name>out</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createItem">
    <id>android.preference.GenericInflater.createItem( String String AttributeSet )</id>
    <exceptions>
      <e>InflateException</e>
      <e>ClassNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>String</type>
        <name>prefix</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="collectCertificates">
    <id>android.content.pm.PackageParser.collectCertificates( Package File boolean )</id>
    <exceptions>
      <e>PackageParserException</e>
    </exceptions>
    <params>
      <param>
        <type>Package</type>
        <name>pkg</name>
      </param>
      <param>
        <type>File</type>
        <name>apkFile</name>
      </param>
      <param>
        <type>boolean</type>
        <name>skipVerify</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="myAttributionSource">
    <id>android.content.AttributionSource.myAttributionSource( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="close">
    <id>android.content.res.TypedArray.close( )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="queryRecentDocuments">
    <id>android.provider.DocumentsProvider.queryRecentDocuments( String String[] )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>rootId</name>
      </param>
      <param>
        <type>String[]</type>
        <name>projection</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setProfileEnabled">
    <id>android.app.admin.DevicePolicyManager.setProfileEnabled( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parsePackageLite">
    <id>android.content.pm.PackageParser.parsePackageLite( File int )</id>
    <exceptions>
      <e>PackageParserException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>packageFile</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getCrossProfileCalendarPackages">
    <id>android.app.admin.DevicePolicyManager.getCrossProfileCalendarPackages( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createAmFmSelector">
    <id>android.hardware.radio.ProgramSelector.createAmFmSelector( int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>band</name>
      </param>
      <param>
        <type>int</type>
        <name>frequencyKhz</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="stopService">
    <id>android.content.Context.stopService( Intent )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent</type>
        <name>service</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getSoTimeout">
    <id>android.net.LocalSocket.getSoTimeout( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createSocket">
    <id>android.net.SSLCertificateSocketFactory.createSocket( InetAddress int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InetAddress</type>
        <name>addr</name>
      </param>
      <param>
        <type>int</type>
        <name>port</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readResourceId">
    <id>android.view.inspector.PropertyReader.readResourceId( int int )</id>
    <exceptions>
      <e>PropertyTypeMismatchException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addEnums">
    <id>android.security.keymaster.KeymasterArguments.addEnums( int int[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tag</name>
      </param>
      <param>
        <type>int</type>
        <name>values</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createReprocessableCaptureSession">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.createReprocessableCaptureSession( InputConfiguration List StateCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>InputConfiguration</type>
        <name>inputConfig</name>
      </param>
      <param>
        <type>List</type>
        <name>outputs</name>
      </param>
      <param>
        <type>StateCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="decodeBase64">
    <id>android.security.keystore.recovery.X509CertificateParsingUtils.decodeBase64( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>string</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startViaZygote">
    <id>android.os.ZygoteProcess.startViaZygote( String String int int int[] int int int String String String String String boolean String int boolean long[] Map Map boolean boolean String[] )</id>
    <exceptions>
      <e>ZygoteStartFailedEx</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>processClass</name>
      </param>
      <param>
        <type>String</type>
        <name>niceName</name>
      </param>
      <param>
        <type>int</type>
        <name>uid</name>
      </param>
      <param>
        <type>int</type>
        <name>gid</name>
      </param>
      <param>
        <type>int[]</type>
        <name>gids</name>
      </param>
      <param>
        <type>int</type>
        <name>runtimeFlags</name>
      </param>
      <param>
        <type>int</type>
        <name>mountExternal</name>
      </param>
      <param>
        <type>int</type>
        <name>targetSdkVersion</name>
      </param>
      <param>
        <type>String</type>
        <name>seInfo</name>
      </param>
      <param>
        <type>String</type>
        <name>abi</name>
      </param>
      <param>
        <type>String</type>
        <name>instructionSet</name>
      </param>
      <param>
        <type>String</type>
        <name>appDataDir</name>
      </param>
      <param>
        <type>String</type>
        <name>invokeWith</name>
      </param>
      <param>
        <type>boolean</type>
        <name>startChildZygote</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>zygotePolicyFlags</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isTopApp</name>
      </param>
      <param>
        <type>long[]</type>
        <name>disabledCompatChanges</name>
      </param>
      <param>
        <type>Map</type>
        <name>pkgDataInfoMap</name>
      </param>
      <param>
        <type>Map</type>
        <name>allowlistedDataInfoList</name>
      </param>
      <param>
        <type>boolean</type>
        <name>bindMountAppsData</name>
      </param>
      <param>
        <type>boolean</type>
        <name>bindMountAppStorageDirs</name>
      </param>
      <param>
        <type>String[]</type>
        <name>extraArgs</name>
      </param>
    </params>
    <arity>23</arity>
  </method>
  <method name="getPackageInfo">
    <id>android.content.pm.PackageManager.getPackageInfo( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDimension">
    <id>android.content.res.TypedArray.getDimension( int float )</id>
    <exceptions>
      <e>RuntimeException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>float</type>
        <name>defValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onFailure">
    <id>android.service.autofill.FillCallback.onFailure( CharSequence )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>message</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onTrainRankingModel">
    <id>android.service.resolver.ResolverRankerService.onTrainRankingModel( List int )</id>
    <exceptions>
      <e>Exception</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>targets</name>
      </param>
      <param>
        <type>int</type>
        <name>selectedPosition</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="delete">
    <id>android.content.ContentProviderClient.delete( Uri String String[] )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>String</type>
        <name>selection</name>
      </param>
      <param>
        <type>String[]</type>
        <name>selectionArgs</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="open">
    <id>android.os.RedactingFileDescriptor.open( Context File int long[] long[] )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>File</type>
        <name>file</name>
      </param>
      <param>
        <type>int</type>
        <name>mode</name>
      </param>
      <param>
        <type>long[]</type>
        <name>redactRanges</name>
      </param>
      <param>
        <type>long[]</type>
        <name>freePositions</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="onUserSwitching">
    <id>android.app.SynchronousUserSwitchObserver.onUserSwitching( int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>newUserId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="TypeReference">
    <id>android.hardware.camera2.utils.TypeReference.TypeReference( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getInstrumentationInfo">
    <id>android.content.pm.PackageManager.getInstrumentationInfo( ComponentName int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>className</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="removeFirst">
    <id>android.util.LongArrayQueue.removeFirst( )</id>
    <exceptions>
      <e>NoSuchElementException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="parseLongSetting">
    <id>android.provider.Settings.parseLongSetting( String String )</id>
    <exceptions>
      <e>SettingNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>settingValue</name>
      </param>
      <param>
        <type>String</type>
        <name>settingName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="PersistableBundle">
    <id>android.os.PersistableBundle.PersistableBundle( Bundle )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Bundle</type>
        <name>b</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="checkClientTrusted">
    <id>android.security.net.config.RootTrustManager.checkClientTrusted( X509Certificate[] String )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>X509Certificate[]</type>
        <name>chain</name>
      </param>
      <param>
        <type>String</type>
        <name>authType</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setEventType">
    <id>android.view.accessibility.AccessibilityEvent.setEventType( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>eventType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getUserRestrictions">
    <id>android.app.admin.DevicePolicyManager.getUserRestrictions( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getScaledMinimumScalingSpan">
    <id>android.view.ViewConfiguration.getScaledMinimumScalingSpan( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getAllVisitedUrls">
    <id>android.provider.Browser.getAllVisitedUrls( ContentResolver )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>ContentResolver</type>
        <name>cr</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createContextForSdkInSandbox">
    <id>android.content.Context.createContextForSdkInSandbox( ApplicationInfo int )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
      <e>NameNotFoundException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ApplicationInfo</type>
        <name>sdkInfo</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setBoundsInScreen">
    <id>android.view.accessibility.AccessibilityNodeInfo.setBoundsInScreen( Rect )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Rect</type>
        <name>bounds</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="noteProxyOp">
    <id>android.app.AppOpsManager.noteProxyOp( String String int String String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>op</name>
      </param>
      <param>
        <type>String</type>
        <name>proxiedPackageName</name>
      </param>
      <param>
        <type>int</type>
        <name>proxiedUid</name>
      </param>
      <param>
        <type>String</type>
        <name>proxiedAttributionTag</name>
      </param>
      <param>
        <type>String</type>
        <name>message</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="update">
    <id>android.content.ContentProviderProxy.update( AttributionSource Uri ContentValues Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>ContentValues</type>
        <name>values</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="SigningDetails">
    <id>android.content.pm.SigningDetails.SigningDetails( Signature[] int Signature[] )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>Signature[]</type>
        <name>signatures</name>
      </param>
      <param>
        <type>int</type>
        <name>signatureSchemeVersion</name>
      </param>
      <param>
        <type>Signature[]</type>
        <name>pastSigningCertificates</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="canInteractAcrossProfiles">
    <id>android.content.pm.CrossProfileApps.canInteractAcrossProfiles( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getFont">
    <id>android.content.res.TypedArray.getFont( int )</id>
    <exceptions>
      <e>RuntimeException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createTransitionManagerFromXml">
    <id>android.transition.TransitionInflater.createTransitionManagerFromXml( XmlPullParser AttributeSet ViewGroup )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
      <param>
        <type>ViewGroup</type>
        <name>sceneRoot</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setLockTaskFeatures">
    <id>android.app.admin.DevicePolicyManager.setLockTaskFeatures( ComponentName int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getInitialSurroundingText">
    <id>android.view.inputmethod.EditorInfo.getInitialSurroundingText( int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>beforeLength</name>
      </param>
      <param>
        <type>int</type>
        <name>afterLength</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getEntityAndIncrementCursor">
    <id>android.content.CursorEntityIterator.getEntityAndIncrementCursor( Cursor )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Cursor</type>
        <name>cursor</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="validateSql">
    <id>android.database.sqlite.SQLiteDatabase.validateSql( String CancellationSignal )</id>
    <exceptions>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="expandTemplate">
    <id>android.text.TextUtils.expandTemplate( CharSequence CharSequence[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>template</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>values</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="finishComposingText">
    <id>android.view.inputmethod.InputConnectionWrapper.finishComposingText( )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="writeXmlForBackup">
    <id>android.app.NotificationChannel.writeXmlForBackup( XmlSerializer Context )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlSerializer</type>
        <name>out</name>
      </param>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="finalize">
    <id>android.database.sqlite.SQLiteDatabase.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="readCertificates">
    <id>android.util.jar.StrictJarVerifier.readCertificates( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="query">
    <id>android.content.ContentInterface.query( Uri String[] Bundle CancellationSignal )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String[]</type>
        <name>projection</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>queryArgs</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getApplicationInfo">
    <id>android.content.pm.PackageManager.getApplicationInfo( String ApplicationInfoFlags )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>ApplicationInfoFlags</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="loadFromDirectory">
    <id>android.content.res.loader.ResourcesProvider.loadFromDirectory( String AssetsProvider )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
      <param>
        <type>AssetsProvider</type>
        <name>assetsProvider</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="shutdownOutput">
    <id>android.net.LocalSocket.shutdownOutput( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getPackageGids">
    <id>android.app.ApplicationPackageManager.getPackageGids( String PackageInfoFlags )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>PackageInfoFlags</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setResponse">
    <id>android.hardware.location.ContextHubTransaction.setResponse( Response )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>Response</type>
        <name>response</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getValueForDensity">
    <id>android.content.res.ResourcesImpl.getValueForDensity( int int TypedValue boolean )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>density</name>
      </param>
      <param>
        <type>TypedValue</type>
        <name>outValue</name>
      </param>
      <param>
        <type>boolean</type>
        <name>resolveRefs</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="update">
    <id>android.content.LoggingContentInterface.update( Uri ContentValues Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>ContentValues</type>
        <name>values</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="SystemLightsManager">
    <id>android.hardware.lights.SystemLightsManager.SystemLightsManager( Context )</id>
    <exceptions>
      <e>ServiceNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDynamicShortcuts">
    <id>android.content.pm.ShortcutManager.getDynamicShortcuts( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="finalize">
    <id>android.app.prediction.AppPredictor.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="onImageFormatUpdate">
    <id>android.hardware.camera2.impl.CameraExtensionJpegProcessor.onImageFormatUpdate( int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="decodeCert">
    <id>android.security.keystore.recovery.X509CertificateParsingUtils.decodeCert( InputStream )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>inStream</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="copyToInt32Array">
    <id>android.os.HwBlob.copyToInt32Array( long int[] int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>int[]</type>
        <name>array</name>
      </param>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="enableSystemApp">
    <id>android.app.admin.DevicePolicyManager.enableSystemApp( ComponentName Intent )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="startActivity">
    <id>android.content.Context.startActivity( Intent )</id>
    <exceptions>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="revokeKeyPairFromWifiAuth">
    <id>android.app.admin.DevicePolicyManager.revokeKeyPairFromWifiAuth( String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>alias</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getWindow">
    <id>android.database.IBulkCursor.getWindow( int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onError">
    <id>android.hardware.face.FaceServiceReceiver.onError( int int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>error</name>
      </param>
      <param>
        <type>int</type>
        <name>vendorCode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="copyColorCurve">
    <id>android.hardware.camera2.params.TonemapCurve.copyColorCurve( int float[] int )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ArrayIndexOutOfBoundsException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>colorChannel</name>
      </param>
      <param>
        <type>float[]</type>
        <name>destination</name>
      </param>
      <param>
        <type>int</type>
        <name>offset</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parseInclude">
    <id>android.view.LayoutInflater.parseInclude( XmlPullParser Context View AttributeSet )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>View</type>
        <name>parent</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setMaximumFailedPasswordsForWipe">
    <id>android.app.admin.DevicePolicyManager.setMaximumFailedPasswordsForWipe( ComponentName int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>int</type>
        <name>num</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getInterfaceDescriptor">
    <id>android.os.IBinder.getInterfaceDescriptor( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="open">
    <id>android.hardware.SerialPort.open( ParcelFileDescriptor int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>pfd</name>
      </param>
      <param>
        <type>int</type>
        <name>speed</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getToggleValue">
    <id>android.view.autofill.AutofillValue.getToggleValue( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setTextSelection">
    <id>android.view.accessibility.AccessibilityNodeInfo.setTextSelection( int int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parsePermissionGroup">
    <id>android.content.pm.PackageParser.parsePermissionGroup( Package int Resources XmlResourceParser String[] )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Package</type>
        <name>owner</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>String[]</type>
        <name>outError</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="releaseLock">
    <id>android.hardware.camera2.utils.CloseableLock.releaseLock( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="findApkSignatureSchemeBlock">
    <id>android.util.apk.ApkSigningBlockUtils.findApkSignatureSchemeBlock( ByteBuffer int )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ByteBuffer</type>
        <name>apkSigningBlock</name>
      </param>
      <param>
        <type>int</type>
        <name>blockId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createPackageContextAsUser">
    <id>android.content.Context.createPackageContextAsUser( String int UserHandle )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getColor">
    <id>android.content.res.Resources.getColor( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="copyInternalSendfile">
    <id>android.os.FileUtils.copyInternalSendfile( FileDescriptor FileDescriptor long CancellationSignal Executor ProgressListener )</id>
    <exceptions>
      <e>ErrnoException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>in</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>out</name>
      </param>
      <param>
        <type>long</type>
        <name>count</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>ProgressListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="getConfidenceScore">
    <id>android.content.ClipDescription.getConfidenceScore( String )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>entity</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getTextAfterCursor">
    <id>android.view.inputmethod.InputConnection.getTextAfterCursor( int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>n</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getIndex">
    <id>android.content.res.TypedArray.getIndex( int )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>at</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="timeOf">
    <id>android.hardware.hdmi.HdmiTimerRecordSources.timeOf( int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hour</name>
      </param>
      <param>
        <type>int</type>
        <name>minute</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setStream">
    <id>android.app.DisabledWallpaperManager.setStream( InputStream Rect boolean int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>bitmapData</name>
      </param>
      <param>
        <type>Rect</type>
        <name>visibleCropHint</name>
      </param>
      <param>
        <type>boolean</type>
        <name>allowBackup</name>
      </param>
      <param>
        <type>int</type>
        <name>which</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="attachSystemDataTransport">
    <id>android.companion.CompanionDeviceService.attachSystemDataTransport( int InputStream OutputStream )</id>
    <exceptions>
      <e>DeviceNotAssociatedException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>associationId</name>
      </param>
      <param>
        <type>InputStream</type>
        <name>in</name>
      </param>
      <param>
        <type>OutputStream</type>
        <name>out</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="iterator">
    <id>android.util.jar.StrictJarFile.iterator( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="parseSplitApk">
    <id>android.content.pm.PackageParser.parseSplitApk( Package Resources XmlResourceParser int int String[] )</id>
    <exceptions>
      <e>PackageParserException</e>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Package</type>
        <name>pkg</name>
      </param>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>int</type>
        <name>splitIndex</name>
      </param>
      <param>
        <type>String[]</type>
        <name>outError</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="getInputStream">
    <id>android.net.LocalSocket.getInputStream( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setRequiredStrongAuthTimeout">
    <id>android.app.admin.DevicePolicyManager.setRequiredStrongAuthTimeout( ComponentName long )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>long</type>
        <name>timeoutMs</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createCancellationSignal">
    <id>android.content.ContentProviderProxy.createCancellationSignal( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="applyXmlFiltersAndDoFullBackupForDomain">
    <id>android.app.backup.BackupAgent.applyXmlFiltersAndDoFullBackupForDomain( String String Map Set ArraySet FullBackupDataOutput )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>String</type>
        <name>domainToken</name>
      </param>
      <param>
        <type>Map</type>
        <name>includeMap</name>
      </param>
      <param>
        <type>Set</type>
        <name>filterSet</name>
      </param>
      <param>
        <type>ArraySet</type>
        <name>traversalExcludeSet</name>
      </param>
      <param>
        <type>FullBackupDataOutput</type>
        <name>data</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="install">
    <id>android.net.SSLSessionCache.install( SSLSessionCache SSLContext )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>SSLSessionCache</type>
        <name>cache</name>
      </param>
      <param>
        <type>SSLContext</type>
        <name>context</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addAll">
    <id>android.widget.ArrayAdapter.addAll( Collection )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ClassCastException</e>
      <e>IllegalArgumentException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>Collection</type>
        <name>collection</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getOutputStream">
    <id>android.net.LocalSocket.getOutputStream( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="addAllowlistedRestrictedPermission">
    <id>android.permission.PermissionManager.addAllowlistedRestrictedPermission( String String int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>String</type>
        <name>permissionName</name>
      </param>
      <param>
        <type>int</type>
        <name>allowlistFlags</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="PermissionCheckerManager">
    <id>android.permission.PermissionCheckerManager.PermissionCheckerManager( Context )</id>
    <exceptions>
      <e>ServiceManager.ServiceNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="RedactingFileDescriptor">
    <id>android.os.RedactingFileDescriptor.RedactingFileDescriptor( Context File int long[] long[] )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>File</type>
        <name>file</name>
      </param>
      <param>
        <type>int</type>
        <name>mode</name>
      </param>
      <param>
        <type>long[]</type>
        <name>redactRanges</name>
      </param>
      <param>
        <type>long[]</type>
        <name>freeOffsets</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="setDeviceOwner">
    <id>android.app.admin.DevicePolicyManager.setDeviceOwner( ComponentName int )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>who</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getGainFactorVector">
    <id>android.hardware.camera2.params.LensShadingMap.getGainFactorVector( int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>column</name>
      </param>
      <param>
        <type>int</type>
        <name>row</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="openXmlResourceParser">
    <id>android.content.res.AssetManager.openXmlResourceParser( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fileName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeDataTypeToXml">
    <id>android.content.IntentFilter.writeDataTypeToXml( XmlSerializer String String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlSerializer</type>
        <name>serializer</name>
      </param>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>String</type>
        <name>tag</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getPackageUidAsUser">
    <id>android.content.pm.PackageManager.getPackageUidAsUser( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getProviderInfo">
    <id>android.content.pm.PackageManager.getProviderInfo( ComponentName ComponentInfoFlags )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>component</name>
      </param>
      <param>
        <type>ComponentInfoFlags</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="transactNative">
    <id>android.os.BinderProxy.transactNative( int Parcel Parcel int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>code</name>
      </param>
      <param>
        <type>Parcel</type>
        <name>data</name>
      </param>
      <param>
        <type>Parcel</type>
        <name>reply</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="MeteringRectangle">
    <id>android.hardware.camera2.params.MeteringRectangle.MeteringRectangle( Rect int )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Rect</type>
        <name>rect</name>
      </param>
      <param>
        <type>int</type>
        <name>meteringWeight</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nextInArray">
    <id>android.util.JsonReader.nextInArray( boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>firstElement</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setRepeatingRequest">
    <id>android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl.setRepeatingRequest( CaptureRequest CaptureCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>listener</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getPackageInfo">
    <id>android.content.pm.PackageManager.getPackageInfo( String PackageInfoFlags )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>PackageInfoFlags</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getConstantForFocusDirection">
    <id>android.view.SoundEffectConstants.getConstantForFocusDirection( int boolean )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>direction</name>
      </param>
      <param>
        <type>boolean</type>
        <name>repeating</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="openCamera">
    <id>android.hardware.camera2.CameraManager.openCamera( String int Executor StateCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>cameraId</name>
      </param>
      <param>
        <type>int</type>
        <name>oomScoreOffset</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>StateCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="registerAvailabilityCallback">
    <id>android.hardware.camera2.CameraManager.registerAvailabilityCallback( AvailabilityCallback Handler )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>AvailabilityCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isLoggable">
    <id>android.util.Log.isLoggable( String int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>tag</name>
      </param>
      <param>
        <type>int</type>
        <name>level</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nextLiteral">
    <id>android.util.JsonReader.nextLiteral( boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>assignOffsetsOnly</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getExtensionSupportedSizes">
    <id>android.hardware.camera2.CameraExtensionCharacteristics.getExtensionSupportedSizes( int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>extension</name>
      </param>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getApplicationInfoAsUser">
    <id>android.content.pm.PackageManager.getApplicationInfoAsUser( String ApplicationInfoFlags int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>ApplicationInfoFlags</type>
        <name>flags</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="copy">
    <id>android.os.FileUtils.copy( File File CancellationSignal Executor ProgressListener )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>from</name>
      </param>
      <param>
        <type>File</type>
        <name>to</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>ProgressListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="copy">
    <id>android.os.FileUtils.copy( InputStream OutputStream CancellationSignal Executor ProgressListener )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>in</name>
      </param>
      <param>
        <type>OutputStream</type>
        <name>out</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>ProgressListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getString">
    <id>android.os.HwBlob.getString( long )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="generateApkVerityFooter">
    <id>android.util.apk.VerityBuilder.generateApkVerityFooter( RandomAccessFile SignatureInfo ByteBuffer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>RandomAccessFile</type>
        <name>apk</name>
      </param>
      <param>
        <type>SignatureInfo</type>
        <name>signatureInfo</name>
      </param>
      <param>
        <type>ByteBuffer</type>
        <name>footerOutput</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="insert">
    <id>android.content.LoggingContentInterface.insert( Uri ContentValues Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>ContentValues</type>
        <name>initialValues</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="onTextClassifierEvent">
    <id>android.view.textclassifier.TextClassifier.onTextClassifierEvent( TextClassifierEvent )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>TextClassifierEvent</type>
        <name>event</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="noteForegroundResourceUseEnd">
    <id>android.app.ActivityManager.noteForegroundResourceUseEnd( int int int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>apiType</name>
      </param>
      <param>
        <type>int</type>
        <name>uid</name>
      </param>
      <param>
        <type>int</type>
        <name>pid</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isAutoDetectionEnabled">
    <id>android.app.time.TimeZoneConfiguration.isAutoDetectionEnabled( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="hasModifiers">
    <id>android.view.KeyEvent.hasModifiers( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>modifiers</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="captureViewLayer">
    <id>android.view.ViewDebug.captureViewLayer( View DataOutputStream boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>view</name>
      </param>
      <param>
        <type>DataOutputStream</type>
        <name>clientStream</name>
      </param>
      <param>
        <type>boolean</type>
        <name>visible</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="onBeforeUserSwitching">
    <id>android.app.UserSwitchObserver.onBeforeUserSwitching( int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>newUserId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="removeAction">
    <id>android.view.accessibility.AccessibilityNodeInfo.removeAction( AccessibilityAction )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>AccessibilityAction</type>
        <name>action</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addPersistentPreferredActivity">
    <id>android.app.admin.DevicePolicyManager.addPersistentPreferredActivity( ComponentName IntentFilter ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>IntentFilter</type>
        <name>filter</name>
      </param>
      <param>
        <type>ComponentName</type>
        <name>activity</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setAction">
    <id>android.view.accessibility.AccessibilityEvent.setAction( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>action</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getApplicationEnabledSetting">
    <id>android.content.pm.PackageManager.getApplicationEnabledSetting( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isFileSpecifiedInPathList">
    <id>android.app.backup.BackupUtils.isFileSpecifiedInPathList( File Collection )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>file</name>
      </param>
      <param>
        <type>Collection</type>
        <name>canonicalPathList</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="checksumCrc32">
    <id>android.os.FileUtils.checksumCrc32( File )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>file</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setApplicationStartInfoCompleteListener">
    <id>android.app.ActivityManager.setApplicationStartInfoCompleteListener( Executor ApplicationStartInfoCompleteListener )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>ApplicationStartInfoCompleteListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onRestore">
    <id>android.app.backup.FullBackupAgent.onRestore( BackupDataInput int ParcelFileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>BackupDataInput</type>
        <name>data</name>
      </param>
      <param>
        <type>int</type>
        <name>appVersionCode</name>
      </param>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>newState</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isMeteredDataDisabledPackageForUser">
    <id>android.app.admin.DevicePolicyManager.isMeteredDataDisabledPackageForUser( ComponentName String int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="record">
    <id>android.view.MotionPredictor.record( MotionEvent )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>MotionEvent</type>
        <name>event</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openProxyFileDescriptor">
    <id>android.os.storage.StorageManager.openProxyFileDescriptor( int ProxyFileDescriptorCallback Handler )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>mode</name>
      </param>
      <param>
        <type>ProxyFileDescriptorCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="requestPinShortcut">
    <id>android.content.pm.ShortcutManager.requestPinShortcut( ShortcutInfo IntentSender )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ShortcutInfo</type>
        <name>shortcut</name>
      </param>
      <param>
        <type>IntentSender</type>
        <name>resultIntent</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="removeId">
    <id>android.content.ContentUris.removeId( Uri )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>contentUri</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getNetworkPolicyFromBackup">
    <id>android.net.NetworkPolicy.getNetworkPolicyFromBackup( DataInputStream )</id>
    <exceptions>
      <e>BackupUtils.BadVersionException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataInputStream</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="VoiceInteractionServiceInfo">
    <id>android.service.voice.VoiceInteractionServiceInfo.VoiceInteractionServiceInfo( PackageManager ComponentName int )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>PackageManager</type>
        <name>pm</name>
      </param>
      <param>
        <type>ComponentName</type>
        <name>comp</name>
      </param>
      <param>
        <type>int</type>
        <name>userHandle</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="clearUserRestriction">
    <id>android.app.admin.DevicePolicyManager.clearUserRestriction( ComponentName String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>key</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="updateSessionAppIcon">
    <id>android.content.pm.PackageInstaller.updateSessionAppIcon( int Bitmap )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>sessionId</name>
      </param>
      <param>
        <type>Bitmap</type>
        <name>appIcon</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="updateSessionAppLabel">
    <id>android.content.pm.PackageInstaller.updateSessionAppLabel( int CharSequence )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>sessionId</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>appLabel</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="checkClientTrusted">
    <id>android.security.net.config.RootTrustManager.checkClientTrusted( X509Certificate[] String Socket )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>X509Certificate[]</type>
        <name>certs</name>
      </param>
      <param>
        <type>String</type>
        <name>authType</name>
      </param>
      <param>
        <type>Socket</type>
        <name>socket</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="startActivityFromFragment">
    <id>android.app.Activity.startActivityFromFragment( Fragment Intent int )</id>
    <exceptions>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Fragment</type>
        <name>fragment</name>
      </param>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
      <param>
        <type>int</type>
        <name>requestCode</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="onRestore">
    <id>android.app.backup.BackupAgent.onRestore( BackupDataInput long ParcelFileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>BackupDataInput</type>
        <name>data</name>
      </param>
      <param>
        <type>long</type>
        <name>appVersionCode</name>
      </param>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>newState</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="beforeValue">
    <id>android.util.JsonWriter.beforeValue( boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>root</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onBackup">
    <id>android.app.backup.BackupAgentHelper.onBackup( ParcelFileDescriptor BackupDataOutput ParcelFileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>oldState</name>
      </param>
      <param>
        <type>BackupDataOutput</type>
        <name>data</name>
      </param>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>newState</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="readFormatV1">
    <id>android.gesture.GestureStore.readFormatV1( DataInputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataInputStream</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isSessionConfigurationSupported">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.isSessionConfigurationSupported( SessionConfiguration )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalArgumentException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>SessionConfiguration</type>
        <name>sessionConfig</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="send">
    <id>android.app.PendingIntent.send( Context int Intent OnFinished Handler String )</id>
    <exceptions>
      <e>CanceledException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>int</type>
        <name>code</name>
      </param>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
      <param>
        <type>OnFinished</type>
        <name>onFinished</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
      <param>
        <type>String</type>
        <name>requiredPermission</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="endTransaction">
    <id>android.database.sqlite.SQLiteSession.endTransaction( CancellationSignal )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>OperationCanceledException</e>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="enableShortcuts">
    <id>android.content.pm.ShortcutManager.enableShortcuts( List )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>shortcutIds</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="native_write_array">
    <id>android.hardware.SerialPort.native_write_array( byte[] int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>buffer</name>
      </param>
      <param>
        <type>int</type>
        <name>length</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getInstallSourceInfo">
    <id>android.content.pm.PackageManager.getInstallSourceInfo( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="registerDisplayPortAltModeInfoListener">
    <id>android.hardware.usb.UsbManager.registerDisplayPortAltModeInfoListener( Executor DisplayPortAltModeInfoListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>DisplayPortAltModeInfoListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createApplicationContext">
    <id>android.content.Context.createApplicationContext( ApplicationInfo int )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ApplicationInfo</type>
        <name>application</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setApplicationHidden">
    <id>android.app.admin.DevicePolicyManager.setApplicationHidden( ComponentName String boolean )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>boolean</type>
        <name>hidden</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createAlwaysOnHotwordDetector">
    <id>android.service.voice.VoiceInteractionService.createAlwaysOnHotwordDetector( String Locale Callback )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>keyphrase</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
      <param>
        <type>Callback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="openNonAssetFd">
    <id>android.content.res.AssetManager.openNonAssetFd( int String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>cookie</name>
      </param>
      <param>
        <type>String</type>
        <name>fileName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isCacheBehaviorTombstone">
    <id>android.os.storage.StorageManager.isCacheBehaviorTombstone( File )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>path</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readInstallInfo">
    <id>android.content.pm.PackageInstaller.readInstallInfo( ParcelFileDescriptor String int )</id>
    <exceptions>
      <e>PackageParsingException</e>
    </exceptions>
    <params>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>pfd</name>
      </param>
      <param>
        <type>String</type>
        <name>debugPathName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="deleteDocument">
    <id>android.provider.DocumentsContract.deleteDocument( ContentResolver Uri )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ContentResolver</type>
        <name>content</name>
      </param>
      <param>
        <type>Uri</type>
        <name>documentUri</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="maybeUnwrapIOException">
    <id>android.util.ExceptionUtils.maybeUnwrapIOException( RuntimeException )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>RuntimeException</type>
        <name>e</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="grantKeyPairToApp">
    <id>android.app.admin.DevicePolicyManager.grantKeyPairToApp( ComponentName String String )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>alias</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="close">
    <id>android.content.res.AssetFileDescriptor.close( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="generateApkVerity">
    <id>android.util.apk.ApkSignatureSchemeV3Verifier.generateApkVerity( String ByteBufferFactory )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
      <e>DigestException</e>
      <e>SecurityException</e>
      <e>IOException</e>
      <e>NoSuchAlgorithmException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>apkPath</name>
      </param>
      <param>
        <type>ByteBufferFactory</type>
        <name>bufferFactory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setLocationEnabled">
    <id>android.app.admin.DevicePolicyManager.setLocationEnabled( ComponentName boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>boolean</type>
        <name>locationEnabled</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getSurface">
    <id>android.view.ScrollCaptureSession.getSurface( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="update">
    <id>android.content.ContentInterface.update( Uri ContentValues Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>ContentValues</type>
        <name>values</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="update">
    <id>android.service.autofill.augmented.FillWindow.update( Area View long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Area</type>
        <name>area</name>
      </param>
      <param>
        <type>View</type>
        <name>rootView</name>
      </param>
      <param>
        <type>long</type>
        <name>flags</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="SetEnabledProvidersException">
    <id>android.credentials.SetEnabledProvidersException.SetEnabledProvidersException( String String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>String</type>
        <name>message</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setLock">
    <id>android.app.KeyguardManager.setLock( int byte[] int byte[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>newLockType</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>newPassword</name>
      </param>
      <param>
        <type>int</type>
        <name>currentLockType</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>currentPassword</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="removeOnAccountsUpdatedListener">
    <id>android.accounts.AccountManager.removeOnAccountsUpdatedListener( OnAccountsUpdateListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>OnAccountsUpdateListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="IntentFilterVerificationInfo">
    <id>android.content.pm.IntentFilterVerificationInfo.IntentFilterVerificationInfo( TypedXmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="updateScores">
    <id>android.net.NetworkScoreManager.updateScores( ScoredNetwork[] )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ScoredNetwork[]</type>
        <name>networks</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="verify">
    <id>android.util.apk.ApkSignatureSchemeV3Verifier.verify( SignatureInfo int )</id>
    <exceptions>
      <e>PlatformNotSupportedException</e>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>SignatureInfo</type>
        <name>signatureInfo</name>
      </param>
      <param>
        <type>int</type>
        <name>blockId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setComposingRegion">
    <id>android.view.inputmethod.InputConnectionWrapper.setComposingRegion( int int )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="RecommendedStreamConfiguration">
    <id>android.hardware.camera2.params.RecommendedStreamConfiguration.RecommendedStreamConfiguration( int int int boolean int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
      <param>
        <type>int</type>
        <name>width</name>
      </param>
      <param>
        <type>int</type>
        <name>height</name>
      </param>
      <param>
        <type>boolean</type>
        <name>input</name>
      </param>
      <param>
        <type>int</type>
        <name>usecaseBitmap</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getDimensionPixelOffset">
    <id>android.content.res.TypedArray.getDimensionPixelOffset( int int )</id>
    <exceptions>
      <e>RuntimeException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>int</type>
        <name>defValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getApplicationInfo">
    <id>android.app.ApplicationPackageManager.getApplicationInfo( String ApplicationInfoFlags )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>ApplicationInfoFlags</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readFromProto">
    <id>android.app.ApplicationExitInfo.readFromProto( ProtoInputStream long )</id>
    <exceptions>
      <e>WireTypeMismatchException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ProtoInputStream</type>
        <name>proto</name>
      </param>
      <param>
        <type>long</type>
        <name>fieldId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withAppendedPath">
    <id>android.net.Uri.withAppendedPath( Uri String )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>baseUri</name>
      </param>
      <param>
        <type>String</type>
        <name>pathSegment</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="loadDrawable">
    <id>android.content.res.Resources.loadDrawable( TypedValue int int Theme )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedValue</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>density</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="clear">
    <id>android.app.DisabledWallpaperManager.clear( int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>which</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="extractCertificates">
    <id>android.util.apk.ApkSignatureSchemeV4Verifier.extractCertificates( String )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>apkFile</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseBundleExtras">
    <id>android.content.res.Resources.parseBundleExtras( XmlResourceParser Bundle )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>outBundle</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseBaseApkChild">
    <id>android.content.pm.PackageParser.parseBaseApkChild( Package Resources XmlResourceParser int String[] )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Package</type>
        <name>parentPkg</name>
      </param>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>String[]</type>
        <name>outError</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="openRawResourceFd">
    <id>android.content.res.ResourcesImpl.openRawResourceFd( int TypedValue )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>TypedValue</type>
        <name>tempValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="tune">
    <id>android.hardware.radio.RadioTuner.tune( ProgramSelector )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ProgramSelector</type>
        <name>selector</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onActivityUnpinned">
    <id>android.app.TaskStackListener.onActivityUnpinned( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="isOutputSupportedFor">
    <id>android.hardware.camera2.params.StreamConfigurationMap.isOutputSupportedFor( Class )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>klass</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getSelectedText">
    <id>android.view.inputmethod.InputConnectionWrapper.getSelectedText( int )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setDefault">
    <id>android.os.LocaleList.setDefault( LocaleList )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>LocaleList</type>
        <name>locales</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="apply">
    <id>android.service.autofill.InternalTransformation.apply( ValueFinder RemoteViews int )</id>
    <exceptions>
      <e>Exception</e>
    </exceptions>
    <params>
      <param>
        <type>ValueFinder</type>
        <name>finder</name>
      </param>
      <param>
        <type>RemoteViews</type>
        <name>template</name>
      </param>
      <param>
        <type>int</type>
        <name>childViewId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="removeSurface">
    <id>android.hardware.camera2.params.OutputConfiguration.removeSurface( Surface )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="removeGlobalOnLayoutListener">
    <id>android.view.ViewTreeObserver.removeGlobalOnLayoutListener( OnGlobalLayoutListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OnGlobalLayoutListener</type>
        <name>victim</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openFileDescriptor">
    <id>android.content.ContentResolver.openFileDescriptor( Uri String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="noteProxyOp">
    <id>android.app.AppOpsManager.noteProxyOp( int AttributionSource String boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>op</name>
      </param>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>String</type>
        <name>message</name>
      </param>
      <param>
        <type>boolean</type>
        <name>skipProxyOperation</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="addCrossProfileIntentFilter">
    <id>android.app.admin.DevicePolicyManager.addCrossProfileIntentFilter( ComponentName IntentFilter int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>IntentFilter</type>
        <name>filter</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="FontScaleConverter">
    <id>android.content.res.FontScaleConverter.FontScaleConverter( float[] float[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>float[]</type>
        <name>fromSp</name>
      </param>
      <param>
        <type>float[]</type>
        <name>toDp</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getExifData">
    <id>android.provider.MetadataReader.getExifData( InputStream String[] )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>stream</name>
      </param>
      <param>
        <type>String[]</type>
        <name>tags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="clearWallpaper">
    <id>android.content.ContextWrapper.clearWallpaper( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getProcessGroup">
    <id>android.os.Process.getProcessGroup( int )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>pid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startObservingDevicePresence">
    <id>android.companion.CompanionDeviceManager.startObservingDevicePresence( String )</id>
    <exceptions>
      <e>DeviceNotAssociatedException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>deviceAddress</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDeviceTemperatures">
    <id>android.os.HardwarePropertiesManager.getDeviceTemperatures( int int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>type</name>
      </param>
      <param>
        <type>int</type>
        <name>source</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createTaskDisplayArea">
    <id>android.window.DisplayAreaOrganizer.createTaskDisplayArea( int int String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>displayId</name>
      </param>
      <param>
        <type>int</type>
        <name>parentFeatureId</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parseUri">
    <id>android.content.Intent.parseUri( String int )</id>
    <exceptions>
      <e>URISyntaxException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>uri</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="hasFileDescriptors">
    <id>android.os.Parcel.hasFileDescriptors( int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>offset</name>
      </param>
      <param>
        <type>int</type>
        <name>length</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getInt">
    <id>android.content.res.TypedArray.getInt( int int )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>int</type>
        <name>defValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="TemperatureControlTemplate">
    <id>android.service.controls.templates.TemperatureControlTemplate.TemperatureControlTemplate( String ControlTemplate int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>templateId</name>
      </param>
      <param>
        <type>ControlTemplate</type>
        <name>controlTemplate</name>
      </param>
      <param>
        <type>int</type>
        <name>currentMode</name>
      </param>
      <param>
        <type>int</type>
        <name>currentActiveMode</name>
      </param>
      <param>
        <type>int</type>
        <name>modesFlag</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="ConsumerIrManager">
    <id>android.hardware.ConsumerIrManager.ConsumerIrManager( Context )</id>
    <exceptions>
      <e>ServiceNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="copyInternalSpliceSocket">
    <id>android.os.FileUtils.copyInternalSpliceSocket( FileDescriptor FileDescriptor long CancellationSignal Executor ProgressListener )</id>
    <exceptions>
      <e>ErrnoException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>in</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>out</name>
      </param>
      <param>
        <type>long</type>
        <name>count</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>ProgressListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="getConfiguredSubscriptionGroups">
    <id>android.net.vcn.VcnManager.getConfiguredSubscriptionGroups( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="read">
    <id>android.content.pm.LimitedLengthInputStream.read( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="waitForIdle">
    <id>android.app.UiAutomation.waitForIdle( long long )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>TimeoutException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>idleTimeoutMillis</name>
      </param>
      <param>
        <type>long</type>
        <name>globalTimeoutMillis</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isExternalStorageRemovable">
    <id>android.os.Environment.isExternalStorageRemovable( File )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>path</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setContentChangeTypes">
    <id>android.view.accessibility.AccessibilityEvent.setContentChangeTypes( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>changeTypes</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="close">
    <id>android.hardware.SerialPort.close( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="onUdfpsPointerDown">
    <id>android.hardware.fingerprint.FingerprintServiceReceiver.onUdfpsPointerDown( int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>sensorId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onUdfpsPointerUp">
    <id>android.hardware.fingerprint.FingerprintServiceReceiver.onUdfpsPointerUp( int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>sensorId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="verifyPackage">
    <id>android.os.RecoverySystem.verifyPackage( File ProgressListener File )</id>
    <exceptions>
      <e>GeneralSecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>packageFile</name>
      </param>
      <param>
        <type>ProgressListener</type>
        <name>listener</name>
      </param>
      <param>
        <type>File</type>
        <name>deviceCertsZipFile</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="pushDynamicShortcut">
    <id>android.content.pm.ShortcutManager.pushDynamicShortcut( ShortcutInfo )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ShortcutInfo</type>
        <name>shortcut</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getResourceName">
    <id>android.content.res.ResourcesImpl.getResourceName( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>resid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startActivityAsUser">
    <id>android.app.Activity.startActivityAsUser( Intent Bundle UserHandle )</id>
    <exceptions>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="onSuccess">
    <id>android.service.autofill.SaveCallback.onSuccess( IntentSender )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>IntentSender</type>
        <name>intentSender</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setThreadGroup">
    <id>android.os.Process.setThreadGroup( int int )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tid</name>
      </param>
      <param>
        <type>int</type>
        <name>group</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="switchUser">
    <id>android.app.admin.DevicePolicyManager.switchUser( ComponentName UserHandle )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>userHandle</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getAvailableCaptureRequestKeys">
    <id>android.hardware.camera2.CameraExtensionCharacteristics.getAvailableCaptureRequestKeys( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>extension</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="ClearCredentialStateException">
    <id>android.credentials.ClearCredentialStateException.ClearCredentialStateException( String Throwable )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>Throwable</type>
        <name>cause</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="loadColorStateList">
    <id>android.content.res.ResourcesImpl.loadColorStateList( Resources TypedValue int Theme )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>wrapper</name>
      </param>
      <param>
        <type>TypedValue</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="removeOnGlobalFocusChangeListener">
    <id>android.view.ViewTreeObserver.removeOnGlobalFocusChangeListener( OnGlobalFocusChangeListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OnGlobalFocusChangeListener</type>
        <name>victim</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="buildLayer">
    <id>android.view.View.buildLayer( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="persistHistoricalDataIfNeeded">
    <id>android.widget.ActivityChooserModel.persistHistoricalDataIfNeeded( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="exportUnrolledFlags">
    <id>android.view.ViewDebug.exportUnrolledFlags( BufferedWriter FlagToString[] int String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>BufferedWriter</type>
        <name>out</name>
      </param>
      <param>
        <type>FlagToString[]</type>
        <name>mapping</name>
      </param>
      <param>
        <type>int</type>
        <name>intValue</name>
      </param>
      <param>
        <type>String</type>
        <name>prefix</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="readInt8">
    <id>android.os.HwParcel.readInt8( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getValueForDensity">
    <id>android.content.res.Resources.getValueForDensity( int int TypedValue boolean )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>density</name>
      </param>
      <param>
        <type>TypedValue</type>
        <name>outValue</name>
      </param>
      <param>
        <type>boolean</type>
        <name>resolveRefs</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="hasKeyPair">
    <id>android.app.admin.DevicePolicyManager.hasKeyPair( String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>alias</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createCustomCaptureSession">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.createCustomCaptureSession( InputConfiguration List int StateCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>InputConfiguration</type>
        <name>inputConfig</name>
      </param>
      <param>
        <type>List</type>
        <name>outputs</name>
      </param>
      <param>
        <type>int</type>
        <name>operatingMode</name>
      </param>
      <param>
        <type>StateCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="Face">
    <id>android.hardware.camera2.params.Face.Face( Rect int int Point Point Point )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Rect</type>
        <name>bounds</name>
      </param>
      <param>
        <type>int</type>
        <name>score</name>
      </param>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>Point</type>
        <name>leftEyePosition</name>
      </param>
      <param>
        <type>Point</type>
        <name>rightEyePosition</name>
      </param>
      <param>
        <type>Point</type>
        <name>mouthPosition</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="attemptZygoteSendArgsAndGetResult">
    <id>android.os.ZygoteProcess.attemptZygoteSendArgsAndGetResult( ZygoteState String )</id>
    <exceptions>
      <e>ZygoteStartFailedEx</e>
    </exceptions>
    <params>
      <param>
        <type>ZygoteState</type>
        <name>zygoteState</name>
      </param>
      <param>
        <type>String</type>
        <name>msgStr</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getShortcuts">
    <id>android.content.pm.LauncherApps.getShortcuts( ShortcutQuery UserHandle )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>ShortcutQuery</type>
        <name>query</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDocumentMetadata">
    <id>android.provider.DocumentsProvider.getDocumentMetadata( String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>documentId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeConditionXml">
    <id>android.service.notification.ZenModeConfig.writeConditionXml( Condition TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Condition</type>
        <name>c</name>
      </param>
      <param>
        <type>TypedXmlSerializer</type>
        <name>out</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="shellCommand">
    <id>android.os.BinderProxy.shellCommand( FileDescriptor FileDescriptor FileDescriptor String[] ShellCallback ResultReceiver )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>in</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>out</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>err</name>
      </param>
      <param>
        <type>String[]</type>
        <name>args</name>
      </param>
      <param>
        <type>ShellCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>ResultReceiver</type>
        <name>resultReceiver</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="moveDir">
    <id>android.os.incremental.IncrementalStorage.moveDir( String String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sourcePath</name>
      </param>
      <param>
        <type>String</type>
        <name>destPath</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPreferentialNetworkServiceConfigs">
    <id>android.app.admin.DevicePolicyManager.getPreferentialNetworkServiceConfigs( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="DevicePolicyStringResource">
    <id>android.app.admin.DevicePolicyStringResource.DevicePolicyStringResource( Context String int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>String</type>
        <name>stringId</name>
      </param>
      <param>
        <type>int</type>
        <name>resourceIdInCallingPackage</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isPackageSuspended">
    <id>android.content.pm.PackageManager.isPackageSuspended( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="create">
    <id>android.view.PointerIcon.create( Bitmap float float )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Bitmap</type>
        <name>bitmap</name>
      </param>
      <param>
        <type>float</type>
        <name>hotSpotX</name>
      </param>
      <param>
        <type>float</type>
        <name>hotSpotY</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="bulkInsert">
    <id>android.content.IContentProvider.bulkInsert( AttributionSource Uri ContentValues[] )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>ContentValues[]</type>
        <name>initialValues</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="reopenReadWrite">
    <id>android.database.sqlite.SQLiteDatabase.reopenReadWrite( )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SQLiteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getCurrentFailedPasswordAttempts">
    <id>android.app.admin.DevicePolicyManager.getCurrentFailedPasswordAttempts( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getEnum">
    <id>android.security.keymaster.KeymasterArguments.getEnum( int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tag</name>
      </param>
      <param>
        <type>int</type>
        <name>defaultValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseViewTag">
    <id>android.view.LayoutInflater.parseViewTag( XmlPullParser View AttributeSet )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>View</type>
        <name>view</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="applyInternal">
    <id>android.content.ContentProviderOperation.applyInternal( ContentProvider ContentProviderResult[] int )</id>
    <exceptions>
      <e>OperationApplicationException</e>
    </exceptions>
    <params>
      <param>
        <type>ContentProvider</type>
        <name>provider</name>
      </param>
      <param>
        <type>ContentProviderResult[]</type>
        <name>backRefs</name>
      </param>
      <param>
        <type>int</type>
        <name>numBackRefs</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="updateOutputConfiguration">
    <id>android.hardware.camera2.impl.ICameraDeviceUserWrapper.updateOutputConfiguration( int OutputConfiguration )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>streamId</name>
      </param>
      <param>
        <type>OutputConfiguration</type>
        <name>config</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setWallpaper">
    <id>android.content.Context.setWallpaper( Bitmap )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Bitmap</type>
        <name>bitmap</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="decode">
    <id>android.util.Base64.decode( byte[] int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>input</name>
      </param>
      <param>
        <type>int</type>
        <name>offset</name>
      </param>
      <param>
        <type>int</type>
        <name>len</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="currentFieldToString">
    <id>android.util.proto.ProtoUtils.currentFieldToString( ProtoInputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ProtoInputStream</type>
        <name>proto</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="finalize">
    <id>android.view.animation.Animation.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="bindLocal">
    <id>android.net.LocalSocketImpl.bindLocal( FileDescriptor String int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>namespace</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="startActivityFromChild">
    <id>android.app.Activity.startActivityFromChild( Activity Intent int )</id>
    <exceptions>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Activity</type>
        <name>child</name>
      </param>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
      <param>
        <type>int</type>
        <name>requestCode</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="canonicalize">
    <id>android.content.ContentInterface.canonicalize( Uri )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="TextBoundsInfoResult">
    <id>android.view.inputmethod.TextBoundsInfoResult.TextBoundsInfoResult( int TextBoundsInfo )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>resultCode</name>
      </param>
      <param>
        <type>TextBoundsInfo</type>
        <name>textBoundsInfo</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createHighSpeedRequestList">
    <id>android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl.createHighSpeedRequestList( CaptureRequest )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getKeysFromGrants">
    <id>android.security.keystore.recovery.RecoverySession.getKeysFromGrants( Map )</id>
    <exceptions>
      <e>InternalRecoveryServiceException</e>
    </exceptions>
    <params>
      <param>
        <type>Map</type>
        <name>grantAliases</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setFreezePeriods">
    <id>android.app.admin.SystemUpdatePolicy.setFreezePeriods( List )</id>
    <exceptions>
      <e>ValidationFailedException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>freezePeriods</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="extractSignature">
    <id>android.util.apk.ApkSignatureSchemeV4Verifier.extractSignature( String )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>apkFile</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="remove">
    <id>android.view.WindowlessWindowManager.remove( IWindow )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>IWindow</type>
        <name>window</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openTypedAssetFileDescriptor">
    <id>android.content.ContentResolver.openTypedAssetFileDescriptor( Uri String Bundle )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeType</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>opts</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="finalize">
    <id>android.os.Parcel.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="KeyguardManager">
    <id>android.app.KeyguardManager.KeyguardManager( Context )</id>
    <exceptions>
      <e>ServiceNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeToXml">
    <id>android.app.admin.PreferentialNetworkServiceConfig.writeToXml( TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>out</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readHidlMemory">
    <id>android.os.HwParcel.readHidlMemory( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="dumpAsync">
    <id>android.os.IBinder.dumpAsync( FileDescriptor String[] )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
      <param>
        <type>String[]</type>
        <name>args</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="RangeTemplate">
    <id>android.service.controls.templates.RangeTemplate.RangeTemplate( Bundle )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Bundle</type>
        <name>b</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="authenticate">
    <id>android.hardware.face.FaceManager.authenticate( CryptoObject CancellationSignal AuthenticationCallback Handler FaceAuthenticateOptions )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>CryptoObject</type>
        <name>crypto</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancel</name>
      </param>
      <param>
        <type>AuthenticationCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
      <param>
        <type>FaceAuthenticateOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="onWrite">
    <id>android.os.ProxyFileDescriptorCallback.onWrite( long int byte[] )</id>
    <exceptions>
      <e>ErrnoException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>data</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="finalize">
    <id>android.hardware.HardwareBuffer.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="resumeTranslation">
    <id>android.view.translation.UiTranslationManager.resumeTranslation( ActivityId )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>ActivityId</type>
        <name>activityId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="peekDrawable">
    <id>android.app.WallpaperManager.peekDrawable( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setFactoryResetProtectionPolicy">
    <id>android.app.admin.DevicePolicyManager.setFactoryResetProtectionPolicy( ComponentName FactoryResetProtectionPolicy )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>FactoryResetProtectionPolicy</type>
        <name>policy</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createCaptureSessionInternal">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.createCaptureSessionInternal( InputConfiguration List StateCallback Executor int CaptureRequest )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>InputConfiguration</type>
        <name>inputConfig</name>
      </param>
      <param>
        <type>List</type>
        <name>outputConfigurations</name>
      </param>
      <param>
        <type>StateCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>int</type>
        <name>operatingMode</name>
      </param>
      <param>
        <type>CaptureRequest</type>
        <name>sessionParams</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="getTrustedCerts">
    <id>android.os.RecoverySystem.getTrustedCerts( File )</id>
    <exceptions>
      <e>GeneralSecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>keystore</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="refresh">
    <id>android.content.ContentProviderClient.refresh( Uri Bundle CancellationSignal )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="openFile">
    <id>android.content.LoggingContentInterface.openFile( Uri String CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="putInt64">
    <id>android.os.HwBlob.putInt64( long long )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>long</type>
        <name>x</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onBackup">
    <id>android.app.backup.FullBackupAgent.onBackup( ParcelFileDescriptor BackupDataOutput ParcelFileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>oldState</name>
      </param>
      <param>
        <type>BackupDataOutput</type>
        <name>data</name>
      </param>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>newState</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setScrollable">
    <id>android.view.accessibility.AccessibilityNodeInfo.setScrollable( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>scrollable</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createRequestInteractAcrossProfilesIntent">
    <id>android.content.pm.CrossProfileApps.createRequestInteractAcrossProfilesIntent( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="finalizeWorkProfileProvisioning">
    <id>android.app.admin.DevicePolicyManager.finalizeWorkProfileProvisioning( UserHandle Account )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>UserHandle</type>
        <name>managedProfileUser</name>
      </param>
      <param>
        <type>Account</type>
        <name>migratedAccount</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getProvider">
    <id>android.content.SyncRequest.getProvider( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getLastNetworkLogRetrievalTime">
    <id>android.app.admin.DevicePolicyManager.getLastNetworkLogRetrievalTime( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="dup">
    <id>android.os.ParcelFileDescriptor.dup( FileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>orig</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="updateDeviceId">
    <id>android.content.Context.updateDeviceId( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>deviceId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setApplicationRestrictionsManagingPackage">
    <id>android.app.admin.DevicePolicyManager.setApplicationRestrictionsManagingPackage( ComponentName String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getStats">
    <id>android.os.health.HealthStats.getStats( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>key</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addOnGlobalLayoutListener">
    <id>android.view.ViewTreeObserver.addOnGlobalLayoutListener( OnGlobalLayoutListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OnGlobalLayoutListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nextBoolean">
    <id>android.util.JsonReader.nextBoolean( )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getInteger">
    <id>android.content.res.TypedArray.getInteger( int int )</id>
    <exceptions>
      <e>RuntimeException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>int</type>
        <name>defValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="MandatoryStreamCombination">
    <id>android.hardware.camera2.params.MandatoryStreamCombination.MandatoryStreamCombination( List String boolean )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>streamsInformation</name>
      </param>
      <param>
        <type>String</type>
        <name>description</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isReprocessable</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="copy">
    <id>android.os.FileUtils.copy( FileDescriptor FileDescriptor long CancellationSignal Executor ProgressListener )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>in</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>out</name>
      </param>
      <param>
        <type>long</type>
        <name>count</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>ProgressListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="LocusId">
    <id>android.content.LocusId.LocusId( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getUuidForPath">
    <id>android.os.storage.StorageManager.getUuidForPath( File )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>path</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createVirtualDisplay">
    <id>android.hardware.display.DisplayManager.createVirtualDisplay( VirtualDisplayConfig Handler Callback )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>VirtualDisplayConfig</type>
        <name>config</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
      <param>
        <type>Callback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getSurfaceDataspace">
    <id>android.hardware.camera2.utils.SurfaceUtils.getSurfaceDataspace( Surface )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="get">
    <id>android.os.AsyncTask.get( long TimeUnit )</id>
    <exceptions>
      <e>CancellationException</e>
      <e>ExecutionException</e>
      <e>InterruptedException</e>
      <e>TimeoutException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>timeout</name>
      </param>
      <param>
        <type>TimeUnit</type>
        <name>unit</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createAnimationFromXml">
    <id>android.view.animation.AnimationUtils.createAnimationFromXml( Context XmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>c</name>
      </param>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPackageInfo">
    <id>android.app.ApplicationPackageManager.getPackageInfo( VersionedPackage PackageInfoFlags )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>VersionedPackage</type>
        <name>versionedPackage</name>
      </param>
      <param>
        <type>PackageInfoFlags</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onTaskRemovalStarted">
    <id>android.app.TaskStackListener.onTaskRemovalStarted( int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>taskId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="open">
    <id>android.util.CloseGuard.open( String )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>closeMethodName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPasswordMinimumLetters">
    <id>android.app.admin.DevicePolicyManager.setPasswordMinimumLetters( ComponentName int )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>int</type>
        <name>length</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="requestBugreport">
    <id>android.app.admin.DevicePolicyManager.requestBugreport( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toVpnProfile">
    <id>android.net.Ikev2VpnProfile.toVpnProfile( )</id>
    <exceptions>
      <e>GeneralSecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="finalize">
    <id>android.app.ContextImpl.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setCredentialManagerPolicy">
    <id>android.app.admin.DevicePolicyManager.setCredentialManagerPolicy( PackagePolicy )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>PackagePolicy</type>
        <name>policy</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="updateOutputConfiguration">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.updateOutputConfiguration( OutputConfiguration )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>OutputConfiguration</type>
        <name>config</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="removeWhitelistedRestrictedPermission">
    <id>android.content.pm.PackageManager.removeWhitelistedRestrictedPermission( String String int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>String</type>
        <name>permName</name>
      </param>
      <param>
        <type>int</type>
        <name>whitelistFlags</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="nextLong">
    <id>android.util.JsonReader.nextLong( )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>NumberFormatException</e>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getBeginning">
    <id>android.text.method.WordIterator.getBeginning( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>offset</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setMeteredDataDisabledPackages">
    <id>android.app.admin.DevicePolicyManager.setMeteredDataDisabledPackages( ComponentName List )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>List</type>
        <name>packageNames</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="StrictJarFile">
    <id>android.util.jar.StrictJarFile.StrictJarFile( FileDescriptor boolean boolean )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
      <param>
        <type>boolean</type>
        <name>verify</name>
      </param>
      <param>
        <type>boolean</type>
        <name>signatureSchemeRollbackProtectionsEnforced</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getDrawable">
    <id>android.app.WallpaperManager.getDrawable( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="LensShadingMap">
    <id>android.hardware.camera2.params.LensShadingMap.LensShadingMap( float[] int int )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>float[]</type>
        <name>elements</name>
      </param>
      <param>
        <type>int</type>
        <name>rows</name>
      </param>
      <param>
        <type>int</type>
        <name>columns</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="removeKey">
    <id>android.security.keystore.recovery.RecoveryController.removeKey( String )</id>
    <exceptions>
      <e>InternalRecoveryServiceException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>alias</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setMovementGranularities">
    <id>android.view.accessibility.AccessibilityNodeInfo.setMovementGranularities( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>granularities</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="or">
    <id>android.service.autofill.Validators.or( Validator[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Validator</type>
        <name>validators</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onTransact">
    <id>android.os.Binder.onTransact( int Parcel Parcel int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>code</name>
      </param>
      <param>
        <type>Parcel</type>
        <name>data</name>
      </param>
      <param>
        <type>Parcel</type>
        <name>reply</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="readLong">
    <id>android.util.proto.ProtoInputStream.readLong( long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>fieldId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="executeForChangedRowCount">
    <id>android.database.sqlite.SQLiteSession.executeForChangedRowCount( String Object[] int CancellationSignal )</id>
    <exceptions>
      <e>OperationCanceledException</e>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>bindArgs</name>
      </param>
      <param>
        <type>int</type>
        <name>connectionFlags</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="unlock">
    <id>android.hardware.Camera.unlock( )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="nativeOpenXml">
    <id>android.content.res.ApkAssets.nativeOpenXml( long String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>ptr</name>
      </param>
      <param>
        <type>String</type>
        <name>fileName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="deserializeMethodParameters">
    <id>android.ddm.DdmHandleViewDebug.deserializeMethodParameters( Object[] Class[] ByteBuffer )</id>
    <exceptions>
      <e>ViewMethodInvocationSerializationException</e>
    </exceptions>
    <params>
      <param>
        <type>Object[]</type>
        <name>args</name>
      </param>
      <param>
        <type>Class[]</type>
        <name>argTypes</name>
      </param>
      <param>
        <type>ByteBuffer</type>
        <name>in</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="finalize">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setTextSelectable">
    <id>android.view.accessibility.AccessibilityNodeInfo.setTextSelectable( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>selectableText</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setProperties">
    <id>android.provider.DeviceConfigInterface.setProperties( Properties )</id>
    <exceptions>
      <e>BadConfigException</e>
    </exceptions>
    <params>
      <param>
        <type>Properties</type>
        <name>properties</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="prepare">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.prepare( Surface )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAutoTimeZoneEnabled">
    <id>android.app.admin.DevicePolicyManager.getAutoTimeZoneEnabled( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openInternal">
    <id>android.os.ParcelFileDescriptor.openInternal( File int )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>file</name>
      </param>
      <param>
        <type>int</type>
        <name>mode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="write">
    <id>android.util.Base64OutputStream.write( byte[] int int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>b</name>
      </param>
      <param>
        <type>int</type>
        <name>off</name>
      </param>
      <param>
        <type>int</type>
        <name>len</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="addService">
    <id>android.os.ServiceManagerProxy.addService( String IBinder boolean int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>IBinder</type>
        <name>service</name>
      </param>
      <param>
        <type>boolean</type>
        <name>allowIsolated</name>
      </param>
      <param>
        <type>int</type>
        <name>dumpPriority</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="intersect">
    <id>android.util.Range.intersect( T T )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>lower</name>
      </param>
      <param>
        <type>T</type>
        <name>upper</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="decode">
    <id>android.webkit.URLUtil.decode( byte[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>url</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="linkToDeath">
    <id>android.os.IBinder.linkToDeath( DeathRecipient int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>DeathRecipient</type>
        <name>recipient</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="finalize">
    <id>android.print.PrinterDiscoverySession.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setAvailableExtraData">
    <id>android.view.accessibility.AccessibilityNodeInfo.setAvailableExtraData( List )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>extraDataKeys</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="fromFd">
    <id>android.os.ParcelFileDescriptor.fromFd( int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>fd</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="close">
    <id>android.os.ParcelFileDescriptor.close( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getCameraAudioRestriction">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.getCameraAudioRestriction( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getFloat">
    <id>android.content.res.TypedArray.getFloat( int float )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>float</type>
        <name>defValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readValue">
    <id>android.util.jar.StrictJarManifestReader.readValue( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createUserStorageKeys">
    <id>android.os.storage.StorageManager.createUserStorageKeys( int boolean )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
      <param>
        <type>boolean</type>
        <name>ephemeral</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDrawable">
    <id>android.app.WallpaperManager.getDrawable( int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>which</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="loadDrawable">
    <id>android.content.res.ResourcesImpl.loadDrawable( Resources TypedValue int int Theme )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>wrapper</name>
      </param>
      <param>
        <type>TypedValue</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>density</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getBounds">
    <id>android.text.PrecomputedText.getBounds( int int Rect )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>end</name>
      </param>
      <param>
        <type>Rect</type>
        <name>bounds</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="loadNanoApp">
    <id>android.hardware.location.ContextHubManager.loadNanoApp( ContextHubInfo NanoAppBinary )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>ContextHubInfo</type>
        <name>hubInfo</name>
      </param>
      <param>
        <type>NanoAppBinary</type>
        <name>appBinary</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="extend">
    <id>android.util.Range.extend( Range )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>Range</type>
        <name>range</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getVerityRootHash">
    <id>android.util.apk.ApkSignatureSchemeV3Verifier.getVerityRootHash( String )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>apkPath</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getParent">
    <id>android.view.accessibility.AccessibilityNodeInfo.getParent( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>prefetchingStrategy</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openDocumentThumbnail">
    <id>android.provider.DocumentsProvider.openDocumentThumbnail( String Point CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>AuthenticationRequiredException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>documentId</name>
      </param>
      <param>
        <type>Point</type>
        <name>sizeHint</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getTypeAnonymousAsync">
    <id>android.content.ContentProviderProxy.getTypeAnonymousAsync( Uri RemoteCallback )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>RemoteCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="removeAllViews">
    <id>android.widget.AdapterView.removeAllViews( )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setSingleRepeatingRequest">
    <id>android.hardware.camera2.impl.CameraCaptureSessionImpl.setSingleRepeatingRequest( CaptureRequest Executor CaptureCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="switchToOffline">
    <id>android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl.switchToOffline( Collection Executor CameraOfflineSessionCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>Collection</type>
        <name>offlineOutputs</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>CameraOfflineSessionCallback</type>
        <name>listener</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getSignatureSchemeApkContentDigests">
    <id>android.util.apk.SourceStampVerifier.getSignatureSchemeApkContentDigests( RandomAccessFile byte[] )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>RandomAccessFile</type>
        <name>apk</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>manifestBytes</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="uncacheShortcuts">
    <id>android.content.pm.LauncherApps.uncacheShortcuts( String List UserHandle int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>List</type>
        <name>shortcutIds</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
      <param>
        <type>int</type>
        <name>cacheFlags</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="addOnComputeInternalInsetsListener">
    <id>android.view.ViewTreeObserver.addOnComputeInternalInsetsListener( OnComputeInternalInsetsListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OnComputeInternalInsetsListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="connectWithTimeout">
    <id>android.app.UiAutomation.connectWithTimeout( int long )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>TimeoutException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>long</type>
        <name>timeoutMillis</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseProviderTags">
    <id>android.content.pm.PackageParser.parseProviderTags( Resources XmlResourceParser boolean Provider String[] )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>boolean</type>
        <name>visibleToEphemeral</name>
      </param>
      <param>
        <type>Provider</type>
        <name>outInfo</name>
      </param>
      <param>
        <type>String[]</type>
        <name>outError</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getOutputStallDuration">
    <id>android.hardware.camera2.params.StreamConfigurationMap.getOutputStallDuration( int Size )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
      <param>
        <type>Size</type>
        <name>size</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="prepare">
    <id>android.hardware.camera2.impl.CameraCaptureSessionImpl.prepare( Surface )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createSocket">
    <id>android.net.SSLCertificateSocketFactory.createSocket( String int InetAddress int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>host</name>
      </param>
      <param>
        <type>int</type>
        <name>port</name>
      </param>
      <param>
        <type>InetAddress</type>
        <name>localAddr</name>
      </param>
      <param>
        <type>int</type>
        <name>localPort</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="mapDouble">
    <id>android.view.inspector.PropertyMapper.mapDouble( String int )</id>
    <exceptions>
      <e>PropertyConflictException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>attributeId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="writeToXml">
    <id>android.os.PowerComponents.writeToXml( TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>serializer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setSingleRepeatingRequest">
    <id>android.hardware.camera2.impl.CameraOfflineSessionImpl.setSingleRepeatingRequest( CaptureRequest Executor CaptureCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getReprocessableSessionId">
    <id>android.hardware.camera2.CaptureRequest.getReprocessableSessionId( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="mapIntEnum">
    <id>android.view.inspector.PropertyMapper.mapIntEnum( String int IntFunction )</id>
    <exceptions>
      <e>PropertyConflictException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>attributeId</name>
      </param>
      <param>
        <type>IntFunction</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setStream">
    <id>android.app.WallpaperManager.setStream( InputStream Rect boolean )</id>
    <exceptions>
      <e>IOException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>bitmapData</name>
      </param>
      <param>
        <type>Rect</type>
        <name>visibleCropHint</name>
      </param>
      <param>
        <type>boolean</type>
        <name>allowBackup</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getChoreographer">
    <id>android.view.SurfaceControl.getChoreographer( Looper )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Looper</type>
        <name>looper</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startProvisionedVpnProfileSession">
    <id>android.net.VpnManager.startProvisionedVpnProfileSession( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setFontVariationSettings">
    <id>android.widget.TextView.setFontVariationSettings( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fontVariationSettings</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="tearDown">
    <id>android.hardware.camera2.impl.CameraCaptureSessionImpl.tearDown( Surface )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="insertAt">
    <id>android.text.PackedIntVector.insertAt( int int[] )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>row</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readFromProto">
    <id>android.app.WindowConfiguration.readFromProto( ProtoInputStream long )</id>
    <exceptions>
      <e>WireTypeMismatchException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ProtoInputStream</type>
        <name>proto</name>
      </param>
      <param>
        <type>long</type>
        <name>fieldId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="openProxyFileDescriptor">
    <id>android.os.storage.StorageManager.openProxyFileDescriptor( int ProxyFileDescriptorCallback Handler ThreadFactory )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>mode</name>
      </param>
      <param>
        <type>ProxyFileDescriptorCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
      <param>
        <type>ThreadFactory</type>
        <name>factory</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="allocateBytes">
    <id>android.os.storage.StorageManager.allocateBytes( UUID long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>UUID</type>
        <name>storageUuid</name>
      </param>
      <param>
        <type>long</type>
        <name>bytes</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDocumentMetadata">
    <id>android.provider.DocumentsContract.getDocumentMetadata( ContentResolver Uri )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ContentResolver</type>
        <name>content</name>
      </param>
      <param>
        <type>Uri</type>
        <name>documentUri</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setCameraAudioRestriction">
    <id>android.hardware.camera2.impl.ICameraDeviceUserWrapper.setCameraAudioRestriction( int )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>mode</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onFingerprintDetected">
    <id>android.hardware.fingerprint.FingerprintServiceReceiver.onFingerprintDetected( int int boolean )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>sensorId</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isStrongBiometric</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="openTypedAssetFile">
    <id>android.content.ContentResolver.openTypedAssetFile( Uri String Bundle CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeTypeFilter</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>opts</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="ofExternalPlug">
    <id>android.hardware.hdmi.HdmiTimerRecordSources.ofExternalPlug( TimerInfo ExternalPlugData )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>TimerInfo</type>
        <name>timerInfo</name>
      </param>
      <param>
        <type>ExternalPlugData</type>
        <name>source</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setLayoutParameter">
    <id>android.view.ViewDebug.setLayoutParameter( View String int )</id>
    <exceptions>
      <e>NoSuchFieldException</e>
      <e>IllegalAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>view</name>
      </param>
      <param>
        <type>String</type>
        <name>param</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="registerUsageSessionObserver">
    <id>android.app.usage.UsageStatsManager.registerUsageSessionObserver( int String[] Duration Duration PendingIntent PendingIntent )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>sessionObserverId</name>
      </param>
      <param>
        <type>String[]</type>
        <name>observedEntities</name>
      </param>
      <param>
        <type>Duration</type>
        <name>timeLimit</name>
      </param>
      <param>
        <type>Duration</type>
        <name>sessionThresholdTime</name>
      </param>
      <param>
        <type>PendingIntent</type>
        <name>limitReachedCallbackIntent</name>
      </param>
      <param>
        <type>PendingIntent</type>
        <name>sessionEndCallbackIntent</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="translate">
    <id>android.view.translation.Translator.translate( TranslationRequest CancellationSignal Executor Consumer )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>TranslationRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>Consumer</type>
        <name>callback</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="startIntentSender">
    <id>android.app.Activity.startIntentSender( IntentSender Intent int int int )</id>
    <exceptions>
      <e>IntentSender.SendIntentException</e>
    </exceptions>
    <params>
      <param>
        <type>IntentSender</type>
        <name>intent</name>
      </param>
      <param>
        <type>Intent</type>
        <name>fillInIntent</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsMask</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsValues</name>
      </param>
      <param>
        <type>int</type>
        <name>extraFlags</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="writeAttributeValueToXml">
    <id>android.app.admin.PreferentialNetworkServiceConfig.writeAttributeValueToXml( TypedXmlSerializer String boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>out</name>
      </param>
      <param>
        <type>String</type>
        <name>tag</name>
      </param>
      <param>
        <type>boolean</type>
        <name>value</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="create">
    <id>android.util.Range.create( T T )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>lower</name>
      </param>
      <param>
        <type>T</type>
        <name>upper</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setDefaultDialerApplication">
    <id>android.app.admin.DevicePolicyManager.setDefaultDialerApplication( String )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="verify">
    <id>android.util.apk.WrappedX509Certificate.verify( PublicKey )</id>
    <exceptions>
      <e>CertificateException</e>
      <e>NoSuchAlgorithmException</e>
      <e>SignatureException</e>
      <e>InvalidKeyException</e>
      <e>NoSuchProviderException</e>
    </exceptions>
    <params>
      <param>
        <type>PublicKey</type>
        <name>key</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openXml">
    <id>android.content.res.ApkAssets.openXml( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fileName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseActivity">
    <id>android.content.pm.PackageParser.parseActivity( Package Resources XmlResourceParser int String[] CachedComponentArgs boolean boolean )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Package</type>
        <name>owner</name>
      </param>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>String[]</type>
        <name>outError</name>
      </param>
      <param>
        <type>CachedComponentArgs</type>
        <name>cachedArgs</name>
      </param>
      <param>
        <type>boolean</type>
        <name>receiver</name>
      </param>
      <param>
        <type>boolean</type>
        <name>hardwareAccelerated</name>
      </param>
    </params>
    <arity>8</arity>
  </method>
  <method name="internalWrite">
    <id>android.util.Base64OutputStream.internalWrite( byte[] int int boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>b</name>
      </param>
      <param>
        <type>int</type>
        <name>off</name>
      </param>
      <param>
        <type>int</type>
        <name>len</name>
      </param>
      <param>
        <type>boolean</type>
        <name>finish</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="isRateLimitingActive">
    <id>android.content.pm.ShortcutManager.isRateLimitingActive( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="cancelTriggerSensor">
    <id>android.hardware.SensorManager.cancelTriggerSensor( TriggerEventListener Sensor )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>TriggerEventListener</type>
        <name>listener</name>
      </param>
      <param>
        <type>Sensor</type>
        <name>sensor</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="loadXmlResourceParser">
    <id>android.content.res.Resources.loadXmlResourceParser( String int int String )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>file</name>
      </param>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>assetCookie</name>
      </param>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getSupportedRecognitionModes">
    <id>android.service.voice.AlwaysOnHotwordDetector.getSupportedRecognitionModes( )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="parseCommandArgs">
    <id>android.content.Intent.parseCommandArgs( ShellCommand CommandOptionHandler )</id>
    <exceptions>
      <e>URISyntaxException</e>
    </exceptions>
    <params>
      <param>
        <type>ShellCommand</type>
        <name>cmd</name>
      </param>
      <param>
        <type>CommandOptionHandler</type>
        <name>optionHandler</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="takeScreenshot">
    <id>android.service.games.GameSession.takeScreenshot( Executor ScreenshotCallback )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>ScreenshotCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="startActivities">
    <id>android.content.Context.startActivities( Intent[] )</id>
    <exceptions>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent[]</type>
        <name>intents</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setConfigFlag">
    <id>android.hardware.radio.RadioTuner.setConfigFlag( int boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>flag</name>
      </param>
      <param>
        <type>boolean</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="writeAsXml">
    <id>android.content.pm.XmlSerializerAndParser.writeAsXml( T XmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>item</name>
      </param>
      <param>
        <type>XmlSerializer</type>
        <name>out</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readExceptionWithFileNotFoundExceptionFromParcel">
    <id>android.database.DatabaseUtils.readExceptionWithFileNotFoundExceptionFromParcel( Parcel )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Parcel</type>
        <name>reply</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setBeforeText">
    <id>android.view.accessibility.AccessibilityRecord.setBeforeText( CharSequence )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>beforeText</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isSessionCreated">
    <id>android.view.translation.Translator.isSessionCreated( )</id>
    <exceptions>
      <e>ServiceBinderReceiver.TimeoutException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="isApplicationHidden">
    <id>android.app.admin.DevicePolicyManager.isApplicationHidden( ComponentName String )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readObject">
    <id>android.view.inspector.PropertyReader.readObject( int Object )</id>
    <exceptions>
      <e>PropertyTypeMismatchException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getShortcutBadgedIconDrawable">
    <id>android.content.pm.LauncherApps.getShortcutBadgedIconDrawable( ShortcutInfo int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>ShortcutInfo</type>
        <name>shortcut</name>
      </param>
      <param>
        <type>int</type>
        <name>density</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="finalize">
    <id>android.widget.RemoteViewsAdapter.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setCertInstallerPackage">
    <id>android.app.admin.DevicePolicyManager.setCertInstallerPackage( ComponentName String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>installerPackage</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="logBlankMediaTitle">
    <id>android.app.StatusBarManager.logBlankMediaTitle( String int )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="insert">
    <id>android.content.ContentProviderClient.insert( Uri ContentValues Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>ContentValues</type>
        <name>initialValues</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="startDocument">
    <id>android.text.HtmlToSpannedConverter.startDocument( )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getMarshalerForKey">
    <id>android.hardware.camera2.impl.CameraMetadataNative.getMarshalerForKey( Key int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>Key</type>
        <name>key</name>
      </param>
      <param>
        <type>int</type>
        <name>nativeType</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="UserProperties">
    <id>android.content.pm.UserProperties.UserProperties( TypedXmlPullParser UserProperties )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>UserProperties</type>
        <name>defaultUserPropertiesReference</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="configureStreamsChecked">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.configureStreamsChecked( InputConfiguration List int CaptureRequest long )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>InputConfiguration</type>
        <name>inputConfig</name>
      </param>
      <param>
        <type>List</type>
        <name>outputs</name>
      </param>
      <param>
        <type>int</type>
        <name>operatingMode</name>
      </param>
      <param>
        <type>CaptureRequest</type>
        <name>sessionParams</name>
      </param>
      <param>
        <type>long</type>
        <name>createSessionStartTime</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="instantiateService">
    <id>android.app.AppComponentFactory.instantiateService( ClassLoader String Intent )</id>
    <exceptions>
      <e>ClassNotFoundException</e>
      <e>InstantiationException</e>
      <e>IllegalAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>ClassLoader</type>
        <name>cl</name>
      </param>
      <param>
        <type>String</type>
        <name>className</name>
      </param>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="requestState">
    <id>android.hardware.devicestate.DeviceStateManager.requestState( DeviceStateRequest Executor Callback )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DeviceStateRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>Callback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setRequiredPasswordComplexity">
    <id>android.app.admin.DevicePolicyManager.setRequiredPasswordComplexity( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>passwordComplexity</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setAlwaysOnVpnPackage">
    <id>android.app.admin.DevicePolicyManager.setAlwaysOnVpnPackage( ComponentName String boolean )</id>
    <exceptions>
      <e>NameNotFoundException</e>
      <e>SecurityException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>vpnPackage</name>
      </param>
      <param>
        <type>boolean</type>
        <name>lockdownEnabled</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getPasswordComplexity">
    <id>android.app.admin.DevicePolicyManager.getPasswordComplexity( )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setOption">
    <id>android.net.LocalSocketImpl.setOption( int Object )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>optID</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getString">
    <id>android.content.SharedPreferences.getString( String String )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>key</name>
      </param>
      <param>
        <type>String</type>
        <name>defValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="copyTo">
    <id>android.hardware.camera2.params.BlackLevelPattern.copyTo( int[] int )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ArrayIndexOutOfBoundsException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int[]</type>
        <name>destination</name>
      </param>
      <param>
        <type>int</type>
        <name>offset</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getApplicationInfo">
    <id>android.content.pm.LauncherApps.getApplicationInfo( String int UserHandle )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="executeSpecial">
    <id>android.database.sqlite.SQLiteSession.executeSpecial( String Object[] int CancellationSignal )</id>
    <exceptions>
      <e>OperationCanceledException</e>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>bindArgs</name>
      </param>
      <param>
        <type>int</type>
        <name>connectionFlags</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="putBool">
    <id>android.os.HwBlob.putBool( long boolean )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>boolean</type>
        <name>x</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readInt16">
    <id>android.os.HwParcel.readInt16( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="adjustValuesBelow">
    <id>android.text.PackedIntVector.adjustValuesBelow( int int int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>startRow</name>
      </param>
      <param>
        <type>int</type>
        <name>column</name>
      </param>
      <param>
        <type>int</type>
        <name>delta</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="readParcelable">
    <id>android.os.Parcel.readParcelable( ClassLoader )</id>
    <exceptions>
      <e>BadParcelableException</e>
    </exceptions>
    <params>
      <param>
        <type>ClassLoader</type>
        <name>loader</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="switchToOffline">
    <id>android.hardware.camera2.impl.ICameraDeviceUserWrapper.switchToOffline( ICameraDeviceCallbacks int[] )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>ICameraDeviceCallbacks</type>
        <name>cbs</name>
      </param>
      <param>
        <type>int[]</type>
        <name>offlineOutputIds</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="InputMethodInfo">
    <id>android.view.inputmethod.InputMethodInfo.InputMethodInfo( Context ResolveInfo )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>ResolveInfo</type>
        <name>service</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setUserProvisioningState">
    <id>android.app.admin.DevicePolicyManager.setUserProvisioningState( int UserHandle )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>state</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>userHandle</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getCrossProfileCallerIdDisabled">
    <id>android.app.admin.DevicePolicyManager.getCrossProfileCallerIdDisabled( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="create">
    <id>android.credentials.ListEnabledProvidersResponse.create( List )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>providers</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openProxyFileDescriptor">
    <id>android.os.storage.StorageManager.openProxyFileDescriptor( int ProxyFileDescriptorCallback )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>mode</name>
      </param>
      <param>
        <type>ProxyFileDescriptorCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="finalize">
    <id>android.view.ScrollCaptureConnection.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createFromXml">
    <id>android.content.pm.XmlSerializerAndParser.createFromXml( XmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readStringVectorAsArray">
    <id>android.os.HwParcel.readStringVectorAsArray( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="loadKeyframe">
    <id>android.animation.AnimatorInflater.loadKeyframe( Resources Theme AttributeSet int )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
      <param>
        <type>int</type>
        <name>valueType</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="finalize">
    <id>android.hardware.usb.UsbRequest.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="openSerialPort">
    <id>android.hardware.SerialManager.openSerialPort( String int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>speed</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setUserIcon">
    <id>android.app.admin.DevicePolicyManager.setUserIcon( ComponentName Bitmap )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>Bitmap</type>
        <name>icon</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="profileViewAndChildren">
    <id>android.view.ViewDebug.profileViewAndChildren( View RenderNode BufferedWriter boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>view</name>
      </param>
      <param>
        <type>RenderNode</type>
        <name>node</name>
      </param>
      <param>
        <type>BufferedWriter</type>
        <name>out</name>
      </param>
      <param>
        <type>boolean</type>
        <name>root</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="addProposedRotationListener">
    <id>android.view.WindowManager.addProposedRotationListener( Executor IntConsumer )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>IntConsumer</type>
        <name>listener</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseXmlProviderInnerCapabilities">
    <id>android.service.credentials.CredentialProviderInfoFactory.parseXmlProviderInnerCapabilities( XmlPullParser Resources )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>Resources</type>
        <name>resources</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setSnapshotCreatedPendingIntent">
    <id>android.security.keystore.recovery.RecoveryController.setSnapshotCreatedPendingIntent( PendingIntent )</id>
    <exceptions>
      <e>InternalRecoveryServiceException</e>
    </exceptions>
    <params>
      <param>
        <type>PendingIntent</type>
        <name>intent</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="hasFileDescriptors">
    <id>android.os.Parcel.hasFileDescriptors( Object )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeZenPolicyState">
    <id>android.service.notification.ZenModeConfig.writeZenPolicyState( String int TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>attr</name>
      </param>
      <param>
        <type>int</type>
        <name>val</name>
      </param>
      <param>
        <type>TypedXmlSerializer</type>
        <name>out</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parseXmlProviderOuterCapabilities">
    <id>android.service.credentials.CredentialProviderInfoFactory.parseXmlProviderOuterCapabilities( XmlPullParser Resources )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>Resources</type>
        <name>resources</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="startIntentSenderFromFragment">
    <id>android.app.Activity.startIntentSenderFromFragment( Fragment IntentSender int Intent int int Bundle )</id>
    <exceptions>
      <e>IntentSender.SendIntentException</e>
    </exceptions>
    <params>
      <param>
        <type>Fragment</type>
        <name>fragment</name>
      </param>
      <param>
        <type>IntentSender</type>
        <name>intent</name>
      </param>
      <param>
        <type>int</type>
        <name>requestCode</name>
      </param>
      <param>
        <type>Intent</type>
        <name>fillInIntent</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsMask</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsValues</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="getApplicationRestrictionsManagingPackage">
    <id>android.app.admin.DevicePolicyManager.getApplicationRestrictionsManagingPackage( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getLong">
    <id>android.content.SharedPreferences.getLong( String long )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>key</name>
      </param>
      <param>
        <type>long</type>
        <name>defValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="skipToEndOfLine">
    <id>android.util.JsonReader.skipToEndOfLine( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="onFailure">
    <id>android.service.quickaccesswallet.GetWalletCardsCallback.onFailure( GetWalletCardsError )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>GetWalletCardsError</type>
        <name>error</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAdoptedShellPermissions">
    <id>android.app.UiAutomationConnection.getAdoptedShellPermissions( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createSelectionModifiedEvent">
    <id>android.view.textclassifier.SelectionEvent.createSelectionModifiedEvent( int int TextClassification )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>end</name>
      </param>
      <param>
        <type>TextClassification</type>
        <name>classification</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parseClusterPackageLite">
    <id>android.content.pm.PackageParser.parseClusterPackageLite( File int )</id>
    <exceptions>
      <e>PackageParserException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>packageDir</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createFromXml">
    <id>android.content.res.ColorStateList.createFromXml( Resources XmlPullParser Theme )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>r</name>
      </param>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="grantRuntimePermissionAsUser">
    <id>android.app.UiAutomation.grantRuntimePermissionAsUser( String String UserHandle )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>String</type>
        <name>permission</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>userHandle</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="ScaleGestureDetector">
    <id>android.view.ScaleGestureDetector.ScaleGestureDetector( Context OnScaleGestureListener )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>OnScaleGestureListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getTextValue">
    <id>android.view.autofill.AutofillValue.getTextValue( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="startIntentSenderForResult">
    <id>android.app.Activity.startIntentSenderForResult( IntentSender int Intent int int int )</id>
    <exceptions>
      <e>IntentSender.SendIntentException</e>
    </exceptions>
    <params>
      <param>
        <type>IntentSender</type>
        <name>intent</name>
      </param>
      <param>
        <type>int</type>
        <name>requestCode</name>
      </param>
      <param>
        <type>Intent</type>
        <name>fillInIntent</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsMask</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsValues</name>
      </param>
      <param>
        <type>int</type>
        <name>extraFlags</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="readName">
    <id>android.util.jar.StrictJarManifestReader.readName( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setBitmap">
    <id>android.app.WallpaperManager.setBitmap( Bitmap )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Bitmap</type>
        <name>bitmap</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="shutdownInput">
    <id>android.net.LocalSocket.shutdownInput( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="enforceSealed">
    <id>android.view.accessibility.AccessibilityNodeInfo.enforceSealed( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setTimeZone">
    <id>android.app.admin.DevicePolicyManager.setTimeZone( ComponentName String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>timeZone</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setRepeatingBurstRequests">
    <id>android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl.setRepeatingBurstRequests( List Executor CaptureCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>requests</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>listener</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="configureOutputs">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.configureOutputs( List )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>outputs</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="load">
    <id>android.view.PointerIcon.load( Resources int )</id>
    <exceptions>
      <e>NotFoundException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>resources</name>
      </param>
      <param>
        <type>int</type>
        <name>resourceId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getCursorCapsMode">
    <id>android.view.inputmethod.InputConnectionWrapper.getCursorCapsMode( int )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>reqModes</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getTotalBytes">
    <id>android.app.usage.StorageStatsManager.getTotalBytes( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>uuid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getActivityLogo">
    <id>android.content.pm.PackageManager.getActivityLogo( ComponentName )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>activityName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getInputSurface">
    <id>android.hardware.camera2.impl.ICameraDeviceUserWrapper.getInputSurface( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="removeAddress">
    <id>android.net.VpnService.removeAddress( InetAddress int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>InetAddress</type>
        <name>address</name>
      </param>
      <param>
        <type>int</type>
        <name>prefixLength</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nativeCreateFromSurfaceTexture">
    <id>android.view.Surface.nativeCreateFromSurfaceTexture( SurfaceTexture )</id>
    <exceptions>
      <e>OutOfResourcesException</e>
    </exceptions>
    <params>
      <param>
        <type>SurfaceTexture</type>
        <name>surfaceTexture</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="insert">
    <id>android.content.ContentProviderClient.insert( Uri ContentValues )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>ContentValues</type>
        <name>initialValues</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setPrimaryClipAsPackage">
    <id>android.content.ClipboardManager.setPrimaryClipAsPackage( ClipData String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ClipData</type>
        <name>clip</name>
      </param>
      <param>
        <type>String</type>
        <name>sourcePackage</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onFailure">
    <id>android.service.autofill.SaveCallback.onFailure( CharSequence )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>message</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="finalize">
    <id>android.database.CursorWindow.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getValue">
    <id>android.view.translation.ViewTranslationResponse.getValue( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>key</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onPostviewOutputSurface">
    <id>android.hardware.camera2.impl.CameraExtensionJpegProcessor.onPostviewOutputSurface( Surface )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="putDouble">
    <id>android.os.HwBlob.putDouble( long double )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>double</type>
        <name>x</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getObbInfo_native">
    <id>android.content.res.ObbScanner.getObbInfo_native( String ObbInfo )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>filePath</name>
      </param>
      <param>
        <type>ObbInfo</type>
        <name>obbInfo</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getString">
    <id>android.content.res.TypedArray.getString( int )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getModuleInfo">
    <id>android.content.pm.PackageManager.getModuleInfo( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getColorStateList">
    <id>android.content.res.CompatResources.getColorStateList( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAllowedCecSettingStringValues">
    <id>android.hardware.hdmi.HdmiControlManager.getAllowedCecSettingStringValues( String )</id>
    <exceptions>
      <e>RuntimeException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="applyTransactionToFrame">
    <id>android.view.SurfaceView.applyTransactionToFrame( Transaction )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Transaction</type>
        <name>transaction</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPackageUid">
    <id>android.content.pm.PackageManager.getPackageUid( String PackageInfoFlags )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>PackageInfoFlags</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="removeDocument">
    <id>android.provider.DocumentsContract.removeDocument( ContentResolver Uri Uri )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ContentResolver</type>
        <name>content</name>
      </param>
      <param>
        <type>Uri</type>
        <name>documentUri</name>
      </param>
      <param>
        <type>Uri</type>
        <name>parentDocumentUri</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getSourceResourceId">
    <id>android.content.res.TypedArray.getSourceResourceId( int int )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>int</type>
        <name>defaultValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="commitText">
    <id>android.view.inputmethod.InputConnectionWrapper.commitText( CharSequence int TextAttribute )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>text</name>
      </param>
      <param>
        <type>int</type>
        <name>newCursorPosition</name>
      </param>
      <param>
        <type>TextAttribute</type>
        <name>textAttribute</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isOutputSupportedFor">
    <id>android.hardware.camera2.params.StreamConfigurationMap.isOutputSupportedFor( Surface )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="queryPermissionsByGroup">
    <id>android.content.pm.PackageManager.queryPermissionsByGroup( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>permissionGroup</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onRemoved">
    <id>android.hardware.fingerprint.FingerprintServiceReceiver.onRemoved( Fingerprint int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Fingerprint</type>
        <name>fp</name>
      </param>
      <param>
        <type>int</type>
        <name>remaining</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPendingSystemUpdate">
    <id>android.app.admin.DevicePolicyManager.getPendingSystemUpdate( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="characters">
    <id>android.content.DefaultDataHandler.characters( char[] int int )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>char[]</type>
        <name>ch</name>
      </param>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>length</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="finalizeOutputConfigurations">
    <id>android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl.finalizeOutputConfigurations( List )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>deferredOutputConfigs</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="findSigningInfoForBlockId">
    <id>android.util.apk.ApkSignatureSchemeV4Verifier.findSigningInfoForBlockId( SigningInfos int )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>SigningInfos</type>
        <name>signingInfos</name>
      </param>
      <param>
        <type>int</type>
        <name>v3BlockId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getChild">
    <id>android.view.accessibility.AccessibilityNodeInfo.getChild( int int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>int</type>
        <name>prefetchingStrategy</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="removeDocument">
    <id>android.provider.DocumentsProvider.removeDocument( String String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>AuthenticationRequiredException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>documentId</name>
      </param>
      <param>
        <type>String</type>
        <name>parentDocumentId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setPackageName">
    <id>android.view.accessibility.AccessibilityNodeInfo.setPackageName( CharSequence )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getHandler">
    <id>android.view.inputmethod.InputConnectionWrapper.getHandler( )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setLockTaskPackages">
    <id>android.app.admin.DevicePolicyManager.setLockTaskPackages( ComponentName String[] )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String[]</type>
        <name>packages</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parse">
    <id>android.content.res.FontResourcesParser.parse( XmlPullParser Resources )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>Resources</type>
        <name>resources</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="removeOnWindowFocusChangeListener">
    <id>android.view.ViewTreeObserver.removeOnWindowFocusChangeListener( OnWindowFocusChangeListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OnWindowFocusChangeListener</type>
        <name>victim</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onTaskRemoved">
    <id>android.app.TaskStackListener.onTaskRemoved( int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>taskId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="query">
    <id>android.content.ContentProviderClient.query( Uri String[] Bundle CancellationSignal )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String[]</type>
        <name>projection</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>queryArgs</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="readBytes">
    <id>android.util.proto.ProtoInputStream.readBytes( long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>fieldId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="tearDown">
    <id>android.hardware.camera2.impl.CameraOfflineSessionImpl.tearDown( Surface )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setReceiveBufferSize">
    <id>android.net.LocalSocket.setReceiveBufferSize( int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="commitCorrection">
    <id>android.view.inputmethod.InputConnectionWrapper.commitCorrection( CorrectionInfo )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>CorrectionInfo</type>
        <name>correctionInfo</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="inflateChildElements">
    <id>android.content.res.GradientColor.inflateChildElements( Resources XmlPullParser AttributeSet Theme )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>r</name>
      </param>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="fillCharacterBounds">
    <id>android.text.Layout.fillCharacterBounds( int int float[] int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>end</name>
      </param>
      <param>
        <type>float[]</type>
        <name>bounds</name>
      </param>
      <param>
        <type>int</type>
        <name>boundsStart</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setInputMethod">
    <id>android.view.inputmethod.InputMethodManager.setInputMethod( IBinder String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>IBinder</type>
        <name>token</name>
      </param>
      <param>
        <type>String</type>
        <name>id</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setImportantForAccessibility">
    <id>android.view.accessibility.AccessibilityRecord.setImportantForAccessibility( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>importantForAccessibility</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onEnrollResult">
    <id>android.hardware.face.FaceServiceReceiver.onEnrollResult( Face int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Face</type>
        <name>face</name>
      </param>
      <param>
        <type>int</type>
        <name>remaining</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="copyElements">
    <id>android.hardware.camera2.params.ColorSpaceTransform.copyElements( Rational[] int )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ArrayIndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>Rational[]</type>
        <name>destination</name>
      </param>
      <param>
        <type>int</type>
        <name>offset</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="GestureDetector">
    <id>android.view.GestureDetector.GestureDetector( OnGestureListener )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>OnGestureListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="unregisterAppUsageObserver">
    <id>android.app.usage.UsageStatsManager.unregisterAppUsageObserver( int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>observerId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="updatableViaApex">
    <id>android.os.ServiceManagerProxy.updatableViaApex( String )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="copyInternalUserspace">
    <id>android.os.FileUtils.copyInternalUserspace( FileDescriptor FileDescriptor ProgressListener CancellationSignal long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>in</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>out</name>
      </param>
      <param>
        <type>ProgressListener</type>
        <name>listener</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
      <param>
        <type>long</type>
        <name>count</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="throwAsPublicException">
    <id>android.hardware.camera2.CameraManager.throwAsPublicException( Throwable )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>Throwable</type>
        <name>t</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setKeyPairCertificate">
    <id>android.app.admin.DevicePolicyManager.setKeyPairCertificate( ComponentName String List boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>alias</name>
      </param>
      <param>
        <type>List</type>
        <name>certs</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isUserSelectable</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="readAttributeValues">
    <id>android.app.admin.PreferentialNetworkServiceConfig.readAttributeValues( TypedXmlPullParser String Collection )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>String</type>
        <name>tag</name>
      </param>
      <param>
        <type>Collection</type>
        <name>result</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="finalize">
    <id>android.service.autofill.augmented.FillWindow.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="stopObservingDevicePresence">
    <id>android.companion.CompanionDeviceManager.stopObservingDevicePresence( String )</id>
    <exceptions>
      <e>DeviceNotAssociatedException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>deviceAddress</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setTorchMode">
    <id>android.hardware.camera2.CameraManager.setTorchMode( String boolean )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>cameraId</name>
      </param>
      <param>
        <type>boolean</type>
        <name>enabled</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="sendButtonEvent">
    <id>android.hardware.input.VirtualMouse.sendButtonEvent( VirtualMouseButtonEvent )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>VirtualMouseButtonEvent</type>
        <name>event</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addPermission">
    <id>android.content.pm.PackageManager.addPermission( PermissionInfo )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>PermissionInfo</type>
        <name>info</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="allocateBytes">
    <id>android.os.storage.StorageManager.allocateBytes( UUID long int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>UUID</type>
        <name>storageUuid</name>
      </param>
      <param>
        <type>long</type>
        <name>bytes</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="checkStatus">
    <id>android.print.PrinterInfo.checkStatus( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>status</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startProxyOp">
    <id>android.app.AppOpsManager.startProxyOp( String int String String String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>op</name>
      </param>
      <param>
        <type>int</type>
        <name>proxiedUid</name>
      </param>
      <param>
        <type>String</type>
        <name>proxiedPackageName</name>
      </param>
      <param>
        <type>String</type>
        <name>proxiedAttributionTag</name>
      </param>
      <param>
        <type>String</type>
        <name>message</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="openFile">
    <id>android.content.IContentProvider.openFile( AttributionSource Uri String ICancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
      <param>
        <type>ICancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setRestrictionsProvider">
    <id>android.app.admin.DevicePolicyManager.setRestrictionsProvider( ComponentName ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>ComponentName</type>
        <name>provider</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isFullyLoaded">
    <id>android.os.incremental.IncrementalStorage.isFullyLoaded( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getNextCharacter">
    <id>android.net.UriCodec.getNextCharacter( String int int String )</id>
    <exceptions>
      <e>URISyntaxException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>uri</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>int</type>
        <name>end</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="read">
    <id>android.content.pm.MacAuthenticatedInputStream.read( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="retrieveNetworkLogs">
    <id>android.app.admin.DevicePolicyManager.retrieveNetworkLogs( ComponentName long )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>long</type>
        <name>batchToken</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isComplianceAcknowledgementRequired">
    <id>android.app.admin.DevicePolicyManager.isComplianceAcknowledgementRequired( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="readInt8Vector">
    <id>android.os.HwParcel.readInt8Vector( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="openTypedAssetFile">
    <id>android.content.ContentProviderProxy.openTypedAssetFile( AttributionSource Uri String Bundle ICancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeType</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>opts</name>
      </param>
      <param>
        <type>ICancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="addUnsignedInt">
    <id>android.security.keymaster.KeymasterArguments.addUnsignedInt( int long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tag</name>
      </param>
      <param>
        <type>long</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="executeForCursorWindow">
    <id>android.database.sqlite.SQLiteConnection.executeForCursorWindow( String Object[] CursorWindow int int boolean CancellationSignal )</id>
    <exceptions>
      <e>OperationCanceledException</e>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>bindArgs</name>
      </param>
      <param>
        <type>CursorWindow</type>
        <name>window</name>
      </param>
      <param>
        <type>int</type>
        <name>startPos</name>
      </param>
      <param>
        <type>int</type>
        <name>requiredPos</name>
      </param>
      <param>
        <type>boolean</type>
        <name>countAllRows</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="getFreeBytes">
    <id>android.app.usage.StorageStatsManager.getFreeBytes( UUID )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>UUID</type>
        <name>storageUuid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="findSignature">
    <id>android.util.apk.ApkSignatureSchemeV3Verifier.findSignature( RandomAccessFile )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>RandomAccessFile</type>
        <name>apk</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openCameraForUid">
    <id>android.hardware.camera2.CameraManager.openCameraForUid( String StateCallback Executor int int boolean )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>cameraId</name>
      </param>
      <param>
        <type>StateCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>int</type>
        <name>clientUid</name>
      </param>
      <param>
        <type>int</type>
        <name>oomScoreOffset</name>
      </param>
      <param>
        <type>boolean</type>
        <name>overrideToPortrait</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="getRealtimeStillCaptureLatency">
    <id>android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl.getRealtimeStillCaptureLatency( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getEndUserSessionMessage">
    <id>android.app.admin.DevicePolicyManager.getEndUserSessionMessage( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setEnabled">
    <id>android.content.om.OverlayManager.setEnabled( String boolean UserHandle )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>boolean</type>
        <name>enable</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setStorageEncryption">
    <id>android.app.admin.DevicePolicyManager.setStorageEncryption( ComponentName boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>boolean</type>
        <name>encrypt</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="buildUniqueFile">
    <id>android.os.FileUtils.buildUniqueFile( File String String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>parent</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeType</name>
      </param>
      <param>
        <type>String</type>
        <name>displayName</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getUserCecSettings">
    <id>android.hardware.hdmi.HdmiControlManager.getUserCecSettings( )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="compareTo">
    <id>android.util.Rational.compareTo( Rational )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>Rational</type>
        <name>another</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="finalize">
    <id>android.app.backup.BackupDataOutput.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="endElement">
    <id>android.text.HtmlToSpannedConverter.endElement( String String String )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>localName</name>
      </param>
      <param>
        <type>String</type>
        <name>qName</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="CreateCredentialException">
    <id>android.credentials.CreateCredentialException.CreateCredentialException( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="shellCommand">
    <id>android.os.Binder.shellCommand( FileDescriptor FileDescriptor FileDescriptor String[] ShellCallback ResultReceiver )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>in</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>out</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>err</name>
      </param>
      <param>
        <type>String[]</type>
        <name>args</name>
      </param>
      <param>
        <type>ShellCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>ResultReceiver</type>
        <name>resultReceiver</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="injectSensorData">
    <id>android.hardware.SensorManager.injectSensorData( Sensor float[] int long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Sensor</type>
        <name>sensor</name>
      </param>
      <param>
        <type>float[]</type>
        <name>values</name>
      </param>
      <param>
        <type>int</type>
        <name>accuracy</name>
      </param>
      <param>
        <type>long</type>
        <name>timestamp</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setRepeatingBurstRequests">
    <id>android.hardware.camera2.CameraCaptureSession.setRepeatingBurstRequests( List Executor CaptureCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>requests</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>listener</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getPrimitiveTypeSize">
    <id>android.hardware.camera2.marshal.MarshalHelpers.getPrimitiveTypeSize( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>nativeType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getRootInActiveWindow">
    <id>android.app.UiAutomation.getRootInActiveWindow( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getActivityBanner">
    <id>android.app.ApplicationPackageManager.getActivityBanner( ComponentName )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>activityName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPasswordMinimumSymbols">
    <id>android.app.admin.DevicePolicyManager.setPasswordMinimumSymbols( ComponentName int )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>int</type>
        <name>length</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="rebootWipeUserData">
    <id>android.os.RecoverySystem.rebootWipeUserData( Context boolean String boolean boolean )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>boolean</type>
        <name>shutdown</name>
      </param>
      <param>
        <type>String</type>
        <name>reason</name>
      </param>
      <param>
        <type>boolean</type>
        <name>force</name>
      </param>
      <param>
        <type>boolean</type>
        <name>wipeEuicc</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="onShellCommand">
    <id>android.os.Binder.onShellCommand( FileDescriptor FileDescriptor FileDescriptor String[] ShellCallback ResultReceiver )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>in</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>out</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>err</name>
      </param>
      <param>
        <type>String[]</type>
        <name>args</name>
      </param>
      <param>
        <type>ShellCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>ResultReceiver</type>
        <name>resultReceiver</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="setPasswordMinimumLowerCase">
    <id>android.app.admin.DevicePolicyManager.setPasswordMinimumLowerCase( ComponentName int )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>int</type>
        <name>length</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="ListEnabledProvidersException">
    <id>android.credentials.ListEnabledProvidersException.ListEnabledProvidersException( String String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>String</type>
        <name>message</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="update">
    <id>android.content.ContentProviderClient.update( Uri ContentValues Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>ContentValues</type>
        <name>values</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="requestPermissions">
    <id>android.app.Activity.requestPermissions( String[] int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String[]</type>
        <name>permissions</name>
      </param>
      <param>
        <type>int</type>
        <name>requestCode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="rebootWithLskfAssumeSlotSwitch">
    <id>android.os.RecoverySystem.rebootWithLskfAssumeSlotSwitch( String String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>String</type>
        <name>reason</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createDeviceContext">
    <id>android.content.Context.createDeviceContext( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>deviceId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="dumpHprofData">
    <id>android.os.Debug.dumpHprofData( String FileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fileName</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="expireRollbackForPackage">
    <id>android.content.rollback.RollbackManager.expireRollbackForPackage( String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readFully">
    <id>android.util.AtomicFile.readFully( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="close">
    <id>android.util.JsonWriter.close( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getActiveScorer">
    <id>android.net.NetworkScoreManager.getActiveScorer( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getTypeAsync">
    <id>android.content.ContentProviderProxy.getTypeAsync( AttributionSource Uri RemoteCallback )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>RemoteCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="findZipEndOfCentralDirectoryRecord">
    <id>android.util.apk.ZipUtils.findZipEndOfCentralDirectoryRecord( RandomAccessFile )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>RandomAccessFile</type>
        <name>zip</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="removeUser">
    <id>android.app.admin.DevicePolicyManager.removeUser( ComponentName UserHandle )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>userHandle</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createPackageContext">
    <id>android.content.ContextWrapper.createPackageContext( String int )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPermissionInfo">
    <id>android.app.ApplicationPackageManager.getPermissionInfo( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>permName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="newTabSpec">
    <id>android.widget.TabHost.newTabSpec( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>tag</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseServiceInfo">
    <id>android.content.pm.RegisteredServicesCache.parseServiceInfo( ResolveInfo )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ResolveInfo</type>
        <name>service</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getNanoAppId">
    <id>android.hardware.location.ContextHubIntentEvent.getNanoAppId( )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getResourcesForApplication">
    <id>android.app.ApplicationPackageManager.getResourcesForApplication( ApplicationInfo Configuration )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ApplicationInfo</type>
        <name>app</name>
      </param>
      <param>
        <type>Configuration</type>
        <name>configuration</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="finalize">
    <id>android.view.MotionEvent.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="verifyProofOfRotationStruct">
    <id>android.util.apk.ApkSigningBlockUtils.verifyProofOfRotationStruct( ByteBuffer CertificateFactory )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ByteBuffer</type>
        <name>porBuf</name>
      </param>
      <param>
        <type>CertificateFactory</type>
        <name>certFactory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setBitmap">
    <id>android.app.DisabledWallpaperManager.setBitmap( Bitmap Rect boolean int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Bitmap</type>
        <name>fullImage</name>
      </param>
      <param>
        <type>Rect</type>
        <name>visibleCropHint</name>
      </param>
      <param>
        <type>boolean</type>
        <name>allowBackup</name>
      </param>
      <param>
        <type>int</type>
        <name>which</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getString">
    <id>android.content.res.Resources.getString( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="apply">
    <id>android.service.autofill.DateTransformation.apply( ValueFinder RemoteViews int )</id>
    <exceptions>
      <e>Exception</e>
    </exceptions>
    <params>
      <param>
        <type>ValueFinder</type>
        <name>finder</name>
      </param>
      <param>
        <type>RemoteViews</type>
        <name>parentTemplate</name>
      </param>
      <param>
        <type>int</type>
        <name>childViewId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getResourcesForApplicationAsUser">
    <id>android.content.pm.PackageManager.getResourcesForApplicationAsUser( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="checkNativeType">
    <id>android.hardware.camera2.marshal.MarshalHelpers.checkNativeType( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>nativeType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="inflate">
    <id>android.content.res.GradientColor.inflate( Resources XmlPullParser AttributeSet Theme )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>r</name>
      </param>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getUserBadgeColor">
    <id>android.os.UserManager.getUserBadgeColor( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="verifySuccess">
    <id>android.os.HwParcel.verifySuccess( )</id>
    <exceptions>
      <e>RemoteException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getActivityBanner">
    <id>android.content.pm.PackageManager.getActivityBanner( Intent )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="enforceValidIndex">
    <id>android.util.MemoryIntArray.enforceValidIndex( int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="preloadApp">
    <id>android.os.ZygoteProcess.preloadApp( ApplicationInfo String )</id>
    <exceptions>
      <e>ZygoteStartFailedEx</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ApplicationInfo</type>
        <name>appInfo</name>
      </param>
      <param>
        <type>String</type>
        <name>abi</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPackageInfo">
    <id>android.app.ApplicationPackageManager.getPackageInfo( String PackageInfoFlags )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>PackageInfoFlags</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="get">
    <id>android.net.http.HttpResponseCache.get( URI String Map )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>URI</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>requestMethod</name>
      </param>
      <param>
        <type>Map</type>
        <name>requestHeaders</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="get">
    <id>android.os.HwNoService.get( String String )</id>
    <exceptions>
      <e>android.os.RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fqName</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createCaptureSession">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.createCaptureSession( List StateCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>outputs</name>
      </param>
      <param>
        <type>StateCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getEnum">
    <id>android.security.keymaster.KeyCharacteristics.getEnum( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tag</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="verifyV3Signature">
    <id>android.util.apk.ApkSignatureVerifier.verifyV3Signature( ParseInput String boolean )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ParseInput</type>
        <name>input</name>
      </param>
      <param>
        <type>String</type>
        <name>apkPath</name>
      </param>
      <param>
        <type>boolean</type>
        <name>verifyFull</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="checkInstallConstraints">
    <id>android.content.pm.PackageInstaller.checkInstallConstraints( List InstallConstraints Executor Consumer )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>packageNames</name>
      </param>
      <param>
        <type>InstallConstraints</type>
        <name>constraints</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>Consumer</type>
        <name>callback</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="addFile">
    <id>android.os.DropBoxManager.addFile( String File int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>tag</name>
      </param>
      <param>
        <type>File</type>
        <name>file</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getTag">
    <id>android.hardware.camera2.impl.CameraMetadataNative.getTag( String long )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>key</name>
      </param>
      <param>
        <type>long</type>
        <name>vendorId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parse">
    <id>android.util.Xml.parse( InputStream Encoding ContentHandler )</id>
    <exceptions>
      <e>IOException</e>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>in</name>
      </param>
      <param>
        <type>Encoding</type>
        <name>encoding</name>
      </param>
      <param>
        <type>ContentHandler</type>
        <name>contentHandler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setGlobalSetting">
    <id>android.app.admin.DevicePolicyManager.setGlobalSetting( ComponentName String String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>setting</name>
      </param>
      <param>
        <type>String</type>
        <name>value</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="initialize">
    <id>android.content.rollback.RollbackManagerFrameworkInitializer.initialize( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="onUserSwitching">
    <id>android.app.SynchronousUserSwitchObserver.onUserSwitching( int IRemoteCallback )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>newUserId</name>
      </param>
      <param>
        <type>IRemoteCallback</type>
        <name>reply</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setNightModeCustomType">
    <id>android.app.UiModeManager.setNightModeCustomType( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>nightModeCustomType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readString">
    <id>android.os.HwParcel.readString( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="LegacyPermissionManager">
    <id>android.permission.LegacyPermissionManager.LegacyPermissionManager( )</id>
    <exceptions>
      <e>ServiceManager.ServiceNotFoundException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getCertPath">
    <id>android.security.keystore.recovery.RecoveryCertPath.getCertPath( )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="parsePackageSplitNames">
    <id>android.content.pm.PackageParser.parsePackageSplitNames( XmlPullParser AttributeSet )</id>
    <exceptions>
      <e>PackageParserException</e>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readGravity">
    <id>android.view.inspector.PropertyReader.readGravity( int int )</id>
    <exceptions>
      <e>PropertyTypeMismatchException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="insert">
    <id>android.content.ContentInterface.insert( Uri ContentValues Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>ContentValues</type>
        <name>initialValues</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setSoWriteTimeout">
    <id>android.net.SSLCertificateSocketFactory.setSoWriteTimeout( Socket int )</id>
    <exceptions>
      <e>SocketException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Socket</type>
        <name>socket</name>
      </param>
      <param>
        <type>int</type>
        <name>writeTimeoutMilliseconds</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="writeba_native">
    <id>android.net.LocalSocketImpl.writeba_native( byte[] int int FileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>b</name>
      </param>
      <param>
        <type>int</type>
        <name>off</name>
      </param>
      <param>
        <type>int</type>
        <name>len</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getStorageEncryptionStatus">
    <id>android.app.admin.DevicePolicyManager.getStorageEncryptionStatus( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="checkArgumentFormatInternal">
    <id>android.hardware.camera2.params.StreamConfigurationMap.checkArgumentFormatInternal( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="connect">
    <id>android.net.LocalSocket.connect( LocalSocketAddress int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>LocalSocketAddress</type>
        <name>endpoint</name>
      </param>
      <param>
        <type>int</type>
        <name>timeout</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setAutoSizeTextTypeUniformWithConfiguration">
    <id>android.widget.TextView.setAutoSizeTextTypeUniformWithConfiguration( int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>autoSizeMinTextSize</name>
      </param>
      <param>
        <type>int</type>
        <name>autoSizeMaxTextSize</name>
      </param>
      <param>
        <type>int</type>
        <name>autoSizeStepGranularity</name>
      </param>
      <param>
        <type>int</type>
        <name>unit</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="readDouble">
    <id>android.util.proto.ProtoInputStream.readDouble( long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>fieldId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="recoverKeyChainSnapshot">
    <id>android.security.keystore.recovery.RecoverySession.recoverKeyChainSnapshot( byte[] List )</id>
    <exceptions>
      <e>InternalRecoveryServiceException</e>
      <e>SessionExpiredException</e>
      <e>DecryptionFailedException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>recoveryKeyBlob</name>
      </param>
      <param>
        <type>List</type>
        <name>applicationKeys</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="call">
    <id>android.content.ContentInterface.call( String String String Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>authority</name>
      </param>
      <param>
        <type>String</type>
        <name>method</name>
      </param>
      <param>
        <type>String</type>
        <name>arg</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="newApplication">
    <id>android.app.Instrumentation.newApplication( ClassLoader String Context )</id>
    <exceptions>
      <e>ClassNotFoundException</e>
      <e>InstantiationException</e>
      <e>IllegalAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>ClassLoader</type>
        <name>cl</name>
      </param>
      <param>
        <type>String</type>
        <name>className</name>
      </param>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isMasterVolumeMuted">
    <id>android.app.admin.DevicePolicyManager.isMasterVolumeMuted( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startElement">
    <id>android.text.HtmlToSpannedConverter.startElement( String String String Attributes )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>localName</name>
      </param>
      <param>
        <type>String</type>
        <name>qName</name>
      </param>
      <param>
        <type>Attributes</type>
        <name>attributes</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="delete">
    <id>android.net.http.HttpResponseCache.delete( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getLastBugReportRequestTime">
    <id>android.app.admin.DevicePolicyManager.getLastBugReportRequestTime( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="write">
    <id>android.util.TeeWriter.write( char[] int int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>char[]</type>
        <name>cbuf</name>
      </param>
      <param>
        <type>int</type>
        <name>off</name>
      </param>
      <param>
        <type>int</type>
        <name>len</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="openZygoteSocketIfNeeded">
    <id>android.os.ZygoteProcess.openZygoteSocketIfNeeded( String )</id>
    <exceptions>
      <e>ZygoteStartFailedEx</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>abi</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="copyDocument">
    <id>android.provider.DocumentsProvider.copyDocument( String String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>AuthenticationRequiredException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sourceDocumentId</name>
      </param>
      <param>
        <type>String</type>
        <name>targetParentDocumentId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="updateSurface">
    <id>android.view.ThreadedRenderer.updateSurface( Surface )</id>
    <exceptions>
      <e>OutOfResourcesException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setHeight">
    <id>android.widget.ListPopupWindow.setHeight( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>height</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeEntityData">
    <id>android.app.backup.BackupDataOutput.writeEntityData( byte[] int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>data</name>
      </param>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="forceRemoveActiveAdmin">
    <id>android.app.admin.DevicePolicyManager.forceRemoveActiveAdmin( ComponentName int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>adminReceiver</name>
      </param>
      <param>
        <type>int</type>
        <name>userHandle</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setNearbyNotificationStreamingPolicy">
    <id>android.app.admin.DevicePolicyManager.setNearbyNotificationStreamingPolicy( int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>policy</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="CursorWindow">
    <id>android.database.CursorWindow.CursorWindow( String long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>long</type>
        <name>windowSizeBytes</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="close">
    <id>android.util.JsonReader.close( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="isAutoRevokeWhitelisted">
    <id>android.content.pm.PackageManager.isAutoRevokeWhitelisted( String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createFromXml">
    <id>android.app.admin.ParcelableResource.createFromXml( TypedXmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>xmlPullParser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getClientAuthorizationState">
    <id>android.hardware.location.ContextHubIntentEvent.getClientAuthorizationState( )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="close">
    <id>android.database.IBulkCursor.close( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getBytesFromHexDigest">
    <id>android.content.integrity.IntegrityUtils.getBytesFromHexDigest( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>hexDigest</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nextNull">
    <id>android.util.JsonReader.nextNull( )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="DeviceStateSensorOrientationMap">
    <id>android.hardware.camera2.params.DeviceStateSensorOrientationMap.DeviceStateSensorOrientationMap( long[] )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long[]</type>
        <name>elements</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addWithChain">
    <id>android.os.HwNoService.addWithChain( String IBase ArrayList )</id>
    <exceptions>
      <e>android.os.RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>IBase</type>
        <name>service</name>
      </param>
      <param>
        <type>ArrayList</type>
        <name>chain</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="LocalServerSocket">
    <id>android.net.LocalServerSocket.LocalServerSocket( FileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="putInt8">
    <id>android.os.HwBlob.putInt8( long byte )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>byte</type>
        <name>x</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="doOneBackup">
    <id>android.app.backup.BackupHelperDispatcher.doOneBackup( ParcelFileDescriptor BackupDataOutput ParcelFileDescriptor Header BackupHelper )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>oldState</name>
      </param>
      <param>
        <type>BackupDataOutput</type>
        <name>data</name>
      </param>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>newState</name>
      </param>
      <param>
        <type>Header</type>
        <name>header</name>
      </param>
      <param>
        <type>BackupHelper</type>
        <name>helper</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="writeAttributeValuesToXml">
    <id>android.app.admin.PreferentialNetworkServiceConfig.writeAttributeValuesToXml( TypedXmlSerializer String String Collection )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>out</name>
      </param>
      <param>
        <type>String</type>
        <name>outerTag</name>
      </param>
      <param>
        <type>String</type>
        <name>innerTag</name>
      </param>
      <param>
        <type>Collection</type>
        <name>values</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="dumpAsync">
    <id>android.os.BinderProxy.dumpAsync( FileDescriptor String[] )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
      <param>
        <type>String[]</type>
        <name>args</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="attachJvmtiAgent">
    <id>android.os.Debug.attachJvmtiAgent( String String ClassLoader )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>library</name>
      </param>
      <param>
        <type>String</type>
        <name>options</name>
      </param>
      <param>
        <type>ClassLoader</type>
        <name>classLoader</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="generateApkVerity">
    <id>android.util.apk.VerityBuilder.generateApkVerity( String ByteBufferFactory SignatureInfo )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
      <e>DigestException</e>
      <e>SecurityException</e>
      <e>IOException</e>
      <e>NoSuchAlgorithmException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>apkPath</name>
      </param>
      <param>
        <type>ByteBufferFactory</type>
        <name>bufferFactory</name>
      </param>
      <param>
        <type>SignatureInfo</type>
        <name>signatureInfo</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getHighSpeedVideoFpsRangesFor">
    <id>android.hardware.camera2.params.StreamConfigurationMap.getHighSpeedVideoFpsRangesFor( Size )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Size</type>
        <name>size</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="detectionAlgorithmStatusFromString">
    <id>android.app.time.DetectorStatusTypes.detectionAlgorithmStatusFromString( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>detectorAlgorithmStatusString</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="prepare">
    <id>android.hardware.camera2.impl.CameraOfflineSessionImpl.prepare( int Surface )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>maxCount</name>
      </param>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createAmFmSelector">
    <id>android.hardware.radio.ProgramSelector.createAmFmSelector( int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>band</name>
      </param>
      <param>
        <type>int</type>
        <name>frequencyKhz</name>
      </param>
      <param>
        <type>int</type>
        <name>subChannel</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getExtras">
    <id>android.database.BulkCursorProxy.getExtras( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getTargetIds">
    <id>android.transition.TransitionInflater.getTargetIds( XmlPullParser AttributeSet Transition )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
      <param>
        <type>Transition</type>
        <name>transition</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getProfileOwnerNameAsUser">
    <id>android.app.admin.DevicePolicyManager.getProfileOwnerNameAsUser( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getColor">
    <id>android.content.res.TypedArray.getColor( int int )</id>
    <exceptions>
      <e>RuntimeException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>int</type>
        <name>defValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="writeBytes">
    <id>android.os.MemoryFile.writeBytes( byte[] int int int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>buffer</name>
      </param>
      <param>
        <type>int</type>
        <name>srcOffset</name>
      </param>
      <param>
        <type>int</type>
        <name>destOffset</name>
      </param>
      <param>
        <type>int</type>
        <name>count</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="moveDocument">
    <id>android.provider.DocumentsProvider.moveDocument( String String String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>AuthenticationRequiredException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sourceDocumentId</name>
      </param>
      <param>
        <type>String</type>
        <name>sourceParentDocumentId</name>
      </param>
      <param>
        <type>String</type>
        <name>targetParentDocumentId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="readBytes">
    <id>android.os.MemoryFile.readBytes( byte[] int int int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>buffer</name>
      </param>
      <param>
        <type>int</type>
        <name>srcOffset</name>
      </param>
      <param>
        <type>int</type>
        <name>destOffset</name>
      </param>
      <param>
        <type>int</type>
        <name>count</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="put">
    <id>android.speech.tts.SynthesisPlaybackQueueItem.put( byte[] )</id>
    <exceptions>
      <e>InterruptedException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>buffer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="SSLSessionCache">
    <id>android.net.SSLSessionCache.SSLSessionCache( File )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>dir</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getOrganizationColor">
    <id>android.app.admin.DevicePolicyManager.getOrganizationColor( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startAddAccountSession">
    <id>android.accounts.AbstractAccountAuthenticator.startAddAccountSession( AccountAuthenticatorResponse String String String[] Bundle )</id>
    <exceptions>
      <e>NetworkErrorException</e>
    </exceptions>
    <params>
      <param>
        <type>AccountAuthenticatorResponse</type>
        <name>response</name>
      </param>
      <param>
        <type>String</type>
        <name>accountType</name>
      </param>
      <param>
        <type>String</type>
        <name>authTokenType</name>
      </param>
      <param>
        <type>String[]</type>
        <name>requiredFeatures</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="openAppend">
    <id>android.util.AtomicFile.openAppend( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="WallpaperInfo">
    <id>android.app.WallpaperInfo.WallpaperInfo( Context ResolveInfo )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>ResolveInfo</type>
        <name>service</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="cancelAutoFocus">
    <id>android.hardware.Camera.cancelAutoFocus( )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="GestureDetector">
    <id>android.view.GestureDetector.GestureDetector( Context OnGestureListener Handler boolean )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>OnGestureListener</type>
        <name>listener</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
      <param>
        <type>boolean</type>
        <name>unused</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="putInt64Array">
    <id>android.os.HwBlob.putInt64Array( long long[] )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>long[]</type>
        <name>x</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="deleteSurroundingTextInCodePoints">
    <id>android.view.inputmethod.InputConnectionWrapper.deleteSurroundingTextInCodePoints( int int )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>beforeLength</name>
      </param>
      <param>
        <type>int</type>
        <name>afterLength</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="verifyIntegrityFor1MbChunkBasedAlgorithm">
    <id>android.util.apk.ApkSigningBlockUtils.verifyIntegrityFor1MbChunkBasedAlgorithm( Map FileDescriptor SignatureInfo )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>Map</type>
        <name>expectedDigests</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>apkFileDescriptor</name>
      </param>
      <param>
        <type>SignatureInfo</type>
        <name>signatureInfo</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="timerInfoOf">
    <id>android.hardware.hdmi.HdmiTimerRecordSources.timerInfoOf( int int Time Duration int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
      <param>
        <type>Time</type>
        <name>startTime</name>
      </param>
      <param>
        <type>Duration</type>
        <name>duration</name>
      </param>
      <param>
        <type>int</type>
        <name>recordingSequence</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="setStartUserSessionMessage">
    <id>android.app.admin.DevicePolicyManager.setStartUserSessionMessage( ComponentName CharSequence )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>startUserSessionMessage</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createFromXml">
    <id>android.content.res.ColorStateList.createFromXml( Resources XmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>r</name>
      </param>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getRecoveryStatus">
    <id>android.security.keystore.recovery.RecoveryController.getRecoveryStatus( String )</id>
    <exceptions>
      <e>InternalRecoveryServiceException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>alias</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="insert">
    <id>android.content.IContentProvider.insert( AttributionSource Uri ContentValues Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>ContentValues</type>
        <name>initialValues</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getPeerCredentials_native">
    <id>android.net.LocalSocketImpl.getPeerCredentials_native( FileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="apply">
    <id>android.content.ContentProviderOperation.apply( ContentProvider ContentProviderResult[] int )</id>
    <exceptions>
      <e>OperationApplicationException</e>
    </exceptions>
    <params>
      <param>
        <type>ContentProvider</type>
        <name>provider</name>
      </param>
      <param>
        <type>ContentProviderResult[]</type>
        <name>backRefs</name>
      </param>
      <param>
        <type>int</type>
        <name>numBackRefs</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="startServiceInPackage">
    <id>android.app.ActivityManagerInternal.startServiceInPackage( int Intent String boolean String String int BackgroundStartPrivileges )</id>
    <exceptions>
      <e>TransactionTooLargeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>uid</name>
      </param>
      <param>
        <type>Intent</type>
        <name>service</name>
      </param>
      <param>
        <type>String</type>
        <name>resolvedType</name>
      </param>
      <param>
        <type>boolean</type>
        <name>fgRequired</name>
      </param>
      <param>
        <type>String</type>
        <name>callingPackage</name>
      </param>
      <param>
        <type>String</type>
        <name>callingFeatureId</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
      <param>
        <type>BackgroundStartPrivileges</type>
        <name>backgroundStartPrivileges</name>
      </param>
    </params>
    <arity>8</arity>
  </method>
  <method name="addOnWindowAttachListener">
    <id>android.view.ViewTreeObserver.addOnWindowAttachListener( OnWindowAttachListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OnWindowAttachListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setBitmap">
    <id>android.app.DisabledWallpaperManager.setBitmap( Bitmap Rect boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Bitmap</type>
        <name>fullImage</name>
      </param>
      <param>
        <type>Rect</type>
        <name>visibleCropHint</name>
      </param>
      <param>
        <type>boolean</type>
        <name>allowBackup</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getLayout">
    <id>android.content.res.Resources.getLayout( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getProviderInfo">
    <id>android.content.pm.PackageManager.getProviderInfo( ComponentName int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>component</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="queryChildDocuments">
    <id>android.provider.DocumentsProvider.queryChildDocuments( String String[] Bundle )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>AuthenticationRequiredException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>parentDocumentId</name>
      </param>
      <param>
        <type>String[]</type>
        <name>projection</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>queryArgs</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getCompanionServiceLocked">
    <id>android.os.IncidentManager.getCompanionServiceLocked( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="checkUriPermission">
    <id>android.content.LoggingContentInterface.checkUriPermission( Uri int int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>int</type>
        <name>uid</name>
      </param>
      <param>
        <type>int</type>
        <name>modeFlags</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="onTaskSnapshotChanged">
    <id>android.app.TaskStackListener.onTaskSnapshotChanged( int TaskSnapshot )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>taskId</name>
      </param>
      <param>
        <type>TaskSnapshot</type>
        <name>snapshot</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPackageInfo">
    <id>android.app.ApplicationPackageManager.getPackageInfo( VersionedPackage int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>VersionedPackage</type>
        <name>versionedPackage</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="TimeManager">
    <id>android.app.time.TimeManager.TimeManager( )</id>
    <exceptions>
      <e>ServiceNotFoundException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="findLargestByArea">
    <id>android.hardware.camera2.utils.SizeAreaComparator.findLargestByArea( List )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>sizes</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="read">
    <id>android.content.pm.MacAuthenticatedInputStream.read( byte[] int int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>buffer</name>
      </param>
      <param>
        <type>int</type>
        <name>offset</name>
      </param>
      <param>
        <type>int</type>
        <name>count</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="openTypedAssetFileDescriptor">
    <id>android.content.ContentProviderClient.openTypedAssetFileDescriptor( Uri String Bundle )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeType</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>opts</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getProperty">
    <id>android.content.pm.PackageManager.getProperty( String String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="switchUser">
    <id>android.app.ActivityManager.switchUser( UserHandle )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="lockNow">
    <id>android.app.admin.DevicePolicyManager.lockNow( int )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="checkName">
    <id>android.print.PrinterInfo.checkName( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPermittedCrossProfileNotificationListeners">
    <id>android.app.admin.DevicePolicyManager.setPermittedCrossProfileNotificationListeners( ComponentName List )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>List</type>
        <name>packageList</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="loadFromApk">
    <id>android.content.res.loader.ResourcesProvider.loadFromApk( ParcelFileDescriptor AssetsProvider )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>fileDescriptor</name>
      </param>
      <param>
        <type>AssetsProvider</type>
        <name>assetsProvider</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="executeForLastInsertedRowId">
    <id>android.database.sqlite.SQLiteConnection.executeForLastInsertedRowId( String Object[] CancellationSignal )</id>
    <exceptions>
      <e>OperationCanceledException</e>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>bindArgs</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="endConfigure">
    <id>android.hardware.camera2.impl.ICameraDeviceUserWrapper.endConfigure( int CameraMetadataNative long )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>operatingMode</name>
      </param>
      <param>
        <type>CameraMetadataNative</type>
        <name>sessionParams</name>
      </param>
      <param>
        <type>long</type>
        <name>startTimeMs</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setString">
    <id>android.util.KeyValueListParser.setString( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>str</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openTypedAssetFile">
    <id>android.content.ContentProvider.openTypedAssetFile( Uri String Bundle )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeTypeFilter</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>opts</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setAutoSizeTextTypeUniformWithPresetSizes">
    <id>android.widget.TextView.setAutoSizeTextTypeUniformWithPresetSizes( int[] int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int[]</type>
        <name>presetSizes</name>
      </param>
      <param>
        <type>int</type>
        <name>unit</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getOutputStallDuration">
    <id>android.hardware.camera2.params.StreamConfigurationMap.getOutputStallDuration( Class Size )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>klass</name>
      </param>
      <param>
        <type>Size</type>
        <name>size</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createLayoutAnimationFromXml">
    <id>android.view.animation.AnimationUtils.createLayoutAnimationFromXml( Context XmlPullParser )</id>
    <exceptions>
      <e>InflateException</e>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>c</name>
      </param>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="queryStatsForUid">
    <id>android.app.usage.StorageStatsManager.queryStatsForUid( UUID int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>UUID</type>
        <name>storageUuid</name>
      </param>
      <param>
        <type>int</type>
        <name>uid</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPackageUid">
    <id>android.app.ApplicationPackageManager.getPackageUid( String PackageInfoFlags )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>PackageInfoFlags</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addBoolean">
    <id>android.security.keymaster.KeymasterArguments.addBoolean( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tag</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setMimeGroup">
    <id>android.content.pm.PackageManager.setMimeGroup( String Set )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>mimeGroup</name>
      </param>
      <param>
        <type>Set</type>
        <name>mimeTypes</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="requestQuietModeEnabled">
    <id>android.os.UserManager.requestQuietModeEnabled( boolean UserHandle )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>enableQuietMode</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>userHandle</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="writeString">
    <id>android.util.BackupUtils.writeString( DataOutputStream String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataOutputStream</type>
        <name>out</name>
      </param>
      <param>
        <type>String</type>
        <name>val</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setEditable">
    <id>android.view.accessibility.AccessibilityNodeInfo.setEditable( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>editable</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getCallingPackage">
    <id>android.content.ContentProvider.getCallingPackage( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="loadTransition">
    <id>android.transition.TransitionInflater.loadTransition( AttributeSet ViewGroup TransitionManager )</id>
    <exceptions>
      <e>Resources.NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
      <param>
        <type>ViewGroup</type>
        <name>sceneRoot</name>
      </param>
      <param>
        <type>TransitionManager</type>
        <name>transitionManager</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="stopRepeating">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.stopRepeating( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="clearPrepareForUnattendedUpdate">
    <id>android.os.RecoverySystem.clearPrepareForUnattendedUpdate( Context )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="RggbChannelVector">
    <id>android.hardware.camera2.params.RggbChannelVector.RggbChannelVector( float float float float )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>float</type>
        <name>red</name>
      </param>
      <param>
        <type>float</type>
        <name>greenEven</name>
      </param>
      <param>
        <type>float</type>
        <name>greenOdd</name>
      </param>
      <param>
        <type>float</type>
        <name>blue</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="LimitedLengthInputStream">
    <id>android.content.pm.LimitedLengthInputStream.LimitedLengthInputStream( InputStream long long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>in</name>
      </param>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>long</type>
        <name>length</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="addView">
    <id>android.widget.AdapterView.addView( View LayoutParams )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>child</name>
      </param>
      <param>
        <type>LayoutParams</type>
        <name>params</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="checkServerTrusted">
    <id>android.security.net.config.RootTrustManager.checkServerTrusted( X509Certificate[] String )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>X509Certificate[]</type>
        <name>certs</name>
      </param>
      <param>
        <type>String</type>
        <name>authType</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getAvailableRollbacks">
    <id>android.content.rollback.RollbackManager.getAvailableRollbacks( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getBoolean">
    <id>android.content.res.TypedArray.getBoolean( int boolean )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>boolean</type>
        <name>defValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getWebViewContextAndSetProvider">
    <id>android.webkit.WebViewFactory.getWebViewContextAndSetProvider( )</id>
    <exceptions>
      <e>MissingWebViewPackageException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="onAuthenticationSucceeded">
    <id>android.hardware.fingerprint.FingerprintServiceReceiver.onAuthenticationSucceeded( Fingerprint int boolean )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Fingerprint</type>
        <name>fp</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isStrongBiometric</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="openNonAsset">
    <id>android.content.res.AssetManager.openNonAsset( int String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>cookie</name>
      </param>
      <param>
        <type>String</type>
        <name>fileName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="dispatchCommand">
    <id>android.view.ViewDebug.dispatchCommand( View String String OutputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>view</name>
      </param>
      <param>
        <type>String</type>
        <name>command</name>
      </param>
      <param>
        <type>String</type>
        <name>parameters</name>
      </param>
      <param>
        <type>OutputStream</type>
        <name>clientStream</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="checkServerTrusted">
    <id>android.net.http.X509TrustManagerExtensions.checkServerTrusted( X509Certificate[] String String )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>X509Certificate[]</type>
        <name>chain</name>
      </param>
      <param>
        <type>String</type>
        <name>authType</name>
      </param>
      <param>
        <type>String</type>
        <name>host</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getValue">
    <id>android.text.PackedIntVector.getValue( int int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>row</name>
      </param>
      <param>
        <type>int</type>
        <name>column</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getWritableDatabase">
    <id>android.database.sqlite.SQLiteOpenHelper.getWritableDatabase( )</id>
    <exceptions>
      <e>SQLiteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getExtension">
    <id>android.os.BinderProxy.getExtension( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getPreloadedNanoAppIds">
    <id>android.hardware.location.ContextHubManager.getPreloadedNanoAppIds( ContextHubInfo )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>ContextHubInfo</type>
        <name>hubInfo</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="copyToBoolArray">
    <id>android.os.HwBlob.copyToBoolArray( long boolean[] int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>array</name>
      </param>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getInputStream">
    <id>android.net.LocalSocketImpl.getInputStream( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="stopRepeating">
    <id>android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl.stopRepeating( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createPackageContextAsUser">
    <id>android.app.ContextImpl.createPackageContextAsUser( String int UserHandle )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getApplicationInfoAsUser">
    <id>android.content.pm.PackageManager.getApplicationInfoAsUser( String ApplicationInfoFlags UserHandle )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>ApplicationInfoFlags</type>
        <name>flags</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="switchToOffline">
    <id>android.hardware.camera2.impl.CameraOfflineSessionImpl.switchToOffline( Collection Executor CameraOfflineSessionCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>Collection</type>
        <name>offlineOutputs</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>CameraOfflineSessionCallback</type>
        <name>listener</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getPoint">
    <id>android.hardware.camera2.params.TonemapCurve.getPoint( int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>colorChannel</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="provisionFullyManagedDevice">
    <id>android.app.admin.DevicePolicyManager.provisionFullyManagedDevice( FullyManagedDeviceProvisioningParams )</id>
    <exceptions>
      <e>ProvisioningException</e>
    </exceptions>
    <params>
      <param>
        <type>FullyManagedDeviceProvisioningParams</type>
        <name>provisioningParams</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="enqueueAction">
    <id>android.app.FragmentManagerImpl.enqueueAction( OpGenerator boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OpGenerator</type>
        <name>action</name>
      </param>
      <param>
        <type>boolean</type>
        <name>allowStateLoss</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createSocket">
    <id>android.net.SSLCertificateSocketFactory.createSocket( String int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>host</name>
      </param>
      <param>
        <type>int</type>
        <name>port</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseMode">
    <id>android.os.ParcelFileDescriptor.parseMode( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="processMimeType">
    <id>android.content.IntentFilter.processMimeType( String BiConsumer )</id>
    <exceptions>
      <e>MalformedMimeTypeException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>BiConsumer</type>
        <name>action</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addRow">
    <id>android.database.MatrixCursor.addRow( Iterable )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Iterable</type>
        <name>columnValues</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readEvents">
    <id>android.util.EventLog.readEvents( int[] Collection )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int[]</type>
        <name>tags</name>
      </param>
      <param>
        <type>Collection</type>
        <name>output</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="revokeRuntimePermissionAsUser">
    <id>android.app.UiAutomation.revokeRuntimePermissionAsUser( String String UserHandle )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>String</type>
        <name>permission</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>userHandle</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setClassName">
    <id>android.view.accessibility.AccessibilityNodeInfo.setClassName( CharSequence )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>className</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="returnNullOrThrowUserOperationException">
    <id>android.os.UserManager.returnNullOrThrowUserOperationException( ServiceSpecificException boolean )</id>
    <exceptions>
      <e>UserOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ServiceSpecificException</type>
        <name>exception</name>
      </param>
      <param>
        <type>boolean</type>
        <name>throwInsteadOfNull</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="requestChecksums">
    <id>android.content.pm.PackageManager.requestChecksums( String boolean int List OnChecksumsReadyListener )</id>
    <exceptions>
      <e>NameNotFoundException</e>
      <e>CertificateEncodingException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>boolean</type>
        <name>includeSplits</name>
      </param>
      <param>
        <type>int</type>
        <name>required</name>
      </param>
      <param>
        <type>List</type>
        <name>trustedInstallers</name>
      </param>
      <param>
        <type>OnChecksumsReadyListener</type>
        <name>onChecksumsReadyListener</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="certificateFromPemString">
    <id>android.net.Ikev2VpnProfile.certificateFromPemString( String )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>certStr</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="canonicalize">
    <id>android.content.IContentProvider.canonicalize( AttributionSource Uri )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPackageGids">
    <id>android.app.ApplicationPackageManager.getPackageGids( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseBaseApk">
    <id>android.content.pm.PackageParser.parseBaseApk( File AssetManager int )</id>
    <exceptions>
      <e>PackageParserException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>apkFile</name>
      </param>
      <param>
        <type>AssetManager</type>
        <name>assets</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setRemovedCount">
    <id>android.view.accessibility.AccessibilityRecord.setRemovedCount( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>removedCount</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getApplicationBanner">
    <id>android.app.ApplicationPackageManager.getApplicationBanner( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="closeWithError">
    <id>android.os.ParcelFileDescriptor.closeWithError( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>msg</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="unregisterNetworkScoreCache">
    <id>android.net.NetworkScoreManager.unregisterNetworkScoreCache( int INetworkScoreCache )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>networkType</name>
      </param>
      <param>
        <type>INetworkScoreCache</type>
        <name>scoreCache</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getServiceInfo">
    <id>android.app.UiAutomation.getServiceInfo( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="onMove">
    <id>android.database.IBulkCursor.onMove( int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="finalize">
    <id>android.hardware.camera2.impl.CameraInjectionSessionImpl.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="endCapture">
    <id>android.view.ScrollCaptureConnection.endCapture( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="loadContextUri">
    <id>android.app.WallpaperInfo.loadContextUri( PackageManager )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>PackageManager</type>
        <name>pm</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="requestBaseStateOverride">
    <id>android.hardware.devicestate.DeviceStateManager.requestBaseStateOverride( DeviceStateRequest Executor Callback )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DeviceStateRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>Callback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="stopRepeating">
    <id>android.hardware.camera2.impl.CameraExtensionSessionImpl.stopRepeating( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="loadApkAssets">
    <id>android.app.ResourcesManager.loadApkAssets( ApkKey )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ApkKey</type>
        <name>key</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openAssetFile">
    <id>android.content.ContentProviderProxy.openAssetFile( AttributionSource Uri String ICancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
      <param>
        <type>ICancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="doStat">
    <id>android.os.StatFs.doStat( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAliases">
    <id>android.security.keystore.recovery.RecoveryController.getAliases( )</id>
    <exceptions>
      <e>InternalRecoveryServiceException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="startWrite">
    <id>android.util.AtomicFile.startWrite( long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>startTime</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="registerPassthroughClient">
    <id>android.os.HwNoService.registerPassthroughClient( String String )</id>
    <exceptions>
      <e>android.os.RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fqName</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="openAssetFile">
    <id>android.provider.DocumentsProvider.openAssetFile( Uri String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nextName">
    <id>android.util.JsonReader.nextName( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="addRow">
    <id>android.database.MatrixCursor.addRow( Object[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object[]</type>
        <name>columnValues</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="remove">
    <id>android.widget.ArrayAdapter.remove( T )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>object</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="saveToXml">
    <id>android.hardware.display.BrightnessCorrection.saveToXml( TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>serializer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createReliableSocketPair">
    <id>android.os.ParcelFileDescriptor.createReliableSocketPair( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setProcessGroup">
    <id>android.os.Process.setProcessGroup( int int )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>pid</name>
      </param>
      <param>
        <type>int</type>
        <name>group</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addPath">
    <id>android.app.ApplicationLoaders.addPath( ClassLoader String )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>ClassLoader</type>
        <name>classLoader</name>
      </param>
      <param>
        <type>String</type>
        <name>dexPath</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="VerifierInfo">
    <id>android.content.pm.VerifierInfo.VerifierInfo( String PublicKey )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>PublicKey</type>
        <name>publicKey</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="PageRange">
    <id>android.print.PageRange.PageRange( int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getIntentOld">
    <id>android.content.Intent.getIntentOld( String int )</id>
    <exceptions>
      <e>URISyntaxException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>uri</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="InputContentInfo">
    <id>android.view.inputmethod.InputContentInfo.InputContentInfo( Uri ClipDescription Uri )</id>
    <exceptions>
      <e>InvalidParameterException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>contentUri</name>
      </param>
      <param>
        <type>ClipDescription</type>
        <name>description</name>
      </param>
      <param>
        <type>Uri</type>
        <name>linkUri</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getStringArray">
    <id>android.content.res.Resources.getStringArray( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="endObject">
    <id>android.util.JsonReader.endObject( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setThreadPriority">
    <id>android.os.Process.setThreadPriority( int int )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tid</name>
      </param>
      <param>
        <type>int</type>
        <name>priority</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readInt64Vector">
    <id>android.os.HwParcel.readInt64Vector( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="mapColor">
    <id>android.view.inspector.PropertyMapper.mapColor( String int )</id>
    <exceptions>
      <e>PropertyConflictException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>attributeId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="disableWebView">
    <id>android.webkit.WebView.disableWebView( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getRunningServiceControlPanel">
    <id>android.app.ActivityManager.getRunningServiceControlPanel( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>service</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nativeGetTypeFromTagLocal">
    <id>android.hardware.camera2.impl.CameraMetadataNative.nativeGetTypeFromTagLocal( long int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>ptr</name>
      </param>
      <param>
        <type>int</type>
        <name>tag</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="decode">
    <id>android.util.Base64.decode( byte[] int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>input</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="initialize">
    <id>android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl.initialize( )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="available">
    <id>android.net.LocalSocketImpl.available( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="stopRepeating">
    <id>android.hardware.camera2.impl.CameraCaptureSessionImpl.stopRepeating( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="disableShortcuts">
    <id>android.content.pm.ShortcutManager.disableShortcuts( List )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>shortcutIds</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="write">
    <id>android.util.jar.StrictJarManifest.write( OutputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>OutputStream</type>
        <name>os</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onEndSession">
    <id>android.service.storage.ExternalStorageService.onEndSession( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sessionId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="verify">
    <id>android.util.apk.ApkSignatureSchemeV2Verifier.verify( String boolean )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>apkFile</name>
      </param>
      <param>
        <type>boolean</type>
        <name>verifyIntegrity</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="copyTo">
    <id>android.hardware.camera2.params.RggbChannelVector.copyTo( float[] int )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ArrayIndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>float[]</type>
        <name>destination</name>
      </param>
      <param>
        <type>int</type>
        <name>offset</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="linkCodePath">
    <id>android.os.incremental.IncrementalManager.linkCodePath( File File )</id>
    <exceptions>
      <e>IOException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>beforeCodeFile</name>
      </param>
      <param>
        <type>File</type>
        <name>afterCodeFile</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getApplicationInfoAsUser">
    <id>android.app.ApplicationPackageManager.getApplicationInfoAsUser( String int int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="supportsSplitScreenMultiWindow">
    <id>android.app.ActivityTaskManager.supportsSplitScreenMultiWindow( Context )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="processPackage">
    <id>android.os.RecoverySystem.processPackage( Context File ProgressListener Handler )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>File</type>
        <name>packageFile</name>
      </param>
      <param>
        <type>ProgressListener</type>
        <name>listener</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="stopRepeating">
    <id>android.hardware.camera2.CameraExtensionSession.stopRepeating( )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="clearWindowContentFrameStats">
    <id>android.app.UiAutomationConnection.clearWindowContentFrameStats( int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>windowId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="capture">
    <id>android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl.capture( CaptureRequest CaptureCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>listener</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="create">
    <id>android.os.PerformanceHintManager.create( )</id>
    <exceptions>
      <e>ServiceManager.ServiceNotFoundException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getGainFactor">
    <id>android.hardware.camera2.params.LensShadingMap.getGainFactor( int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>colorChannel</name>
      </param>
      <param>
        <type>int</type>
        <name>column</name>
      </param>
      <param>
        <type>int</type>
        <name>row</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="size">
    <id>android.util.MemoryIntArray.size( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getInt16">
    <id>android.os.HwBlob.getInt16( long )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getColorStateList">
    <id>android.content.Context.getColorStateList( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="checkPrimitiveClass">
    <id>android.hardware.camera2.marshal.MarshalHelpers.checkPrimitiveClass( Class )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>klass</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="OutputConfiguration">
    <id>android.hardware.camera2.params.OutputConfiguration.OutputConfiguration( Size Class )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Size</type>
        <name>surfaceSize</name>
      </param>
      <param>
        <type>Class</type>
        <name>klass</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getCameraCharacteristics">
    <id>android.hardware.camera2.CameraManager.getCameraCharacteristics( String )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>cameraId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createProfile">
    <id>android.os.UserManager.createProfile( String String Set )</id>
    <exceptions>
      <e>UserOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>String</type>
        <name>userType</name>
      </param>
      <param>
        <type>Set</type>
        <name>disallowedPackages</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getSplitPaths">
    <id>android.app.LoadedApk.getSplitPaths( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>splitName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="add">
    <id>android.app.usage.UsageStats.add( UsageStats )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>UsageStats</type>
        <name>right</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getItem">
    <id>android.view.Menu.getItem( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readLengthPrefixedByteArray">
    <id>android.util.apk.ApkSigningBlockUtils.readLengthPrefixedByteArray( ByteBuffer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ByteBuffer</type>
        <name>buf</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onRestore">
    <id>android.app.backup.BackupAgent.onRestore( BackupDataInput int ParcelFileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>BackupDataInput</type>
        <name>data</name>
      </param>
      <param>
        <type>int</type>
        <name>appVersionCode</name>
      </param>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>newState</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="GetCredentialException">
    <id>android.credentials.GetCredentialException.GetCredentialException( String Throwable )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>Throwable</type>
        <name>cause</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseKeySets">
    <id>android.content.pm.PackageParser.parseKeySets( Package Resources XmlResourceParser String[] )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Package</type>
        <name>owner</name>
      </param>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>String[]</type>
        <name>outError</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="generateVerityTreeInternal">
    <id>android.util.apk.VerityBuilder.generateVerityTreeInternal( RandomAccessFile ByteBufferFactory SignatureInfo )</id>
    <exceptions>
      <e>DigestException</e>
      <e>SecurityException</e>
      <e>IOException</e>
      <e>NoSuchAlgorithmException</e>
    </exceptions>
    <params>
      <param>
        <type>RandomAccessFile</type>
        <name>apk</name>
      </param>
      <param>
        <type>ByteBufferFactory</type>
        <name>bufferFactory</name>
      </param>
      <param>
        <type>SignatureInfo</type>
        <name>signatureInfo</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="performEditorAction">
    <id>android.view.inputmethod.InputConnectionWrapper.performEditorAction( int )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>editorAction</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addOnUidImportanceListener">
    <id>android.app.ActivityManager.addOnUidImportanceListener( OnUidImportanceListener int )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>OnUidImportanceListener</type>
        <name>listener</name>
      </param>
      <param>
        <type>int</type>
        <name>importanceCutpoint</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setScreenCaptureDisabled">
    <id>android.app.admin.DevicePolicyManager.setScreenCaptureDisabled( ComponentName boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>boolean</type>
        <name>disabled</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="dump">
    <id>android.os.BinderProxy.dump( FileDescriptor String[] )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
      <param>
        <type>String[]</type>
        <name>args</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="send">
    <id>android.app.PendingIntent.send( int )</id>
    <exceptions>
      <e>CanceledException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>code</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getShortcutIconDrawable">
    <id>android.content.pm.LauncherApps.getShortcutIconDrawable( ShortcutInfo int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>ShortcutInfo</type>
        <name>shortcut</name>
      </param>
      <param>
        <type>int</type>
        <name>density</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getTypeAnonymousAsync">
    <id>android.content.IContentProvider.getTypeAnonymousAsync( Uri RemoteCallback )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>RemoteCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="startActivity">
    <id>android.content.Context.startActivity( Intent Bundle )</id>
    <exceptions>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="write">
    <id>android.hardware.usb.DeviceFilter.write( XmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlSerializer</type>
        <name>serializer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="destroyUserStorageKeys">
    <id>android.os.storage.StorageManager.destroyUserStorageKeys( int )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getVoice">
    <id>android.speech.tts.TextToSpeech.getVoice( ITextToSpeechService String )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>ITextToSpeechService</type>
        <name>service</name>
      </param>
      <param>
        <type>String</type>
        <name>voiceName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="writeXml">
    <id>android.service.notification.ZenModeConfig.writeXml( TypedXmlSerializer Integer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>out</name>
      </param>
      <param>
        <type>Integer</type>
        <name>version</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="queryStatsForPackage">
    <id>android.app.usage.StorageStatsManager.queryStatsForPackage( String String UserHandle )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>uuid</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parseUsesPermission">
    <id>android.content.pm.PackageParser.parseUsesPermission( Package Resources XmlResourceParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Package</type>
        <name>pkg</name>
      </param>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="startIntentSenderForResult">
    <id>android.app.Activity.startIntentSenderForResult( IntentSender String int Intent int int Bundle )</id>
    <exceptions>
      <e>IntentSender.SendIntentException</e>
    </exceptions>
    <params>
      <param>
        <type>IntentSender</type>
        <name>intent</name>
      </param>
      <param>
        <type>String</type>
        <name>who</name>
      </param>
      <param>
        <type>int</type>
        <name>requestCode</name>
      </param>
      <param>
        <type>Intent</type>
        <name>fillInIntent</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsMask</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsValues</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="add">
    <id>android.app.usage.EventStats.add( EventStats )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>EventStats</type>
        <name>right</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setManagedProfileMaximumTimeOff">
    <id>android.app.admin.DevicePolicyManager.setManagedProfileMaximumTimeOff( ComponentName long )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>long</type>
        <name>timeoutMillis</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getColor">
    <id>android.content.res.CompatResources.getColor( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setConfiguredNetworksLockdownState">
    <id>android.app.admin.DevicePolicyManager.setConfiguredNetworksLockdownState( ComponentName boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>boolean</type>
        <name>lockdown</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPostviewSupportedSizes">
    <id>android.hardware.camera2.CameraExtensionCharacteristics.getPostviewSupportedSizes( int Size int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>extension</name>
      </param>
      <param>
        <type>Size</type>
        <name>captureSize</name>
      </param>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getCalendarView">
    <id>android.widget.DatePicker.getCalendarView( )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setMtePolicy">
    <id>android.app.admin.DevicePolicyManager.setMtePolicy( int )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>policy</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPersonalAppsSuspended">
    <id>android.app.admin.DevicePolicyManager.setPersonalAppsSuspended( ComponentName boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>boolean</type>
        <name>suspended</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="finalize">
    <id>android.app.backup.BackupDataInput.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="checkActive">
    <id>android.os.MemoryFile.checkActive( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="BeginGetCredentialOption">
    <id>android.service.credentials.BeginGetCredentialOption.BeginGetCredentialOption( String String Bundle )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>id</name>
      </param>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>candidateQueryData</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getInstallerPackageName">
    <id>android.content.pm.PackageManager.getInstallerPackageName( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="flush">
    <id>android.hardware.camera2.impl.ICameraDeviceUserWrapper.flush( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="bindView">
    <id>android.widget.SimpleCursorAdapter.bindView( View Context Cursor )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>view</name>
      </param>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>Cursor</type>
        <name>cursor</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="lockHardwareCanvas">
    <id>android.view.SurfaceHolder.lockHardwareCanvas( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="StrictJarFile">
    <id>android.util.jar.StrictJarFile.StrictJarFile( String boolean boolean )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fileName</name>
      </param>
      <param>
        <type>boolean</type>
        <name>verify</name>
      </param>
      <param>
        <type>boolean</type>
        <name>signatureSchemeRollbackProtectionsEnforced</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getProviderInfo">
    <id>android.app.ApplicationPackageManager.getProviderInfo( ComponentName ComponentInfoFlags )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>className</name>
      </param>
      <param>
        <type>ComponentInfoFlags</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="openCamera">
    <id>android.hardware.camera2.CameraManager.openCamera( String boolean Handler StateCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>cameraId</name>
      </param>
      <param>
        <type>boolean</type>
        <name>overrideToPortrait</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
      <param>
        <type>StateCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="nativeOpenAssetFd">
    <id>android.content.res.AssetManager.nativeOpenAssetFd( long String long[] )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>ptr</name>
      </param>
      <param>
        <type>String</type>
        <name>fileName</name>
      </param>
      <param>
        <type>long[]</type>
        <name>outOffsets</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isPreferentialNetworkServiceEnabled">
    <id>android.app.admin.DevicePolicyManager.isPreferentialNetworkServiceEnabled( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="verify">
    <id>android.util.apk.ApkSignatureSchemeV4Verifier.verify( String HashingInfo SigningInfos int )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>apkFile</name>
      </param>
      <param>
        <type>HashingInfo</type>
        <name>hashingInfo</name>
      </param>
      <param>
        <type>SigningInfos</type>
        <name>signingInfos</name>
      </param>
      <param>
        <type>int</type>
        <name>v3BlockId</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="removeLongLivedShortcuts">
    <id>android.content.pm.ShortcutManager.removeLongLivedShortcuts( List )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>shortcutIds</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="finishPipelineInitialization">
    <id>android.hardware.camera2.impl.CameraExtensionSessionImpl.finishPipelineInitialization( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getDrawable">
    <id>android.content.res.Resources.getDrawable( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="capture">
    <id>android.hardware.camera2.impl.CameraCaptureSessionImpl.capture( CaptureRequest CaptureCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="mapByte">
    <id>android.view.inspector.PropertyMapper.mapByte( String int )</id>
    <exceptions>
      <e>PropertyConflictException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>attributeId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getElement">
    <id>android.hardware.camera2.params.ColorSpaceTransform.getElement( int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>column</name>
      </param>
      <param>
        <type>int</type>
        <name>row</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readInt64VectorAsArray">
    <id>android.os.HwParcel.readInt64VectorAsArray( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getSourceStampCertificateDigest">
    <id>android.util.apk.SourceStampVerifier.getSourceStampCertificateDigest( StrictJarFile )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>StrictJarFile</type>
        <name>apkJar</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAllowedCecSettingIntValues">
    <id>android.hardware.hdmi.HdmiControlManager.getAllowedCecSettingIntValues( String )</id>
    <exceptions>
      <e>RuntimeException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openFile">
    <id>android.content.ContentProviderClient.openFile( Uri String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getEocd">
    <id>android.util.apk.ApkSigningBlockUtils.getEocd( RandomAccessFile )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>RandomAccessFile</type>
        <name>apk</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readStrongBinder">
    <id>android.os.HwParcel.readStrongBinder( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="attemptConnectionToPrimaryZygote">
    <id>android.os.ZygoteProcess.attemptConnectionToPrimaryZygote( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="parseSizeF">
    <id>android.util.SizeF.parseSizeF( String )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>NumberFormatException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>string</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="ApkAssets">
    <id>android.content.res.ApkAssets.ApkAssets( int String int AssetsProvider )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>AssetsProvider</type>
        <name>assets</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="mapBoolean">
    <id>android.view.inspector.PropertyMapper.mapBoolean( String int )</id>
    <exceptions>
      <e>PropertyConflictException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>attributeId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="write">
    <id>android.util.Base64OutputStream.write( int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>b</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="finalize">
    <id>android.view.Surface.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="toSigningKeys">
    <id>android.content.pm.SigningDetails.toSigningKeys( Signature[] )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>Signature[]</type>
        <name>signatures</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isUsingUnifiedPassword">
    <id>android.app.admin.DevicePolicyManager.isUsingUnifiedPassword( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseCommandLineArg">
    <id>android.app.timezonedetector.TelephonyTimeZoneSuggestion.parseCommandLineArg( ShellCommand )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ShellCommand</type>
        <name>cmd</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getQuantityString">
    <id>android.content.res.Resources.getQuantityString( int int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>quantity</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getTextBeforeCursor">
    <id>android.view.inputmethod.InputConnection.getTextBeforeCursor( int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>n</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="captureBurst">
    <id>android.hardware.camera2.impl.CameraOfflineSessionImpl.captureBurst( List CaptureCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>requests</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="applyVcnNetworkPolicy">
    <id>android.net.vcn.VcnManager.applyVcnNetworkPolicy( NetworkCapabilities LinkProperties )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>NetworkCapabilities</type>
        <name>networkCapabilities</name>
      </param>
      <param>
        <type>LinkProperties</type>
        <name>linkProperties</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="findSignature">
    <id>android.util.apk.ApkSignatureSchemeV2Verifier.findSignature( RandomAccessFile )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>RandomAccessFile</type>
        <name>apk</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createContentUriForUser">
    <id>android.content.ContentProvider.createContentUriForUser( Uri UserHandle )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>contentUri</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>userHandle</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setPasswordMinimumLength">
    <id>android.app.admin.DevicePolicyManager.setPasswordMinimumLength( ComponentName int )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>int</type>
        <name>length</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="maybeRethrow">
    <id>android.os.ParcelableException.maybeRethrow( Class )</id>
    <exceptions>
      <e>T</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>clazz</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="print">
    <id>android.print.PrintManager.print( String PrintDocumentAdapter PrintAttributes )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>printJobName</name>
      </param>
      <param>
        <type>PrintDocumentAdapter</type>
        <name>documentAdapter</name>
      </param>
      <param>
        <type>PrintAttributes</type>
        <name>attributes</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="sendIntent">
    <id>android.content.IntentSender.sendIntent( Context int Intent OnFinished Handler String )</id>
    <exceptions>
      <e>SendIntentException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>int</type>
        <name>code</name>
      </param>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
      <param>
        <type>OnFinished</type>
        <name>onFinished</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
      <param>
        <type>String</type>
        <name>requiredPermission</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="checkClientTrusted">
    <id>android.security.net.config.NetworkSecurityTrustManager.checkClientTrusted( X509Certificate[] String )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>X509Certificate[]</type>
        <name>chain</name>
      </param>
      <param>
        <type>String</type>
        <name>authType</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="generateFsVerityDigestAtLeafLevel">
    <id>android.util.apk.VerityBuilder.generateFsVerityDigestAtLeafLevel( RandomAccessFile byte[] ByteBuffer )</id>
    <exceptions>
      <e>DigestException</e>
      <e>IOException</e>
      <e>NoSuchAlgorithmException</e>
    </exceptions>
    <params>
      <param>
        <type>RandomAccessFile</type>
        <name>file</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>salt</name>
      </param>
      <param>
        <type>ByteBuffer</type>
        <name>output</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="read">
    <id>android.app.backup.BackupDataInputStream.read( byte[] int int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>b</name>
      </param>
      <param>
        <type>int</type>
        <name>offset</name>
      </param>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="LocaleList">
    <id>android.os.LocaleList.LocaleList( Locale[] )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>Locale</type>
        <name>list</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createCaptureSession">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.createCaptureSession( SessionConfiguration )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>SessionConfiguration</type>
        <name>config</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nativeGetTagFromKey">
    <id>android.hardware.camera2.impl.CameraMetadataNative.nativeGetTagFromKey( String long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>keyName</name>
      </param>
      <param>
        <type>long</type>
        <name>vendorId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="requestChecksums">
    <id>android.app.ApplicationPackageManager.requestChecksums( String boolean int List OnChecksumsReadyListener )</id>
    <exceptions>
      <e>NameNotFoundException</e>
      <e>CertificateEncodingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>boolean</type>
        <name>includeSplits</name>
      </param>
      <param>
        <type>int</type>
        <name>required</name>
      </param>
      <param>
        <type>List</type>
        <name>trustedInstallers</name>
      </param>
      <param>
        <type>OnChecksumsReadyListener</type>
        <name>onChecksumsReadyListener</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="writePoliciesToXml">
    <id>android.app.admin.DeviceAdminInfo.writePoliciesToXml( TypedXmlSerializer )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IOException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>out</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="StorageManager">
    <id>android.os.storage.StorageManager.StorageManager( Context Looper )</id>
    <exceptions>
      <e>ServiceNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>Looper</type>
        <name>looper</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="startIntentSenderForResult">
    <id>android.app.Activity.startIntentSenderForResult( IntentSender int Intent int int int Bundle )</id>
    <exceptions>
      <e>IntentSender.SendIntentException</e>
    </exceptions>
    <params>
      <param>
        <type>IntentSender</type>
        <name>intent</name>
      </param>
      <param>
        <type>int</type>
        <name>requestCode</name>
      </param>
      <param>
        <type>Intent</type>
        <name>fillInIntent</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsMask</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsValues</name>
      </param>
      <param>
        <type>int</type>
        <name>extraFlags</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="imageFormatToInternal">
    <id>android.hardware.camera2.params.StreamConfigurationMap.imageFormatToInternal( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="dumpHprofData">
    <id>android.os.Debug.dumpHprofData( String )</id>
    <exceptions>
      <e>IOException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fileName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeIntLE">
    <id>android.os.incremental.V4Signature.writeIntLE( OutputStream int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>OutputStream</type>
        <name>stream</name>
      </param>
      <param>
        <type>int</type>
        <name>v</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="requireValidDetectionAlgorithmStatus">
    <id>android.app.time.DetectorStatusTypes.requireValidDetectionAlgorithmStatus( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>detectionAlgorithmStatus</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="findFocus">
    <id>android.view.accessibility.DirectAccessibilityConnection.findFocus( int long int int IAccessibilityInteractionConnectionCallback long )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>accessibilityWindowId</name>
      </param>
      <param>
        <type>long</type>
        <name>accessibilityNodeId</name>
      </param>
      <param>
        <type>int</type>
        <name>focusType</name>
      </param>
      <param>
        <type>int</type>
        <name>interactionId</name>
      </param>
      <param>
        <type>IAccessibilityInteractionConnectionCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>long</type>
        <name>threadId</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="disableNanoApp">
    <id>android.hardware.location.ContextHubManager.disableNanoApp( ContextHubInfo long )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>ContextHubInfo</type>
        <name>hubInfo</name>
      </param>
      <param>
        <type>long</type>
        <name>nanoAppId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getLockTaskFeatures">
    <id>android.app.admin.DevicePolicyManager.getLockTaskFeatures( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readFully">
    <id>android.os.incremental.V4Signature.readFully( InputStream byte[] )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>stream</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>buffer</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getSerialNumber">
    <id>android.hardware.usb.UsbDevice.getSerialNumber( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="isOverrideApnEnabled">
    <id>android.app.admin.DevicePolicyManager.isOverrideApnEnabled( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="delete">
    <id>android.content.ContentInterface.delete( Uri Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getEnrollmentSpecificId">
    <id>android.app.admin.DevicePolicyManager.getEnrollmentSpecificId( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="fromDatagramSocket">
    <id>android.os.ParcelFileDescriptor.fromDatagramSocket( DatagramSocket )</id>
    <exceptions>
      <e>UncheckedIOException</e>
    </exceptions>
    <params>
      <param>
        <type>DatagramSocket</type>
        <name>datagramSocket</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="fromVpnProfile">
    <id>android.net.Ikev2VpnProfile.fromVpnProfile( VpnProfile )</id>
    <exceptions>
      <e>GeneralSecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>VpnProfile</type>
        <name>profile</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parse">
    <id>android.net.Uri.parse( String )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>uriString</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createRequest">
    <id>android.hardware.camera2.impl.CameraExtensionSessionImpl.createRequest( CameraDevice List Surface int CaptureRequest )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CameraDevice</type>
        <name>cameraDevice</name>
      </param>
      <param>
        <type>List</type>
        <name>captureStageList</name>
      </param>
      <param>
        <type>Surface</type>
        <name>target</name>
      </param>
      <param>
        <type>int</type>
        <name>captureTemplate</name>
      </param>
      <param>
        <type>CaptureRequest</type>
        <name>clientRequest</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="performPrivateCommand">
    <id>android.view.inputmethod.InputConnectionWrapper.performPrivateCommand( String Bundle )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>action</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>data</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="capture">
    <id>android.hardware.camera2.CameraCaptureSession.capture( CaptureRequest CaptureCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>listener</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="checkError">
    <id>android.os.ParcelFileDescriptor.checkError( )</id>
    <exceptions>
      <e>FileDescriptorDetachedException</e>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="open">
    <id>android.database.sqlite.SQLiteConnectionPool.open( SQLiteDatabaseConfiguration )</id>
    <exceptions>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>SQLiteDatabaseConfiguration</type>
        <name>configuration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="finalizeOutputConfigurations">
    <id>android.hardware.camera2.impl.ICameraDeviceUserWrapper.finalizeOutputConfigurations( int OutputConfiguration )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>streamId</name>
      </param>
      <param>
        <type>OutputConfiguration</type>
        <name>deferredConfig</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getActivityInfo">
    <id>android.app.ApplicationPackageManager.getActivityInfo( ComponentName ComponentInfoFlags )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>className</name>
      </param>
      <param>
        <type>ComponentInfoFlags</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseConfigEntry">
    <id>android.security.net.config.XmlConfigSource.parseConfigEntry( XmlResourceParser Set Builder int )</id>
    <exceptions>
      <e>ParserException</e>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>Set</type>
        <name>seenDomains</name>
      </param>
      <param>
        <type>Builder</type>
        <name>parentBuilder</name>
      </param>
      <param>
        <type>int</type>
        <name>configType</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getDimension">
    <id>android.content.res.Resources.getDimension( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openAssetFile">
    <id>android.content.ContentProviderClient.openAssetFile( Uri String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="commit">
    <id>android.content.om.OverlayManager.commit( OverlayManagerTransaction )</id>
    <exceptions>
      <e>Exception</e>
    </exceptions>
    <params>
      <param>
        <type>OverlayManagerTransaction</type>
        <name>transaction</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createFromXmlInner">
    <id>android.content.res.ColorStateList.createFromXmlInner( Resources XmlPullParser AttributeSet Theme )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>r</name>
      </param>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="readArrayList">
    <id>android.os.Parcel.readArrayList( ClassLoader Class )</id>
    <exceptions>
      <e>BadParcelableException</e>
    </exceptions>
    <params>
      <param>
        <type>ClassLoader</type>
        <name>loader</name>
      </param>
      <param>
        <type>Class</type>
        <name>clazz</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addAddress">
    <id>android.net.VpnService.addAddress( InetAddress int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>InetAddress</type>
        <name>address</name>
      </param>
      <param>
        <type>int</type>
        <name>prefixLength</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="queryRoots">
    <id>android.provider.DocumentsProvider.queryRoots( String[] )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String[]</type>
        <name>projection</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseNtpUriStrict">
    <id>android.util.NtpTrustedTime.parseNtpUriStrict( String )</id>
    <exceptions>
      <e>URISyntaxException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>ntpServerUriString</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="newAutofillId">
    <id>android.view.contentcapture.ContentCaptureSession.newAutofillId( AutofillId long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>AutofillId</type>
        <name>hostId</name>
      </param>
      <param>
        <type>long</type>
        <name>virtualChildId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getCharacterBidiLevel">
    <id>android.view.inputmethod.TextBoundsInfo.getCharacterBidiLevel( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseFloatSetting">
    <id>android.provider.Settings.parseFloatSetting( String String )</id>
    <exceptions>
      <e>SettingNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>settingValue</name>
      </param>
      <param>
        <type>String</type>
        <name>settingName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setProfileOwner">
    <id>android.app.admin.DevicePolicyManager.setProfileOwner( ComponentName int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>int</type>
        <name>userHandle</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getManageSpaceActivityIntent">
    <id>android.os.storage.StorageManager.getManageSpaceActivityIntent( String int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>requestCode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="validateIncomingUri">
    <id>android.content.ContentProvider.validateIncomingUri( Uri )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="dumpv2">
    <id>android.view.ViewDebug.dumpv2( View ByteArrayOutputStream )</id>
    <exceptions>
      <e>InterruptedException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>view</name>
      </param>
      <param>
        <type>ByteArrayOutputStream</type>
        <name>out</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="skippedEntity">
    <id>android.text.HtmlToSpannedConverter.skippedEntity( String )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPermittedInputMethods">
    <id>android.app.admin.DevicePolicyManager.setPermittedInputMethods( ComponentName List )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>List</type>
        <name>packageNames</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="copy">
    <id>android.os.FileUtils.copy( InputStream OutputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>in</name>
      </param>
      <param>
        <type>OutputStream</type>
        <name>out</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getMimeGroup">
    <id>android.content.pm.PackageManager.getMimeGroup( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>mimeGroup</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getParent">
    <id>android.view.accessibility.AccessibilityNodeInfo.getParent( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getStreamTypes">
    <id>android.content.ContentProviderClient.getStreamTypes( Uri String )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeTypeFilter</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="transferOwnership">
    <id>android.app.admin.DevicePolicyManager.transferOwnership( ComponentName ComponentName PersistableBundle )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>ComponentName</type>
        <name>target</name>
      </param>
      <param>
        <type>PersistableBundle</type>
        <name>bundle</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setBooleanProperty">
    <id>android.view.accessibility.AccessibilityWindowInfo.setBooleanProperty( int boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>property</name>
      </param>
      <param>
        <type>boolean</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="callUnchecked">
    <id>android.provider.DocumentsProvider.callUnchecked( String String Bundle )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>method</name>
      </param>
      <param>
        <type>String</type>
        <name>arg</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="consumeByChunk">
    <id>android.util.apk.VerityBuilder.consumeByChunk( DataDigester DataSource int )</id>
    <exceptions>
      <e>DigestException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataDigester</type>
        <name>digester</name>
      </param>
      <param>
        <type>DataSource</type>
        <name>source</name>
      </param>
      <param>
        <type>int</type>
        <name>chunkSize</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="openCameraDeviceUserAsync">
    <id>android.hardware.camera2.CameraManager.openCameraDeviceUserAsync( String StateCallback Executor int int boolean )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>cameraId</name>
      </param>
      <param>
        <type>StateCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>int</type>
        <name>uid</name>
      </param>
      <param>
        <type>int</type>
        <name>oomScoreOffset</name>
      </param>
      <param>
        <type>boolean</type>
        <name>overrideToPortrait</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="attachToDisplayArea">
    <id>android.window.WindowContextController.attachToDisplayArea( int int Bundle )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>type</name>
      </param>
      <param>
        <type>int</type>
        <name>displayId</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="uninstallAllUserCaCerts">
    <id>android.app.admin.DevicePolicyManager.uninstallAllUserCaCerts( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setBluetoothContactSharingDisabled">
    <id>android.app.admin.DevicePolicyManager.setBluetoothContactSharingDisabled( ComponentName boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>boolean</type>
        <name>disabled</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="update">
    <id>android.content.ContentResolver.update( Uri ContentValues String String[] )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>ContentValues</type>
        <name>values</name>
      </param>
      <param>
        <type>String</type>
        <name>where</name>
      </param>
      <param>
        <type>String[]</type>
        <name>selectionArgs</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getUnsignedInt">
    <id>android.security.keymaster.KeyCharacteristics.getUnsignedInt( int long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tag</name>
      </param>
      <param>
        <type>long</type>
        <name>defaultValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getCacheBytes">
    <id>android.app.usage.StorageStatsManager.getCacheBytes( UUID )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>UUID</type>
        <name>storageUuid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="updateEditorToolType">
    <id>android.inputmethodservice.IInputMethodWrapper.updateEditorToolType( int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>toolType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="copyDocument">
    <id>android.provider.DocumentsContract.copyDocument( ContentResolver Uri Uri )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ContentResolver</type>
        <name>content</name>
      </param>
      <param>
        <type>Uri</type>
        <name>sourceDocumentUri</name>
      </param>
      <param>
        <type>Uri</type>
        <name>targetParentDocumentUri</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getPinnedShortcuts">
    <id>android.content.pm.ShortcutManager.getPinnedShortcuts( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getResourceEntryName">
    <id>android.content.res.ResourcesImpl.getResourceEntryName( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>resid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="renameDocument">
    <id>android.provider.DocumentsContract.renameDocument( ContentResolver Uri String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ContentResolver</type>
        <name>content</name>
      </param>
      <param>
        <type>Uri</type>
        <name>documentUri</name>
      </param>
      <param>
        <type>String</type>
        <name>displayName</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setCrossProfileContactsSearchDisabled">
    <id>android.app.admin.DevicePolicyManager.setCrossProfileContactsSearchDisabled( ComponentName boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>boolean</type>
        <name>disabled</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="close">
    <id>android.service.quickaccesswallet.QuickAccessWalletClientImpl.close( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getMeteredDataDisabledPackages">
    <id>android.app.admin.DevicePolicyManager.getMeteredDataDisabledPackages( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isOutputSupportedFor">
    <id>android.hardware.camera2.params.StreamConfigurationMap.isOutputSupportedFor( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getServiceComponentName">
    <id>android.view.contentcapture.ContentCaptureManager.getServiceComponentName( )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="abortCaptures">
    <id>android.hardware.camera2.impl.CameraCaptureSessionImpl.abortCaptures( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="startIntentSender">
    <id>android.content.Context.startIntentSender( IntentSender Intent int int int )</id>
    <exceptions>
      <e>IntentSender.SendIntentException</e>
    </exceptions>
    <params>
      <param>
        <type>IntentSender</type>
        <name>intent</name>
      </param>
      <param>
        <type>Intent</type>
        <name>fillInIntent</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsMask</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsValues</name>
      </param>
      <param>
        <type>int</type>
        <name>extraFlags</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="findSignature">
    <id>android.util.apk.ApkSigningBlockUtils.findSignature( RandomAccessFile int )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>RandomAccessFile</type>
        <name>apk</name>
      </param>
      <param>
        <type>int</type>
        <name>blockId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="mapFloat">
    <id>android.view.inspector.PropertyMapper.mapFloat( String int )</id>
    <exceptions>
      <e>PropertyConflictException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>attributeId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="validateAndSetAutoSizeTextTypeUniformConfiguration">
    <id>android.widget.TextView.validateAndSetAutoSizeTextTypeUniformConfiguration( float float float )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>float</type>
        <name>autoSizeMinTextSizeInPx</name>
      </param>
      <param>
        <type>float</type>
        <name>autoSizeMaxTextSizeInPx</name>
      </param>
      <param>
        <type>float</type>
        <name>autoSizeStepGranularityInPx</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="attachSystemDataTransport">
    <id>android.companion.CompanionDeviceManager.attachSystemDataTransport( int InputStream OutputStream )</id>
    <exceptions>
      <e>DeviceNotAssociatedException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>associationId</name>
      </param>
      <param>
        <type>InputStream</type>
        <name>in</name>
      </param>
      <param>
        <type>OutputStream</type>
        <name>out</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setRepeatingRequest">
    <id>android.hardware.camera2.impl.CameraExtensionSessionImpl.setRepeatingRequest( CaptureStageImpl CaptureCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureStageImpl</type>
        <name>captureStage</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>requestHandler</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="enableSystemApp">
    <id>android.app.admin.DevicePolicyManager.enableSystemApp( ComponentName String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="restorecon">
    <id>android.os.SELinux.restorecon( File )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>file</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="removeOnComputeInternalInsetsListener">
    <id>android.view.ViewTreeObserver.removeOnComputeInternalInsetsListener( OnComputeInternalInsetsListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OnComputeInternalInsetsListener</type>
        <name>victim</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="retrieveSecurityLogs">
    <id>android.app.admin.DevicePolicyManager.retrieveSecurityLogs( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="CallingAppInfo">
    <id>android.service.credentials.CallingAppInfo.CallingAppInfo( String SigningInfo )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>SigningInfo</type>
        <name>signingInfo</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="delete">
    <id>android.content.ContentResolver.delete( Uri Bundle )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="clearWallpaper">
    <id>android.app.ContextImpl.clearWallpaper( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="writeToXml">
    <id>android.content.pm.IntentFilterVerificationInfo.writeToXml( TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>serializer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nativeGetTagFromKeyLocal">
    <id>android.hardware.camera2.impl.CameraMetadataNative.nativeGetTagFromKeyLocal( long String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>ptr</name>
      </param>
      <param>
        <type>String</type>
        <name>keyName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="closeConnection">
    <id>android.view.inputmethod.InputConnectionWrapper.closeConnection( )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="bytesToFile">
    <id>android.os.FileUtils.bytesToFile( String byte[] )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>filename</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>content</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="requestPermission">
    <id>android.content.RestrictionsManager.requestPermission( String String PersistableBundle )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>requestType</name>
      </param>
      <param>
        <type>String</type>
        <name>requestId</name>
      </param>
      <param>
        <type>PersistableBundle</type>
        <name>request</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getLayoutDimension">
    <id>android.content.res.TypedArray.getLayoutDimension( int String )</id>
    <exceptions>
      <e>RuntimeException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readFloatVector">
    <id>android.os.HwParcel.readFloatVector( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getOverlayableInfo">
    <id>android.content.res.ApkAssets.getOverlayableInfo( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>overlayableName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="findAccessibilityNodeInfosByText">
    <id>android.view.accessibility.DirectAccessibilityConnection.findAccessibilityNodeInfosByText( int long String int IAccessibilityInteractionConnectionCallback long )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>accessibilityWindowId</name>
      </param>
      <param>
        <type>long</type>
        <name>accessibilityNodeId</name>
      </param>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
      <param>
        <type>int</type>
        <name>interactionId</name>
      </param>
      <param>
        <type>IAccessibilityInteractionConnectionCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>long</type>
        <name>threadId</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="extendVerificationTimeout">
    <id>android.content.pm.PackageManager.extendVerificationTimeout( int int long )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>verificationCodeAtTimeout</name>
      </param>
      <param>
        <type>long</type>
        <name>millisecondsToDelay</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="generateFsVerityTreeInternal">
    <id>android.util.apk.VerityBuilder.generateFsVerityTreeInternal( RandomAccessFile byte[] int[] ByteBuffer )</id>
    <exceptions>
      <e>DigestException</e>
      <e>IOException</e>
      <e>NoSuchAlgorithmException</e>
    </exceptions>
    <params>
      <param>
        <type>RandomAccessFile</type>
        <name>apk</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>salt</name>
      </param>
      <param>
        <type>int[]</type>
        <name>levelOffset</name>
      </param>
      <param>
        <type>ByteBuffer</type>
        <name>output</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="startActivityAndCollapse">
    <id>android.service.quicksettings.TileService.startActivityAndCollapse( Intent )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setBoundsInParent">
    <id>android.view.accessibility.AccessibilityNodeInfo.setBoundsInParent( Rect )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Rect</type>
        <name>bounds</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getApplicationInfo">
    <id>android.content.pm.PackageManager.getApplicationInfo( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onFailure">
    <id>android.service.quickaccesswallet.GetWalletCardsCallbackImpl.onFailure( GetWalletCardsError )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>GetWalletCardsError</type>
        <name>error</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="unregisterAppUsageLimitObserver">
    <id>android.app.usage.UsageStatsManager.unregisterAppUsageLimitObserver( int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>observerId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parse">
    <id>android.net.MailTo.parse( String )</id>
    <exceptions>
      <e>ParseException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>url</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDrawableForDensity">
    <id>android.content.res.CompatResources.getDrawableForDensity( int int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>density</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="execSQL">
    <id>android.database.sqlite.SQLiteDatabase.execSQL( String Object[] )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>bindArgs</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getInt32">
    <id>android.os.HwBlob.getInt32( long )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setCrossProfileCallerIdDisabled">
    <id>android.app.admin.DevicePolicyManager.setCrossProfileCallerIdDisabled( ComponentName boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>boolean</type>
        <name>disabled</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setFileDescriptorsForSend">
    <id>android.net.LocalSocketImpl.setFileDescriptorsForSend( FileDescriptor[] )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor[]</type>
        <name>fds</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getChild">
    <id>android.view.accessibility.AccessibilityNodeInfo.getChild( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="enforcePermissionAllOf">
    <id>android.os.PermissionEnforcer.enforcePermissionAllOf( String[] int int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String[]</type>
        <name>permissions</name>
      </param>
      <param>
        <type>int</type>
        <name>pid</name>
      </param>
      <param>
        <type>int</type>
        <name>uid</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="nCreate">
    <id>android.os.SharedMemory.nCreate( String int )</id>
    <exceptions>
      <e>ErrnoException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="appendRecord">
    <id>android.view.accessibility.AccessibilityEvent.appendRecord( AccessibilityRecord )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>AccessibilityRecord</type>
        <name>record</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="GestureDetector">
    <id>android.view.GestureDetector.GestureDetector( OnGestureListener Handler )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>OnGestureListener</type>
        <name>listener</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="connect">
    <id>android.net.LocalSocket.connect( LocalSocketAddress )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>LocalSocketAddress</type>
        <name>endpoint</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="putInt32Array">
    <id>android.os.HwBlob.putInt32Array( long int[] )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>int[]</type>
        <name>x</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPermissionGroupInfo">
    <id>android.app.ApplicationPackageManager.getPermissionGroupInfo( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>groupName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getCursorPosition">
    <id>android.hardware.input.VirtualMouse.getCursorPosition( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setBitmap">
    <id>android.app.WallpaperManager.setBitmap( Bitmap Rect boolean )</id>
    <exceptions>
      <e>IOException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Bitmap</type>
        <name>fullImage</name>
      </param>
      <param>
        <type>Rect</type>
        <name>visibleCropHint</name>
      </param>
      <param>
        <type>boolean</type>
        <name>allowBackup</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isExternalStorageLegacy">
    <id>android.os.Environment.isExternalStorageLegacy( File )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>path</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="generateKeyPair">
    <id>android.app.admin.DevicePolicyManager.generateKeyPair( ComponentName String KeyGenParameterSpec int )</id>
    <exceptions>
      <e>StrongBoxUnavailableException</e>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>algorithm</name>
      </param>
      <param>
        <type>KeyGenParameterSpec</type>
        <name>keySpec</name>
      </param>
      <param>
        <type>int</type>
        <name>idAttestationFlags</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="removeOnGlobalLayoutListener">
    <id>android.view.ViewTreeObserver.removeOnGlobalLayoutListener( OnGlobalLayoutListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OnGlobalLayoutListener</type>
        <name>victim</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="abortCaptures">
    <id>android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl.abortCaptures( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="startTranslation">
    <id>android.view.translation.UiTranslationManager.startTranslation( TranslationSpec TranslationSpec List ActivityId UiTranslationSpec )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>TranslationSpec</type>
        <name>sourceSpec</name>
      </param>
      <param>
        <type>TranslationSpec</type>
        <name>targetSpec</name>
      </param>
      <param>
        <type>List</type>
        <name>viewIds</name>
      </param>
      <param>
        <type>ActivityId</type>
        <name>activityId</name>
      </param>
      <param>
        <type>UiTranslationSpec</type>
        <name>uiTranslationSpec</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="SliceManager">
    <id>android.app.slice.SliceManager.SliceManager( Context Handler )</id>
    <exceptions>
      <e>ServiceNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="beginAccess">
    <id>android.os.MemoryFile.beginAccess( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="writeToXml">
    <id>android.app.admin.SystemUpdateInfo.writeToXml( TypedXmlSerializer String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>out</name>
      </param>
      <param>
        <type>String</type>
        <name>tag</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPackageUidAsUser">
    <id>android.app.ApplicationPackageManager.getPackageUidAsUser( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="saveToXml">
    <id>android.app.admin.PackagePermissionPolicyKey.saveToXml( TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>serializer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openNonAsset">
    <id>android.content.res.AssetManager.openNonAsset( int String int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>cookie</name>
      </param>
      <param>
        <type>String</type>
        <name>fileName</name>
      </param>
      <param>
        <type>int</type>
        <name>accessMode</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setLongClickable">
    <id>android.view.accessibility.AccessibilityNodeInfo.setLongClickable( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>longClickable</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getIncludeExcludeRules">
    <id>android.app.backup.BackupAgent.getIncludeExcludeRules( BackupScheme )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>BackupScheme</type>
        <name>backupScheme</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="registerObserver">
    <id>android.database.Observable.registerObserver( T )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>observer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createCaptureRequest">
    <id>android.hardware.camera2.CameraDevice.createCaptureRequest( int )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>templateType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="EventLogTags">
    <id>android.util.EventLogTags.EventLogTags( BufferedReader )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>BufferedReader</type>
        <name>input</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readLegacyUid">
    <id>android.net.netstats.NetworkStatsDataMigrationUtils.readLegacyUid( Builder File boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Builder</type>
        <name>builder</name>
      </param>
      <param>
        <type>File</type>
        <name>uidFile</name>
      </param>
      <param>
        <type>boolean</type>
        <name>onlyTaggedData</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="writeToXml">
    <id>android.os.UidBatteryConsumer.writeToXml( TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>serializer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="loadAnimator">
    <id>android.animation.AnimatorInflater.loadAnimator( Resources Theme int float )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>resources</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>float</type>
        <name>pathErrorScale</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getCrossProfileContactsSearchDisabled">
    <id>android.app.admin.DevicePolicyManager.getCrossProfileContactsSearchDisabled( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="query">
    <id>android.content.ContentProviderClient.query( Uri String[] String String[] String )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>String[]</type>
        <name>projection</name>
      </param>
      <param>
        <type>String</type>
        <name>selection</name>
      </param>
      <param>
        <type>String[]</type>
        <name>selectionArgs</name>
      </param>
      <param>
        <type>String</type>
        <name>sortOrder</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="readba_native">
    <id>android.net.LocalSocketImpl.readba_native( byte[] int int FileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>b</name>
      </param>
      <param>
        <type>int</type>
        <name>off</name>
      </param>
      <param>
        <type>int</type>
        <name>len</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="readEventsSince">
    <id>android.app.admin.SecurityLog.readEventsSince( long Collection )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>timestamp</name>
      </param>
      <param>
        <type>Collection</type>
        <name>output</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isConfigFlagSet">
    <id>android.hardware.radio.RadioTuner.isConfigFlagSet( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>flag</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="removeViewAt">
    <id>android.widget.AdapterView.removeViewAt( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setRemoteSession">
    <id>android.hardware.camera2.impl.CameraOfflineSessionImpl.setRemoteSession( ICameraOfflineSession )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>ICameraOfflineSession</type>
        <name>remoteSession</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="close">
    <id>android.util.TeeWriter.close( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createVirtualDisplay">
    <id>android.hardware.display.DisplayManager.createVirtualDisplay( String int int int Surface int Callback Handler )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>width</name>
      </param>
      <param>
        <type>int</type>
        <name>height</name>
      </param>
      <param>
        <type>int</type>
        <name>densityDpi</name>
      </param>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>Callback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>8</arity>
  </method>
  <method name="createProfileForUser">
    <id>android.os.UserManager.createProfileForUser( String int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="updateState">
    <id>android.service.voice.AlwaysOnHotwordDetector.updateState( PersistableBundle SharedMemory )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistableBundle</type>
        <name>options</name>
      </param>
      <param>
        <type>SharedMemory</type>
        <name>sharedMemory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDimensionPixelSize">
    <id>android.content.res.Resources.getDimensionPixelSize( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="call">
    <id>android.content.ContentResolver.call( Uri String String Bundle )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>method</name>
      </param>
      <param>
        <type>String</type>
        <name>arg</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getLastSecurityLogRetrievalTime">
    <id>android.app.admin.DevicePolicyManager.getLastSecurityLogRetrievalTime( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="lockNow">
    <id>android.app.admin.DevicePolicyManager.lockNow( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="advanceToRootNode">
    <id>android.view.LayoutInflater.advanceToRootNode( XmlPullParser )</id>
    <exceptions>
      <e>InflateException</e>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getTimerCount">
    <id>android.os.health.HealthStats.getTimerCount( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>key</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onTransact">
    <id>android.database.BulkCursorNative.onTransact( int Parcel Parcel int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>code</name>
      </param>
      <param>
        <type>Parcel</type>
        <name>data</name>
      </param>
      <param>
        <type>Parcel</type>
        <name>reply</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setDomainVerificationStatus">
    <id>android.content.pm.verify.domain.DomainVerificationManager.setDomainVerificationStatus( UUID Set int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>UUID</type>
        <name>domainSetId</name>
      </param>
      <param>
        <type>Set</type>
        <name>domains</name>
      </param>
      <param>
        <type>int</type>
        <name>state</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isPackageSuspended">
    <id>android.app.admin.DevicePolicyManager.isPackageSuspended( ComponentName String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="captureBurst">
    <id>android.hardware.camera2.impl.CameraCaptureSessionImpl.captureBurst( List CaptureCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>requests</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="findDocumentPath">
    <id>android.provider.DocumentsContract.findDocumentPath( ContentResolver Uri )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ContentResolver</type>
        <name>content</name>
      </param>
      <param>
        <type>Uri</type>
        <name>treeUri</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="write">
    <id>android.util.jar.StrictJarManifest.write( StrictJarManifest OutputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>StrictJarManifest</type>
        <name>manifest</name>
      </param>
      <param>
        <type>OutputStream</type>
        <name>out</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="requestPinAppWidget">
    <id>android.appwidget.AppWidgetManager.requestPinAppWidget( ComponentName Bundle PendingIntent )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>provider</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
      <param>
        <type>PendingIntent</type>
        <name>successCallback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="create">
    <id>android.net.LocalSocketImpl.create( int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>sockType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readInterfaceArray">
    <id>android.os.Parcel.readInterfaceArray( T[] Function )</id>
    <exceptions>
      <e>BadParcelableException</e>
    </exceptions>
    <params>
      <param>
        <type>T[]</type>
        <name>val</name>
      </param>
      <param>
        <type>Function</type>
        <name>asInterface</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="execute">
    <id>android.database.sqlite.SQLiteSession.execute( String Object[] int CancellationSignal )</id>
    <exceptions>
      <e>OperationCanceledException</e>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>bindArgs</name>
      </param>
      <param>
        <type>int</type>
        <name>connectionFlags</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="endDocument">
    <id>android.text.HtmlToSpannedConverter.endDocument( )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getNextWordEndOnTwoWordBoundary">
    <id>android.text.method.WordIterator.getNextWordEndOnTwoWordBoundary( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>offset</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="add">
    <id>android.util.LongArray.add( int long )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>long</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="linkFiles">
    <id>android.os.incremental.IncrementalManager.linkFiles( IncrementalStorage File String IncrementalStorage String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>IncrementalStorage</type>
        <name>sourceStorage</name>
      </param>
      <param>
        <type>File</type>
        <name>sourceAbsolutePath</name>
      </param>
      <param>
        <type>String</type>
        <name>sourceRelativePath</name>
      </param>
      <param>
        <type>IncrementalStorage</type>
        <name>targetStorage</name>
      </param>
      <param>
        <type>String</type>
        <name>targetRelativePath</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="close">
    <id>android.util.jar.StrictJarFile.close( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getStreamTypes">
    <id>android.content.IContentProvider.getStreamTypes( AttributionSource Uri String )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeTypeFilter</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getResourceName">
    <id>android.content.res.Resources.getResourceName( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>resid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setAutoRevokeWhitelisted">
    <id>android.content.pm.PackageManager.setAutoRevokeWhitelisted( String boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>boolean</type>
        <name>whitelisted</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setAddedCount">
    <id>android.view.accessibility.AccessibilityRecord.setAddedCount( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>addedCount</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setSystemAudioCaptioningUiEnabled">
    <id>android.view.accessibility.CaptioningManager.setSystemAudioCaptioningUiEnabled( boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>isEnabled</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setHdrConversionMode">
    <id>android.hardware.display.DisplayManager.setHdrConversionMode( HdrConversionMode )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>HdrConversionMode</type>
        <name>hdrConversionMode</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onTaskDescriptionChanged">
    <id>android.app.TaskStackListener.onTaskDescriptionChanged( RunningTaskInfo )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>RunningTaskInfo</type>
        <name>taskInfo</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setLongSupportMessage">
    <id>android.app.admin.DevicePolicyManager.setLongSupportMessage( ComponentName CharSequence )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>message</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="initializePipeline">
    <id>android.hardware.camera2.impl.CameraExtensionForwardProcessor.initializePipeline( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="digest">
    <id>android.os.FileUtils.digest( File String )</id>
    <exceptions>
      <e>IOException</e>
      <e>NoSuchAlgorithmException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>file</name>
      </param>
      <param>
        <type>String</type>
        <name>algorithm</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getNonConfigurationString">
    <id>android.content.res.TypedArray.getNonConfigurationString( int int )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>int</type>
        <name>allowedChangingConfigs</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getThreadPriority">
    <id>android.os.Process.getThreadPriority( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="Signature">
    <id>android.content.pm.Signature.Signature( Certificate[] )</id>
    <exceptions>
      <e>CertificateEncodingException</e>
    </exceptions>
    <params>
      <param>
        <type>Certificate[]</type>
        <name>certificateChain</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onFullBackup">
    <id>android.app.backup.BackupAgent.onFullBackup( FullBackupDataOutput )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FullBackupDataOutput</type>
        <name>data</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="clearCrossProfileIntentFilters">
    <id>android.app.admin.DevicePolicyManager.clearCrossProfileIntentFilters( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="enforcePermissionAnyOf">
    <id>android.os.PermissionEnforcer.enforcePermissionAnyOf( String[] AttributionSource )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String[]</type>
        <name>permissions</name>
      </param>
      <param>
        <type>AttributionSource</type>
        <name>source</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="captureSingleRequest">
    <id>android.hardware.camera2.impl.CameraOfflineSessionImpl.captureSingleRequest( CaptureRequest Executor CaptureCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="apply">
    <id>android.service.autofill.CharSequenceTransformation.apply( ValueFinder RemoteViews int )</id>
    <exceptions>
      <e>Exception</e>
    </exceptions>
    <params>
      <param>
        <type>ValueFinder</type>
        <name>finder</name>
      </param>
      <param>
        <type>RemoteViews</type>
        <name>parentTemplate</name>
      </param>
      <param>
        <type>int</type>
        <name>childViewId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="commitRollback">
    <id>android.content.rollback.RollbackManager.commitRollback( int List IntentSender )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>rollbackId</name>
      </param>
      <param>
        <type>List</type>
        <name>causePackages</name>
      </param>
      <param>
        <type>IntentSender</type>
        <name>statusReceiver</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="hasValue">
    <id>android.content.res.TypedArray.hasValue( int )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nextDouble">
    <id>android.util.JsonReader.nextDouble( )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="hasSignature">
    <id>android.util.apk.ApkSignatureSchemeV2Verifier.hasSignature( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>apkFile</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="beginTransaction">
    <id>android.database.sqlite.SQLiteSession.beginTransaction( int SQLiteTransactionListener int CancellationSignal )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>OperationCanceledException</e>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>transactionMode</name>
      </param>
      <param>
        <type>SQLiteTransactionListener</type>
        <name>transactionListener</name>
      </param>
      <param>
        <type>int</type>
        <name>connectionFlags</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getTransferOwnershipBundle">
    <id>android.app.admin.DevicePolicyManager.getTransferOwnershipBundle( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setResource">
    <id>android.app.WallpaperManager.setResource( int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>resid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="executeForLong">
    <id>android.database.sqlite.SQLiteConnection.executeForLong( String Object[] CancellationSignal )</id>
    <exceptions>
      <e>OperationCanceledException</e>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>bindArgs</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="rethrowAsRuntimeException">
    <id>android.os.RemoteException.rethrowAsRuntimeException( )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="StrictJarFile">
    <id>android.util.jar.StrictJarFile.StrictJarFile( String FileDescriptor boolean boolean )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
      <param>
        <type>boolean</type>
        <name>verify</name>
      </param>
      <param>
        <type>boolean</type>
        <name>signatureSchemeRollbackProtectionsEnforced</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="fromDuration">
    <id>android.net.sntp.Duration64.fromDuration( Duration )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Duration</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isSessionConfigurationSupported">
    <id>android.hardware.camera2.impl.ICameraDeviceUserWrapper.isSessionConfigurationSupported( SessionConfiguration )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>SessionConfiguration</type>
        <name>sessionConfig</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addChild">
    <id>android.view.accessibility.AccessibilityNodeInfo.addChild( IBinder )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>IBinder</type>
        <name>token</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="RevocableFileDescriptor">
    <id>android.os.RevocableFileDescriptor.RevocableFileDescriptor( Context FileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="clearWallpaper">
    <id>android.content.Context.clearWallpaper( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="saveToXml">
    <id>android.app.admin.PackagePolicyKey.saveToXml( TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>serializer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readPlatformHistory">
    <id>android.net.netstats.NetworkStatsDataMigrationUtils.readPlatformHistory( DataInput )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataInput</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getProperty">
    <id>android.app.ApplicationPackageManager.getProperty( String String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getIIncidentManagerLocked">
    <id>android.os.IncidentManager.getIIncidentManagerLocked( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getActivityBanner">
    <id>android.app.ApplicationPackageManager.getActivityBanner( Intent )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getTimer">
    <id>android.os.health.HealthStats.getTimer( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>key</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeXml">
    <id>android.app.NotificationChannel.writeXml( XmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlSerializer</type>
        <name>out</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="installExistingPackage">
    <id>android.app.ApplicationPackageManager.installExistingPackage( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>installReason</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getNanoAppAbortCode">
    <id>android.hardware.location.ContextHubIntentEvent.getNanoAppAbortCode( )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="attachToWindowToken">
    <id>android.window.WindowContextController.attachToWindowToken( IBinder )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>IBinder</type>
        <name>windowToken</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getConnectionInfo">
    <id>android.os.ServiceManagerProxy.getConnectionInfo( String )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="SetEnabledProvidersException">
    <id>android.credentials.SetEnabledProvidersException.SetEnabledProvidersException( String Throwable )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>Throwable</type>
        <name>cause</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createSelectionModifiedEvent">
    <id>android.view.textclassifier.SelectionEvent.createSelectionModifiedEvent( int int TextSelection )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>end</name>
      </param>
      <param>
        <type>TextSelection</type>
        <name>selection</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getSurfaceFormat">
    <id>android.hardware.camera2.utils.SurfaceUtils.getSurfaceFormat( Surface )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isCacheBehaviorGroup">
    <id>android.os.storage.StorageManager.isCacheBehaviorGroup( File )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>path</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="formatSimple">
    <id>android.text.TextUtils.formatSimple( String Object[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>format</name>
      </param>
      <param>
        <type>Object</type>
        <name>args</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="writeBytes">
    <id>android.os.incremental.V4Signature.writeBytes( OutputStream byte[] )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>OutputStream</type>
        <name>stream</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>bytes</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="CallingAppInfo">
    <id>android.service.credentials.CallingAppInfo.CallingAppInfo( String SigningInfo String )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>SigningInfo</type>
        <name>signingInfo</name>
      </param>
      <param>
        <type>String</type>
        <name>origin</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="clearResetPasswordToken">
    <id>android.app.admin.DevicePolicyManager.clearResetPasswordToken( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setDeviceOwnerLockScreenInfo">
    <id>android.app.admin.DevicePolicyManager.setDeviceOwnerLockScreenInfo( ComponentName CharSequence )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>info</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onError">
    <id>android.hardware.fingerprint.FingerprintServiceReceiver.onError( int int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>error</name>
      </param>
      <param>
        <type>int</type>
        <name>vendorCode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="enforceNoDataAvail">
    <id>android.os.Parcel.enforceNoDataAvail( )</id>
    <exceptions>
      <e>BadParcelableException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setOnCompleteListener">
    <id>android.hardware.location.ContextHubTransaction.setOnCompleteListener( OnCompleteListener Executor )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>OnCompleteListener</type>
        <name>listener</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onAuthenticationFailed">
    <id>android.hardware.fingerprint.FingerprintServiceReceiver.onAuthenticationFailed( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createShortcutResultIntent">
    <id>android.content.pm.ShortcutManager.createShortcutResultIntent( ShortcutInfo )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ShortcutInfo</type>
        <name>shortcut</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setVcnConfig">
    <id>android.net.vcn.VcnManager.setVcnConfig( ParcelUuid VcnConfig )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ParcelUuid</type>
        <name>subscriptionGroup</name>
      </param>
      <param>
        <type>VcnConfig</type>
        <name>config</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="loadInterpolator">
    <id>android.view.animation.AnimationUtils.loadInterpolator( Resources Theme int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parseInstrumentation">
    <id>android.content.pm.PackageParser.parseInstrumentation( Package Resources XmlResourceParser String[] )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Package</type>
        <name>owner</name>
      </param>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>String[]</type>
        <name>outError</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="verify">
    <id>android.util.apk.ApkSignatureSchemeV2Verifier.verify( String )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>apkFile</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startProfile">
    <id>android.app.ActivityManager.startProfile( UserHandle )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>UserHandle</type>
        <name>userHandle</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="feedIntoDataDigester">
    <id>android.util.apk.MemoryMappedFileDataSource.feedIntoDataDigester( DataDigester long int )</id>
    <exceptions>
      <e>DigestException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataDigester</type>
        <name>md</name>
      </param>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="endElement">
    <id>android.content.DefaultDataHandler.endElement( String String String )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>localName</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setFromIndex">
    <id>android.view.accessibility.AccessibilityRecord.setFromIndex( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>fromIndex</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openAssetFileDescriptor">
    <id>android.content.ContentResolver.openAssetFileDescriptor( Uri String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="initializeRepeatingRequestPipeline">
    <id>android.hardware.camera2.impl.CameraExtensionSessionImpl.initializeRepeatingRequestPipeline( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="finalize">
    <id>android.net.LocalSocketImpl.finalize( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="advance">
    <id>android.util.JsonReader.advance( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="logoutUser">
    <id>android.app.admin.DevicePolicyManager.logoutUser( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getFraction">
    <id>android.content.res.TypedArray.getFraction( int int int float )</id>
    <exceptions>
      <e>RuntimeException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>int</type>
        <name>base</name>
      </param>
      <param>
        <type>int</type>
        <name>pbase</name>
      </param>
      <param>
        <type>float</type>
        <name>defValue</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setGlobalPrivateDnsModeOpportunistic">
    <id>android.app.admin.DevicePolicyManager.setGlobalPrivateDnsModeOpportunistic( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createWindowedInstallPolicy">
    <id>android.app.admin.SystemUpdatePolicy.createWindowedInstallPolicy( int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>startTime</name>
      </param>
      <param>
        <type>int</type>
        <name>endTime</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getType">
    <id>android.content.ContentInterface.getType( Uri )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setSendBufferSize">
    <id>android.net.LocalSocket.setSendBufferSize( int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>n</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="enforcePermission">
    <id>android.os.PermissionEnforcer.enforcePermission( String int int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>permission</name>
      </param>
      <param>
        <type>int</type>
        <name>pid</name>
      </param>
      <param>
        <type>int</type>
        <name>uid</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="onSuccess">
    <id>android.service.autofill.SaveCallback.onSuccess( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getFastDrawable">
    <id>android.app.WallpaperManager.getFastDrawable( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="insert">
    <id>android.content.IContentProvider.insert( String Uri ContentValues )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>callingPkg</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>ContentValues</type>
        <name>initialValues</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getCredentialManagerPolicy">
    <id>android.app.admin.DevicePolicyManager.getCredentialManagerPolicy( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="take">
    <id>android.speech.tts.SynthesisPlaybackQueueItem.take( )</id>
    <exceptions>
      <e>InterruptedException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setHintText">
    <id>android.view.accessibility.AccessibilityNodeInfo.setHintText( CharSequence )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>hintText</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openCameraForUid">
    <id>android.hardware.camera2.CameraManager.openCameraForUid( String StateCallback Executor int )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>cameraId</name>
      </param>
      <param>
        <type>StateCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>int</type>
        <name>clientUid</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="refresh">
    <id>android.content.ContentProviderProxy.refresh( AttributionSource Uri Bundle ICancellationSignal )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
      <param>
        <type>ICancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getTag">
    <id>android.hardware.camera2.impl.CameraMetadataNative.getTag( String )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>key</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setOverrideApnsEnabled">
    <id>android.app.admin.DevicePolicyManager.setOverrideApnsEnabled( ComponentName boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>boolean</type>
        <name>enabled</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onFsync">
    <id>android.os.ProxyFileDescriptorCallback.onFsync( )</id>
    <exceptions>
      <e>ErrnoException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="canonicalizeAsync">
    <id>android.content.ContentProviderProxy.canonicalizeAsync( AttributionSource Uri RemoteCallback )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>RemoteCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="mapLong">
    <id>android.view.inspector.PropertyMapper.mapLong( String int )</id>
    <exceptions>
      <e>PropertyConflictException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>attributeId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="finalize">
    <id>android.view.InputQueue.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="nativeAllocateCopy">
    <id>android.hardware.camera2.impl.CameraMetadataNative.nativeAllocateCopy( long )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>ptr</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseBaseApplication">
    <id>android.content.pm.PackageParser.parseBaseApplication( Package Resources XmlResourceParser int String[] )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Package</type>
        <name>owner</name>
      </param>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>String[]</type>
        <name>outError</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getCameraInfo">
    <id>android.hardware.camera2.impl.ICameraDeviceUserWrapper.getCameraInfo( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="performAction">
    <id>android.view.accessibility.AccessibilityNodeInfo.performAction( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>action</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getInstrumentationInfo">
    <id>android.app.ApplicationPackageManager.getInstrumentationInfo( ComponentName int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>className</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseService">
    <id>android.content.pm.PackageParser.parseService( Package Resources XmlResourceParser int String[] CachedComponentArgs )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Package</type>
        <name>owner</name>
      </param>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>String[]</type>
        <name>outError</name>
      </param>
      <param>
        <type>CachedComponentArgs</type>
        <name>cachedArgs</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="getShortcutConfigActivityIntent">
    <id>android.content.pm.LauncherApps.getShortcutConfigActivityIntent( LauncherActivityInfo )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>LauncherActivityInfo</type>
        <name>info</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="query">
    <id>android.content.LoggingContentInterface.query( Uri String[] Bundle CancellationSignal )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String[]</type>
        <name>projection</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>queryArgs</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="startActivity">
    <id>android.app.Activity.startActivity( Intent Bundle )</id>
    <exceptions>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getInsetsIgnoringVisibility">
    <id>android.view.WindowInsets.getInsetsIgnoringVisibility( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>typeMask</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="checkServerTrusted">
    <id>android.security.net.config.RootTrustManager.checkServerTrusted( X509Certificate[] String Socket )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>X509Certificate[]</type>
        <name>certs</name>
      </param>
      <param>
        <type>String</type>
        <name>authType</name>
      </param>
      <param>
        <type>Socket</type>
        <name>socket</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getResourceId">
    <id>android.content.ContentResolver.getResourceId( Uri )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="UiModeManager">
    <id>android.app.UiModeManager.UiModeManager( Context )</id>
    <exceptions>
      <e>ServiceNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="executeForString">
    <id>android.database.sqlite.SQLiteSession.executeForString( String Object[] int CancellationSignal )</id>
    <exceptions>
      <e>OperationCanceledException</e>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>bindArgs</name>
      </param>
      <param>
        <type>int</type>
        <name>connectionFlags</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getResourcesForApplication">
    <id>android.content.pm.PackageManager.getResourcesForApplication( ApplicationInfo )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ApplicationInfo</type>
        <name>app</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nextInObject">
    <id>android.util.JsonReader.nextInObject( boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>firstElement</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="submitCaptureRequest">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.submitCaptureRequest( List CaptureCallback Executor boolean )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>requestList</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>boolean</type>
        <name>repeating</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="waitUntilIdle">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.waitUntilIdle( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createWindowContext">
    <id>android.content.Context.createWindowContext( int Bundle )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>type</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getInstallSourceInfo">
    <id>android.app.ApplicationPackageManager.getInstallSourceInfo( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getRequiredPasswordComplexity">
    <id>android.app.admin.DevicePolicyManager.getRequiredPasswordComplexity( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="findFocus">
    <id>android.app.UiAutomation.findFocus( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>focus</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addCrossProfileWidgetProvider">
    <id>android.app.admin.DevicePolicyManager.addCrossProfileWidgetProvider( ComponentName String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="noteForegroundResourceUseBegin">
    <id>android.app.ActivityManager.noteForegroundResourceUseBegin( int int int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>apiType</name>
      </param>
      <param>
        <type>int</type>
        <name>uid</name>
      </param>
      <param>
        <type>int</type>
        <name>pid</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="prepareForUnattendedUpdate">
    <id>android.os.RecoverySystem.prepareForUnattendedUpdate( Context String IntentSender )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>String</type>
        <name>updateToken</name>
      </param>
      <param>
        <type>IntentSender</type>
        <name>intentSender</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="unregisterForNotifications">
    <id>android.os.HwNoService.unregisterForNotifications( String String IServiceNotification )</id>
    <exceptions>
      <e>android.os.RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fqName</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>IServiceNotification</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getFile">
    <id>android.os.ParcelFileDescriptor.getFile( FileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="removeAction">
    <id>android.view.accessibility.AccessibilityNodeInfo.removeAction( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>action</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getActivityIcon">
    <id>android.content.pm.PackageManager.getActivityIcon( ComponentName )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>activityName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getUnsignedLongs">
    <id>android.security.keymaster.KeyCharacteristics.getUnsignedLongs( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tag</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readIntFlag">
    <id>android.view.inspector.PropertyReader.readIntFlag( int int )</id>
    <exceptions>
      <e>PropertyTypeMismatchException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getApplicationInfoAsUser">
    <id>android.app.ApplicationPackageManager.getApplicationInfoAsUser( String ApplicationInfoFlags int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>ApplicationInfoFlags</type>
        <name>flags</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="revokeRuntimePermission">
    <id>android.app.UiAutomation.revokeRuntimePermission( String String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>String</type>
        <name>permission</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="prepare">
    <id>android.database.sqlite.SQLiteSession.prepare( String int CancellationSignal SQLiteStatementInfo )</id>
    <exceptions>
      <e>OperationCanceledException</e>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>int</type>
        <name>connectionFlags</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
      <param>
        <type>SQLiteStatementInfo</type>
        <name>outStatementInfo</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="openAssetFile">
    <id>android.content.ContentProvider.openAssetFile( Uri String CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="onAuthenticationSucceeded">
    <id>android.hardware.face.FaceServiceReceiver.onAuthenticationSucceeded( Face int boolean )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Face</type>
        <name>face</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isStrongBiometric</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="readTextFile">
    <id>android.os.FileUtils.readTextFile( File int String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>file</name>
      </param>
      <param>
        <type>int</type>
        <name>max</name>
      </param>
      <param>
        <type>String</type>
        <name>ellipsis</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setSelected">
    <id>android.view.accessibility.AccessibilityNodeInfo.setSelected( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>selected</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onRemoved">
    <id>android.hardware.face.FaceServiceReceiver.onRemoved( Face int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Face</type>
        <name>face</name>
      </param>
      <param>
        <type>int</type>
        <name>remaining</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addDumpable">
    <id>android.util.DumpableContainer.addDumpable( Dumpable )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Dumpable</type>
        <name>dumpable</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readNativeHandleVector">
    <id>android.os.HwParcel.readNativeHandleVector( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setUseSessionTickets">
    <id>android.net.SSLCertificateSocketFactory.setUseSessionTickets( Socket boolean )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Socket</type>
        <name>socket</name>
      </param>
      <param>
        <type>boolean</type>
        <name>useSessionTickets</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="loadDescription">
    <id>android.app.WallpaperInfo.loadDescription( PackageManager )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>PackageManager</type>
        <name>pm</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseRow">
    <id>android.content.DefaultDataHandler.parseRow( Attributes )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>Attributes</type>
        <name>atts</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createReprocessableCaptureSessionByConfigurations">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.createReprocessableCaptureSessionByConfigurations( InputConfiguration List StateCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>InputConfiguration</type>
        <name>inputConfig</name>
      </param>
      <param>
        <type>List</type>
        <name>outputs</name>
      </param>
      <param>
        <type>StateCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="finalize">
    <id>android.os.ParcelFileDescriptor.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getServiceInfo">
    <id>android.content.pm.PackageManager.getServiceInfo( ComponentName int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>component</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPermissionGroupInfo">
    <id>android.content.pm.PackageManager.getPermissionGroupInfo( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>groupName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setDefaultSmsApplication">
    <id>android.app.admin.DevicePolicyManager.setDefaultSmsApplication( ComponentName String )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setPendingIntentCreatorBackgroundActivityStartMode">
    <id>android.app.ActivityOptions.setPendingIntentCreatorBackgroundActivityStartMode( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>mode</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="list">
    <id>android.content.res.AssetManager.list( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="mapInt">
    <id>android.view.inspector.PropertyMapper.mapInt( String int )</id>
    <exceptions>
      <e>PropertyConflictException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>attributeId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="revokeSelfPermissionOnKill">
    <id>android.content.Context.revokeSelfPermissionOnKill( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>permName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readInt16VectorAsArray">
    <id>android.os.HwParcel.readInt16VectorAsArray( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="close">
    <id>android.net.LocalSocket.close( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="readFamilies">
    <id>android.content.res.FontResourcesParser.readFamilies( XmlPullParser Resources )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>Resources</type>
        <name>resources</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getResources">
    <id>android.content.res.TypedArray.getResources( )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setDate">
    <id>android.widget.CalendarView.setDate( long boolean boolean )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>date</name>
      </param>
      <param>
        <type>boolean</type>
        <name>animate</name>
      </param>
      <param>
        <type>boolean</type>
        <name>center</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="digest">
    <id>android.os.FileUtils.digest( FileDescriptor String )</id>
    <exceptions>
      <e>IOException</e>
      <e>NoSuchAlgorithmException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
      <param>
        <type>String</type>
        <name>algorithm</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="flush">
    <id>android.util.TeeWriter.flush( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setPreviewDisplay">
    <id>android.hardware.Camera.setPreviewDisplay( SurfaceHolder )</id>
    <exceptions>
      <e>RuntimeException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>SurfaceHolder</type>
        <name>holder</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onAcquired">
    <id>android.hardware.fingerprint.FingerprintServiceReceiver.onAcquired( int int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>acquiredInfo</name>
      </param>
      <param>
        <type>int</type>
        <name>vendorCode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setMaxTextLength">
    <id>android.view.accessibility.AccessibilityNodeInfo.setMaxTextLength( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>max</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getCpuUsages">
    <id>android.os.HardwarePropertiesManager.getCpuUsages( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="loadInterpolator">
    <id>android.view.animation.AnimationUtils.loadInterpolator( Context int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createSelectionActionEvent">
    <id>android.view.textclassifier.SelectionEvent.createSelectionActionEvent( int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>end</name>
      </param>
      <param>
        <type>int</type>
        <name>actionType</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="checkUriPermission">
    <id>android.content.ContentProviderClient.checkUriPermission( Uri int int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>int</type>
        <name>uid</name>
      </param>
      <param>
        <type>int</type>
        <name>modeFlags</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="onUdfpsOverlayShown">
    <id>android.hardware.fingerprint.FingerprintServiceReceiver.onUdfpsOverlayShown( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="openXmlBlockAsset">
    <id>android.content.res.AssetManager.openXmlBlockAsset( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fileName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPassword">
    <id>android.view.accessibility.AccessibilityNodeInfo.setPassword( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>password</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onPredictSharingProbabilities">
    <id>android.service.resolver.ResolverRankerService.onPredictSharingProbabilities( List )</id>
    <exceptions>
      <e>Exception</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>targets</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="makeText">
    <id>android.widget.Toast.makeText( Context int int )</id>
    <exceptions>
      <e>Resources.NotFoundException</e>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>int</type>
        <name>resId</name>
      </param>
      <param>
        <type>int</type>
        <name>duration</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="startIntentSenderFromChild">
    <id>android.app.Activity.startIntentSenderFromChild( Activity IntentSender int Intent int int int Bundle )</id>
    <exceptions>
      <e>IntentSender.SendIntentException</e>
    </exceptions>
    <params>
      <param>
        <type>Activity</type>
        <name>child</name>
      </param>
      <param>
        <type>IntentSender</type>
        <name>intent</name>
      </param>
      <param>
        <type>int</type>
        <name>requestCode</name>
      </param>
      <param>
        <type>Intent</type>
        <name>fillInIntent</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsMask</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsValues</name>
      </param>
      <param>
        <type>int</type>
        <name>extraFlags</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>8</arity>
  </method>
  <method name="SetEnabledProvidersException">
    <id>android.credentials.SetEnabledProvidersException.SetEnabledProvidersException( String String Throwable )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>String</type>
        <name>message</name>
      </param>
      <param>
        <type>Throwable</type>
        <name>cause</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="extend">
    <id>android.util.Range.extend( T T )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>lower</name>
      </param>
      <param>
        <type>T</type>
        <name>upper</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="flushBuffer">
    <id>android.util.Base64OutputStream.flushBuffer( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="buildDexMetadataPathForApk">
    <id>android.content.pm.dex.DexMetadataHelper.buildDexMetadataPathForApk( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>codePath</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="AutofillServiceInfo">
    <id>android.service.autofill.AutofillServiceInfo.AutofillServiceInfo( Context ComponentName int )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>ComponentName</type>
        <name>comp</name>
      </param>
      <param>
        <type>int</type>
        <name>userHandle</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createAndProvisionManagedProfile">
    <id>android.app.admin.DevicePolicyManager.createAndProvisionManagedProfile( ManagedProfileProvisioningParams )</id>
    <exceptions>
      <e>ProvisioningException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ManagedProfileProvisioningParams</type>
        <name>provisioningParams</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="engineInit">
    <id>android.security.net.config.RootTrustManagerFactorySpi.engineInit( ManagerFactoryParameters )</id>
    <exceptions>
      <e>InvalidAlgorithmParameterException</e>
    </exceptions>
    <params>
      <param>
        <type>ManagerFactoryParameters</type>
        <name>spec</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readBytes">
    <id>android.os.incremental.V4Signature.readBytes( ByteBuffer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ByteBuffer</type>
        <name>buffer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readBuffer">
    <id>android.os.HwParcel.readBuffer( long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>expectedSize</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="remapCameraIds">
    <id>android.hardware.camera2.CameraManager.remapCameraIds( CameraIdRemapping )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>CameraIdRemapping</type>
        <name>cameraIdRemapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="instantiateProvider">
    <id>android.app.AppComponentFactory.instantiateProvider( ClassLoader String )</id>
    <exceptions>
      <e>ClassNotFoundException</e>
      <e>InstantiationException</e>
      <e>IllegalAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>ClassLoader</type>
        <name>cl</name>
      </param>
      <param>
        <type>String</type>
        <name>className</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setResource">
    <id>android.app.DisabledWallpaperManager.setResource( int int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>resid</name>
      </param>
      <param>
        <type>int</type>
        <name>which</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readXmlAttrs">
    <id>android.content.res.Configuration.readXmlAttrs( XmlPullParser Configuration )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>Configuration</type>
        <name>configOut</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getProgramList">
    <id>android.hardware.radio.RadioTuner.getProgramList( Map )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Map</type>
        <name>vendorFilter</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="prepare">
    <id>android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl.prepare( int Surface )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>maxCount</name>
      </param>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="rebootWipeUserData">
    <id>android.os.RecoverySystem.rebootWipeUserData( Context boolean String boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>boolean</type>
        <name>shutdown</name>
      </param>
      <param>
        <type>String</type>
        <name>reason</name>
      </param>
      <param>
        <type>boolean</type>
        <name>force</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="addOnDrawListener">
    <id>android.view.ViewTreeObserver.addOnDrawListener( OnDrawListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OnDrawListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getProtected">
    <id>android.hardware.camera2.CameraMetadata.getProtected( TKey )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>TKey</type>
        <name>key</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="UiModeManager">
    <id>android.app.UiModeManager.UiModeManager( )</id>
    <exceptions>
      <e>ServiceNotFoundException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="canPackageQuery">
    <id>android.content.pm.PackageManager.canPackageQuery( String String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sourcePackageName</name>
      </param>
      <param>
        <type>String</type>
        <name>targetPackageName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="ReprocessFormatsMap">
    <id>android.hardware.camera2.params.ReprocessFormatsMap.ReprocessFormatsMap( int[] )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int[]</type>
        <name>entry</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="get">
    <id>android.os.AsyncTask.get( )</id>
    <exceptions>
      <e>CancellationException</e>
      <e>ExecutionException</e>
      <e>InterruptedException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="startRecognition">
    <id>android.service.voice.AlwaysOnHotwordDetector.startRecognition( int byte[] )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>recognitionFlags</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>data</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="acquireLock">
    <id>android.hardware.camera2.utils.CloseableLock.acquireLock( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="registerNetworkScoreCallback">
    <id>android.net.NetworkScoreManager.registerNetworkScoreCallback( int int Executor NetworkScoreCallback )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>networkType</name>
      </param>
      <param>
        <type>int</type>
        <name>filterType</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>NetworkScoreCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setPreferentialNetworkServiceEnabled">
    <id>android.app.admin.DevicePolicyManager.setPreferentialNetworkServiceEnabled( boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>enabled</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setTag">
    <id>android.view.View.setTag( int Object )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>key</name>
      </param>
      <param>
        <type>Object</type>
        <name>tag</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getInstance">
    <id>android.view.Choreographer.getInstance( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getCropAndSetWallpaperIntent">
    <id>android.app.WallpaperManager.getCropAndSetWallpaperIntent( Uri )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>imageUri</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeUnknownObject">
    <id>android.os.PersistableBundle.writeUnknownObject( Object String TypedXmlSerializer )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>v</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>TypedXmlSerializer</type>
        <name>out</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="rebootAndApply">
    <id>android.os.RecoverySystem.rebootAndApply( Context String String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>String</type>
        <name>updateToken</name>
      </param>
      <param>
        <type>String</type>
        <name>reason</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="moveDocument">
    <id>android.provider.DocumentsContract.moveDocument( ContentResolver Uri Uri Uri )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ContentResolver</type>
        <name>content</name>
      </param>
      <param>
        <type>Uri</type>
        <name>sourceDocumentUri</name>
      </param>
      <param>
        <type>Uri</type>
        <name>sourceParentDocumentUri</name>
      </param>
      <param>
        <type>Uri</type>
        <name>targetParentDocumentUri</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getQueryParameter">
    <id>android.net.Uri.getQueryParameter( String )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>key</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="Credential">
    <id>android.credentials.Credential.Credential( String Bundle )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>data</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="and">
    <id>android.service.autofill.Validators.and( Validator[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Validator</type>
        <name>validators</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getActivityInfo">
    <id>android.content.pm.PackageManager.getActivityInfo( ComponentName ComponentInfoFlags )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>component</name>
      </param>
      <param>
        <type>ComponentInfoFlags</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="prepare">
    <id>android.database.sqlite.SQLiteConnection.prepare( String SQLiteStatementInfo )</id>
    <exceptions>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>SQLiteStatementInfo</type>
        <name>outStatementInfo</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addOnScrollChangedListener">
    <id>android.view.ViewTreeObserver.addOnScrollChangedListener( OnScrollChangedListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OnScrollChangedListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="initializePostviewPipeline">
    <id>android.hardware.camera2.impl.CameraExtensionJpegProcessor.initializePostviewPipeline( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="readVarLong">
    <id>android.net.netstats.NetworkStatsDataMigrationUtils.readVarLong( DataInput )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataInput</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addView">
    <id>android.widget.ViewSwitcher.addView( View int LayoutParams )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>child</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>LayoutParams</type>
        <name>params</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createConfirmFactoryResetCredentialIntent">
    <id>android.app.KeyguardManager.createConfirmFactoryResetCredentialIntent( CharSequence CharSequence CharSequence )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>title</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>description</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>alternateButtonLabel</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setImeConsumesInput">
    <id>android.view.inputmethod.InputConnectionWrapper.setImeConsumesInput( boolean )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>imeConsumesInput</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="checkLock">
    <id>android.app.KeyguardManager.checkLock( int byte[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>lockType</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>password</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setPasswordMinimumNonLetter">
    <id>android.app.admin.DevicePolicyManager.setPasswordMinimumNonLetter( ComponentName int )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>int</type>
        <name>length</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setDataDirectorySuffix">
    <id>android.webkit.WebView.setDataDirectorySuffix( String )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>suffix</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="StrictJarFile">
    <id>android.util.jar.StrictJarFile.StrictJarFile( FileDescriptor )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createVisualQueryDetector">
    <id>android.service.voice.VoiceInteractionService.createVisualQueryDetector( PersistableBundle SharedMemory Executor Callback )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistableBundle</type>
        <name>options</name>
      </param>
      <param>
        <type>SharedMemory</type>
        <name>sharedMemory</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>Callback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setPreviewSurface">
    <id>android.hardware.Camera.setPreviewSurface( Surface )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="removeOnWindowShownListener">
    <id>android.view.ViewTreeObserver.removeOnWindowShownListener( OnWindowShownListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OnWindowShownListener</type>
        <name>victim</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPackageInfoAsUser">
    <id>android.app.ApplicationPackageManager.getPackageInfoAsUser( String int int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getFraction">
    <id>android.content.res.Resources.getFraction( int int int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>base</name>
      </param>
      <param>
        <type>int</type>
        <name>pbase</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="executeUpdateDelete">
    <id>android.database.DatabaseUtils.executeUpdateDelete( SQLiteDatabase String Object[] )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>SQLiteDatabase</type>
        <name>db</name>
      </param>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>bindArgs</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parseCompatibilityPackages">
    <id>android.service.autofill.AutofillServiceInfo.parseCompatibilityPackages( XmlPullParser Resources )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>Resources</type>
        <name>resources</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="verifySigner">
    <id>android.util.apk.ApkSignatureSchemeV4Verifier.verifySigner( SigningInfo byte[] )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>SigningInfo</type>
        <name>signingInfo</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>signedData</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="makeDirectory">
    <id>android.os.incremental.IncrementalStorage.makeDirectory( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getExtensionSupportedSizes">
    <id>android.hardware.camera2.CameraExtensionCharacteristics.getExtensionSupportedSizes( int Class )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>extension</name>
      </param>
      <param>
        <type>Class</type>
        <name>klass</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="abortCaptures">
    <id>android.hardware.camera2.impl.CameraOfflineSessionImpl.abortCaptures( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="nativeCreate">
    <id>android.view.SurfaceControl.nativeCreate( SurfaceSession String int int int int long Parcel )</id>
    <exceptions>
      <e>OutOfResourcesException</e>
    </exceptions>
    <params>
      <param>
        <type>SurfaceSession</type>
        <name>session</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>w</name>
      </param>
      <param>
        <type>int</type>
        <name>h</name>
      </param>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>long</type>
        <name>parentObject</name>
      </param>
      <param>
        <type>Parcel</type>
        <name>metadata</name>
      </param>
    </params>
    <arity>8</arity>
  </method>
  <method name="onTaskDisplayChanged">
    <id>android.app.TaskStackListener.onTaskDisplayChanged( int int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>taskId</name>
      </param>
      <param>
        <type>int</type>
        <name>newDisplayId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="openFile">
    <id>android.provider.DocumentsProvider.openFile( Uri String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="findAccessibilityNodeInfosByViewId">
    <id>android.view.accessibility.DirectAccessibilityConnection.findAccessibilityNodeInfosByViewId( int long String int IAccessibilityInteractionConnectionCallback long )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>accessibilityWindowId</name>
      </param>
      <param>
        <type>long</type>
        <name>accessibilityNodeId</name>
      </param>
      <param>
        <type>String</type>
        <name>viewId</name>
      </param>
      <param>
        <type>int</type>
        <name>interactionId</name>
      </param>
      <param>
        <type>IAccessibilityInteractionConnectionCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>long</type>
        <name>threadId</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="getAbiList">
    <id>android.os.ZygoteProcess.getAbiList( BufferedWriter DataInputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>BufferedWriter</type>
        <name>writer</name>
      </param>
      <param>
        <type>DataInputStream</type>
        <name>inputStream</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="SizeF">
    <id>android.util.SizeF.SizeF( float float )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>float</type>
        <name>width</name>
      </param>
      <param>
        <type>float</type>
        <name>height</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addAccountFromCredentials">
    <id>android.accounts.AbstractAccountAuthenticator.addAccountFromCredentials( AccountAuthenticatorResponse Account Bundle )</id>
    <exceptions>
      <e>NetworkErrorException</e>
    </exceptions>
    <params>
      <param>
        <type>AccountAuthenticatorResponse</type>
        <name>response</name>
      </param>
      <param>
        <type>Account</type>
        <name>account</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>accountCredentials</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getAlpnSelectedProtocol">
    <id>android.net.SSLCertificateSocketFactory.getAlpnSelectedProtocol( Socket )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Socket</type>
        <name>socket</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setManagedProfileContactsAccessPolicy">
    <id>android.app.admin.DevicePolicyManager.setManagedProfileContactsAccessPolicy( PackagePolicy )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>PackagePolicy</type>
        <name>policy</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setInputConfiguration">
    <id>android.hardware.camera2.params.SessionConfiguration.setInputConfiguration( InputConfiguration )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>InputConfiguration</type>
        <name>input</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readDoubleVectorAsArray">
    <id>android.os.HwParcel.readDoubleVectorAsArray( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="wrap">
    <id>android.os.ParcelFileDescriptor.wrap( ParcelFileDescriptor Handler OnCloseListener )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>pfd</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
      <param>
        <type>OnCloseListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="writeRuleXml">
    <id>android.service.notification.ZenModeConfig.writeRuleXml( ZenRule TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ZenRule</type>
        <name>rule</name>
      </param>
      <param>
        <type>TypedXmlSerializer</type>
        <name>out</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPackageInfoAsUser">
    <id>android.app.ApplicationPackageManager.getPackageInfoAsUser( String PackageInfoFlags int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>PackageInfoFlags</type>
        <name>flags</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="nativeSwap">
    <id>android.hardware.camera2.impl.CameraMetadataNative.nativeSwap( long long )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>ptr</name>
      </param>
      <param>
        <type>long</type>
        <name>otherPtr</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getAMPMString">
    <id>android.text.format.DateUtils.getAMPMString( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>ampm</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getRealtimeStillCaptureLatency">
    <id>android.hardware.camera2.impl.CameraExtensionSessionImpl.getRealtimeStillCaptureLatency( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="readStringVector">
    <id>android.os.HwParcel.readStringVector( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="Range">
    <id>android.util.Range.Range( T T )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>lower</name>
      </param>
      <param>
        <type>T</type>
        <name>upper</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getType">
    <id>android.content.ContentProviderClient.getType( Uri )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="registerUidFrozenStateChangedCallback">
    <id>android.app.ActivityManager.registerUidFrozenStateChangedCallback( Executor UidFrozenStateChangedCallback )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>UidFrozenStateChangedCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="loadFromPath">
    <id>android.content.res.ApkAssets.loadFromPath( String int AssetsProvider )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>AssetsProvider</type>
        <name>assets</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="mapReadOnly">
    <id>android.os.SharedMemory.mapReadOnly( )</id>
    <exceptions>
      <e>ErrnoException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="imageFormatToPublic">
    <id>android.hardware.camera2.params.StreamConfigurationMap.imageFormatToPublic( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createWebLinkIntent">
    <id>android.provider.DocumentsContract.createWebLinkIntent( ContentResolver Uri Bundle )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ContentResolver</type>
        <name>content</name>
      </param>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="prepare">
    <id>android.hardware.camera2.CameraCaptureSession.prepare( int Surface )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>maxCount</name>
      </param>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readFloatVectorAsArray">
    <id>android.os.HwParcel.readFloatVectorAsArray( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getDeviceOwnerOrganizationName">
    <id>android.app.admin.DevicePolicyManager.getDeviceOwnerOrganizationName( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="close">
    <id>android.hardware.camera2.CameraOfflineSession.close( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getParameter">
    <id>android.service.voice.AlwaysOnHotwordDetector.getParameter( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>modelParam</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="cancelBugreport">
    <id>android.os.BugreportManager.cancelBugreport( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setThreadPriority">
    <id>android.os.Process.setThreadPriority( int )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>priority</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getEncoded">
    <id>android.util.apk.WrappedX509Certificate.getEncoded( )</id>
    <exceptions>
      <e>CertificateEncodingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getTypeAsync">
    <id>android.content.IContentProvider.getTypeAsync( AttributionSource Uri RemoteCallback )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>RemoteCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="collectCertificatesInternal">
    <id>android.content.pm.PackageParser.collectCertificatesInternal( Package boolean )</id>
    <exceptions>
      <e>PackageParserException</e>
    </exceptions>
    <params>
      <param>
        <type>Package</type>
        <name>pkg</name>
      </param>
      <param>
        <type>boolean</type>
        <name>skipVerify</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setRemoteDevice">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.setRemoteDevice( ICameraDeviceUser )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>ICameraDeviceUser</type>
        <name>remoteDevice</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getResourceEntryName">
    <id>android.content.res.Resources.getResourceEntryName( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>resid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPackageInfoAsUser">
    <id>android.content.pm.PackageManager.getPackageInfoAsUser( String int int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setCurrentItemIndex">
    <id>android.view.accessibility.AccessibilityRecord.setCurrentItemIndex( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>currentItemIndex</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setStream">
    <id>android.app.DisabledWallpaperManager.setStream( InputStream Rect boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>bitmapData</name>
      </param>
      <param>
        <type>Rect</type>
        <name>visibleCropHint</name>
      </param>
      <param>
        <type>boolean</type>
        <name>allowBackup</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="onActivityLaunchOnSecondaryDisplayFailed">
    <id>android.app.TaskStackListener.onActivityLaunchOnSecondaryDisplayFailed( RunningTaskInfo int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>RunningTaskInfo</type>
        <name>taskInfo</name>
      </param>
      <param>
        <type>int</type>
        <name>requestedDisplayId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPhysicalCameraMultiResolutionConfigs">
    <id>android.hardware.camera2.CameraManager.getPhysicalCameraMultiResolutionConfigs( String CameraMetadataNative ICameraService )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>cameraId</name>
      </param>
      <param>
        <type>CameraMetadataNative</type>
        <name>info</name>
      </param>
      <param>
        <type>ICameraService</type>
        <name>cameraService</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createFromXml">
    <id>android.os.BatteryUsageStats.createFromXml( TypedXmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openFileInput">
    <id>android.content.ContextWrapper.openFileInput( String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nativeOpenJarFile">
    <id>android.util.jar.StrictJarFile.nativeOpenJarFile( String int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>fd</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseApkLiteInner">
    <id>android.content.pm.PackageParser.parseApkLiteInner( File FileDescriptor String int )</id>
    <exceptions>
      <e>PackageParserException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>apkFile</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
      <param>
        <type>String</type>
        <name>debugPathName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="captureSingleRequest">
    <id>android.hardware.camera2.CameraCaptureSession.captureSingleRequest( CaptureRequest Executor CaptureCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>listener</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parseNetworkSecurityConfig">
    <id>android.security.net.config.XmlConfigSource.parseNetworkSecurityConfig( XmlResourceParser )</id>
    <exceptions>
      <e>ParserException</e>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="stopRepeating">
    <id>android.hardware.camera2.impl.CameraOfflineSessionImpl.stopRepeating( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="putInt32">
    <id>android.os.HwBlob.putInt32( long int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>int</type>
        <name>x</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="instantiateApplication">
    <id>android.app.AppComponentFactory.instantiateApplication( ClassLoader String )</id>
    <exceptions>
      <e>ClassNotFoundException</e>
      <e>InstantiationException</e>
      <e>IllegalAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>ClassLoader</type>
        <name>cl</name>
      </param>
      <param>
        <type>String</type>
        <name>className</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="refill">
    <id>android.util.Base64InputStream.refill( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="parseDebugOverridesResource">
    <id>android.security.net.config.XmlConfigSource.parseDebugOverridesResource( )</id>
    <exceptions>
      <e>ParserException</e>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="deleteDocument">
    <id>android.provider.DocumentsProvider.deleteDocument( String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>AuthenticationRequiredException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>documentId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="uncanonicalize">
    <id>android.content.LoggingContentInterface.uncanonicalize( Uri )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setResource">
    <id>android.app.WallpaperManager.setResource( int int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>resid</name>
      </param>
      <param>
        <type>int</type>
        <name>which</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="swap">
    <id>android.hardware.camera2.impl.CameraMetadataNative.swap( CameraMetadataNative )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>CameraMetadataNative</type>
        <name>other</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="verify">
    <id>android.util.apk.ApkSignatureSchemeV2Verifier.verify( RandomAccessFile boolean )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>RandomAccessFile</type>
        <name>apk</name>
      </param>
      <param>
        <type>boolean</type>
        <name>verifyIntegrity</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="startUpdateCredentialsSession">
    <id>android.accounts.AbstractAccountAuthenticator.startUpdateCredentialsSession( AccountAuthenticatorResponse Account String Bundle )</id>
    <exceptions>
      <e>NetworkErrorException</e>
    </exceptions>
    <params>
      <param>
        <type>AccountAuthenticatorResponse</type>
        <name>response</name>
      </param>
      <param>
        <type>Account</type>
        <name>account</name>
      </param>
      <param>
        <type>String</type>
        <name>authTokenType</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="parseApkLite">
    <id>android.content.pm.PackageParser.parseApkLite( String XmlPullParser AttributeSet SigningDetails )</id>
    <exceptions>
      <e>PackageParserException</e>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>codePath</name>
      </param>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
      <param>
        <type>SigningDetails</type>
        <name>signingDetails</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getPackageGids">
    <id>android.content.pm.PackageManager.getPackageGids( String PackageInfoFlags )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>PackageInfoFlags</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDocumentType">
    <id>android.provider.DocumentsProvider.getDocumentType( String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>AuthenticationRequiredException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>documentId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="installExistingPackage">
    <id>android.content.pm.PackageManager.installExistingPackage( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>installReason</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="CredentialEntry">
    <id>android.service.credentials.CredentialEntry.CredentialEntry( String String Slice )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>beginGetCredentialOptionId</name>
      </param>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>Slice</type>
        <name>slice</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="turnOnTorchWithStrengthLevel">
    <id>android.hardware.camera2.CameraManager.turnOnTorchWithStrengthLevel( String int )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>cameraId</name>
      </param>
      <param>
        <type>int</type>
        <name>torchStrength</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="deserializeExtrasBundle">
    <id>android.app.admin.ProvisioningIntentHelper.deserializeExtrasBundle( Properties String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Properties</type>
        <name>properties</name>
      </param>
      <param>
        <type>String</type>
        <name>extraName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="openAssetFile">
    <id>android.content.ContentProviderClient.openAssetFile( Uri String CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="openDocument">
    <id>android.provider.DocumentsProvider.openDocument( String String CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>AuthenticationRequiredException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>documentId</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="finalize">
    <id>android.view.SurfaceControlViewHost.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="installExistingPackage">
    <id>android.content.pm.PackageManager.installExistingPackage( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="endArray">
    <id>android.util.JsonWriter.endArray( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="verify">
    <id>android.util.apk.ApkSignatureSchemeV3Verifier.verify( String boolean )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>apkFile</name>
      </param>
      <param>
        <type>boolean</type>
        <name>verifyIntegrity</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="copy">
    <id>android.util.Xml.copy( XmlPullParser XmlSerializer )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>in</name>
      </param>
      <param>
        <type>XmlSerializer</type>
        <name>out</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="StrictJarManifest">
    <id>android.util.jar.StrictJarManifest.StrictJarManifest( byte[] boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>manifestBytes</name>
      </param>
      <param>
        <type>boolean</type>
        <name>readChunks</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readFixed32">
    <id>android.util.proto.ProtoInputStream.readFixed32( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getPropertyAsUser">
    <id>android.app.ApplicationPackageManager.getPropertyAsUser( String String String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>String</type>
        <name>className</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="openFile">
    <id>android.content.ContentProviderProxy.openFile( AttributionSource Uri String ICancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
      <param>
        <type>ICancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="enforcePermissionAnyOf">
    <id>android.os.PermissionEnforcer.enforcePermissionAnyOf( String[] int int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String[]</type>
        <name>permissions</name>
      </param>
      <param>
        <type>int</type>
        <name>pid</name>
      </param>
      <param>
        <type>int</type>
        <name>uid</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="registerDynamicSensorCallback">
    <id>android.hardware.SensorManager.registerDynamicSensorCallback( DynamicSensorCallback )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DynamicSensorCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getOutputMinFrameDuration">
    <id>android.hardware.camera2.params.StreamConfigurationMap.getOutputMinFrameDuration( int Size )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
      <param>
        <type>Size</type>
        <name>size</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="replaceText">
    <id>android.view.inputmethod.InputConnectionWrapper.replaceText( int int CharSequence int TextAttribute )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>end</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>text</name>
      </param>
      <param>
        <type>int</type>
        <name>newCursorPosition</name>
      </param>
      <param>
        <type>TextAttribute</type>
        <name>textAttribute</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="WifiKey">
    <id>android.net.WifiKey.WifiKey( String String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>ssid</name>
      </param>
      <param>
        <type>String</type>
        <name>bssid</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="loadAnimator">
    <id>android.animation.AnimatorInflater.loadAnimator( Resources Theme AttributeSet ValueAnimator float )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
      <param>
        <type>ValueAnimator</type>
        <name>anim</name>
      </param>
      <param>
        <type>float</type>
        <name>pathErrorScale</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="readBoolean">
    <id>android.view.inspector.PropertyReader.readBoolean( int boolean )</id>
    <exceptions>
      <e>PropertyTypeMismatchException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>boolean</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="rebootAndApply">
    <id>android.os.RecoverySystem.rebootAndApply( Context String boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>String</type>
        <name>reason</name>
      </param>
      <param>
        <type>boolean</type>
        <name>slotSwitch</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setSecondaryLockscreenEnabled">
    <id>android.app.admin.DevicePolicyManager.setSecondaryLockscreenEnabled( ComponentName boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>boolean</type>
        <name>enabled</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="switchToOffline">
    <id>android.hardware.camera2.CameraCaptureSession.switchToOffline( Collection Executor CameraOfflineSessionCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Collection</type>
        <name>offlineSurfaces</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>CameraOfflineSessionCallback</type>
        <name>listener</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setCacheBehaviorGroup">
    <id>android.os.storage.StorageManager.setCacheBehaviorGroup( File boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>path</name>
      </param>
      <param>
        <type>boolean</type>
        <name>group</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="serializeReturnValue">
    <id>android.ddm.DdmHandleViewDebug.serializeReturnValue( Class Object )</id>
    <exceptions>
      <e>ViewMethodInvocationSerializationException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>type</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getWallpaperInfo">
    <id>android.app.WallpaperManager.getWallpaperInfo( int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>which</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createSocket">
    <id>android.net.SSLCertificateSocketFactory.createSocket( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="readPlatformCollection">
    <id>android.net.netstats.NetworkStatsDataMigrationUtils.readPlatformCollection( String long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>prefix</name>
      </param>
      <param>
        <type>long</type>
        <name>bucketDuration</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="registerDisplayProxy">
    <id>android.view.accessibility.AccessibilityManager.registerDisplayProxy( AccessibilityDisplayProxy )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>AccessibilityDisplayProxy</type>
        <name>proxy</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createWindowContext">
    <id>android.content.Context.createWindowContext( Display int Bundle )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Display</type>
        <name>display</name>
      </param>
      <param>
        <type>int</type>
        <name>type</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="clearLskf">
    <id>android.os.RecoverySystem.clearLskf( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onRestoreFile">
    <id>android.app.backup.BackupAgent.onRestoreFile( ParcelFileDescriptor long int String String long long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>data</name>
      </param>
      <param>
        <type>long</type>
        <name>size</name>
      </param>
      <param>
        <type>int</type>
        <name>type</name>
      </param>
      <param>
        <type>String</type>
        <name>domain</name>
      </param>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
      <param>
        <type>long</type>
        <name>mode</name>
      </param>
      <param>
        <type>long</type>
        <name>mtime</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="getDisplay">
    <id>android.content.Context.getDisplay( )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="startIntentSenderFromChild">
    <id>android.app.Activity.startIntentSenderFromChild( Activity IntentSender int Intent int int int )</id>
    <exceptions>
      <e>IntentSender.SendIntentException</e>
    </exceptions>
    <params>
      <param>
        <type>Activity</type>
        <name>child</name>
      </param>
      <param>
        <type>IntentSender</type>
        <name>intent</name>
      </param>
      <param>
        <type>int</type>
        <name>requestCode</name>
      </param>
      <param>
        <type>Intent</type>
        <name>fillInIntent</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsMask</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsValues</name>
      </param>
      <param>
        <type>int</type>
        <name>extraFlags</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="writeXml">
    <id>android.app.NotificationChannel.writeXml( TypedXmlSerializer boolean Context )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>out</name>
      </param>
      <param>
        <type>boolean</type>
        <name>forBackup</name>
      </param>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="close">
    <id>android.net.LocalServerSocket.close( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="enforceReadPermissionInner">
    <id>android.content.ContentProvider.enforceReadPermissionInner( Uri AttributionSource )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parse">
    <id>android.util.Xml.parse( String ContentHandler )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>xml</name>
      </param>
      <param>
        <type>ContentHandler</type>
        <name>contentHandler</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="MeteringRectangle">
    <id>android.hardware.camera2.params.MeteringRectangle.MeteringRectangle( Point Size int )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Point</type>
        <name>xy</name>
      </param>
      <param>
        <type>Size</type>
        <name>dimensions</name>
      </param>
      <param>
        <type>int</type>
        <name>meteringWeight</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="removeOnWindowVisibilityChangeListener">
    <id>android.view.ViewTreeObserver.removeOnWindowVisibilityChangeListener( OnWindowVisibilityChangeListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OnWindowVisibilityChangeListener</type>
        <name>victim</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseTrustAnchors">
    <id>android.security.net.config.XmlConfigSource.parseTrustAnchors( XmlResourceParser boolean )</id>
    <exceptions>
      <e>ParserException</e>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>boolean</type>
        <name>defaultOverridePins</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="beginObject">
    <id>android.util.JsonWriter.beginObject( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="installExistingPackageAsUser">
    <id>android.app.ApplicationPackageManager.installExistingPackageAsUser( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPackageInfo">
    <id>android.app.ApplicationPackageManager.getPackageInfo( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="bindPermanent">
    <id>android.os.incremental.IncrementalStorage.bindPermanent( String String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sourcePath</name>
      </param>
      <param>
        <type>String</type>
        <name>targetPath</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getBytes">
    <id>android.security.keymaster.KeymasterArguments.getBytes( int byte[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tag</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>defaultValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="propagateIfInstanceOf">
    <id>android.util.ExceptionUtils.propagateIfInstanceOf( Throwable Class )</id>
    <exceptions>
      <e>E</e>
    </exceptions>
    <params>
      <param>
        <type>Throwable</type>
        <name>t</name>
      </param>
      <param>
        <type>Class</type>
        <name>c</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="beginArray">
    <id>android.util.JsonReader.beginArray( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getPackageUidAsUser">
    <id>android.content.pm.PackageManager.getPackageUidAsUser( String PackageInfoFlags int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>PackageInfoFlags</type>
        <name>flags</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="installPackage">
    <id>android.os.RecoverySystem.installPackage( Context File boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>File</type>
        <name>packageFile</name>
      </param>
      <param>
        <type>boolean</type>
        <name>processed</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="deserialize">
    <id>android.gesture.GesturePoint.deserialize( DataInputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataInputStream</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="fromVpnProfile">
    <id>android.net.PlatformVpnProfile.fromVpnProfile( VpnProfile )</id>
    <exceptions>
      <e>GeneralSecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>VpnProfile</type>
        <name>profile</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openNonAsset">
    <id>android.content.res.AssetManager.openNonAsset( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fileName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPreviewCallback">
    <id>android.hardware.Camera.setPreviewCallback( PreviewCallback )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>PreviewCallback</type>
        <name>cb</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="listen">
    <id>android.net.LocalSocketImpl.listen( int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>backlog</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="execPerConnectionSQL">
    <id>android.database.sqlite.SQLiteDatabase.execPerConnectionSQL( String Object[] )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>bindArgs</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createAnimatorFromXml">
    <id>android.animation.AnimatorInflater.createAnimatorFromXml( Resources Theme XmlPullParser float )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>float</type>
        <name>pixelSize</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="mapShort">
    <id>android.view.inspector.PropertyMapper.mapShort( String int )</id>
    <exceptions>
      <e>PropertyConflictException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>attributeId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="hasNext">
    <id>android.util.JsonReader.hasNext( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getTargetSdkVersion">
    <id>android.app.ApplicationPackageManager.getTargetSdkVersion( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readDouble">
    <id>android.view.inspector.PropertyReader.readDouble( int double )</id>
    <exceptions>
      <e>PropertyTypeMismatchException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>double</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="capture">
    <id>android.hardware.camera2.CameraExtensionSession.capture( CaptureRequest Executor ExtensionCaptureCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>ExtensionCaptureCallback</type>
        <name>listener</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setDomainVerificationLinkHandlingAllowed">
    <id>android.content.pm.verify.domain.DomainVerificationManager.setDomainVerificationLinkHandlingAllowed( String boolean )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>boolean</type>
        <name>allowed</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="shouldYieldConnection">
    <id>android.database.sqlite.SQLiteConnectionPool.shouldYieldConnection( SQLiteConnection int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>SQLiteConnection</type>
        <name>connection</name>
      </param>
      <param>
        <type>int</type>
        <name>connectionFlags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="clearProfileOwner">
    <id>android.app.admin.DevicePolicyManager.clearProfileOwner( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openNonAssetFd">
    <id>android.content.res.AssetManager.openNonAssetFd( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fileName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="revokeSelfPermissionsOnKill">
    <id>android.content.Context.revokeSelfPermissionsOnKill( Collection )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Collection</type>
        <name>permissions</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPackageInfoAsUser">
    <id>android.content.pm.PackageManager.getPackageInfoAsUser( String PackageInfoFlags int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>PackageInfoFlags</type>
        <name>flags</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="saveToXml">
    <id>android.app.admin.AccountTypePolicyKey.saveToXml( TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>serializer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="delete">
    <id>android.content.IContentProvider.delete( String Uri String String[] )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>callingPkg</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>String</type>
        <name>selection</name>
      </param>
      <param>
        <type>String[]</type>
        <name>selectionArgs</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setChildBoundingInsets">
    <id>android.view.AttachedSurfaceControl.setChildBoundingInsets( Rect )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Rect</type>
        <name>insets</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="verifyIntentFilter">
    <id>android.content.pm.PackageManager.verifyIntentFilter( int int List )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>verificationId</name>
      </param>
      <param>
        <type>int</type>
        <name>verificationCode</name>
      </param>
      <param>
        <type>List</type>
        <name>failedDomains</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getUserProperties">
    <id>android.os.UserManager.getUserProperties( UserHandle )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>UserHandle</type>
        <name>userHandle</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="verifySigner">
    <id>android.util.apk.ApkSignatureSchemeV3Verifier.verifySigner( ByteBuffer Map CertificateFactory )</id>
    <exceptions>
      <e>PlatformNotSupportedException</e>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ByteBuffer</type>
        <name>signerBlock</name>
      </param>
      <param>
        <type>Map</type>
        <name>contentDigests</name>
      </param>
      <param>
        <type>CertificateFactory</type>
        <name>certFactory</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="currentNetworkTimeMillis">
    <id>android.os.SystemClock.currentNetworkTimeMillis( )</id>
    <exceptions>
      <e>DateTimeException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="awaitResult">
    <id>android.os.SynchronousResultReceiver.awaitResult( long )</id>
    <exceptions>
      <e>TimeoutException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>timeoutMillis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startActivities">
    <id>android.app.Activity.startActivities( Intent[] Bundle )</id>
    <exceptions>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent[]</type>
        <name>intents</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getProviderInfo">
    <id>android.app.ApplicationPackageManager.getProviderInfo( ComponentName int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>className</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="requestBackup">
    <id>android.app.backup.BackupManager.requestBackup( String[] BackupObserver BackupManagerMonitor int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String[]</type>
        <name>packages</name>
      </param>
      <param>
        <type>BackupObserver</type>
        <name>observer</name>
      </param>
      <param>
        <type>BackupManagerMonitor</type>
        <name>monitor</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="verifyBytes">
    <id>android.util.jar.StrictJarVerifier.verifyBytes( byte[] byte[] )</id>
    <exceptions>
      <e>GeneralSecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>blockBytes</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>sfBytes</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="finalize">
    <id>android.hardware.SensorDirectChannel.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createMarshaler">
    <id>android.hardware.camera2.marshal.MarshalQueryable.createMarshaler( TypeReference int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>TypeReference</type>
        <name>managedType</name>
      </param>
      <param>
        <type>int</type>
        <name>nativeType</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="loadAnimator">
    <id>android.animation.AnimatorInflater.loadAnimator( Resources Theme int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>resources</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="validateNtpServerUri">
    <id>android.util.NtpTrustedTime.validateNtpServerUri( URI )</id>
    <exceptions>
      <e>URISyntaxException</e>
    </exceptions>
    <params>
      <param>
        <type>URI</type>
        <name>uri</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getXml">
    <id>android.content.res.Resources.getXml( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="characters">
    <id>android.text.HtmlToSpannedConverter.characters( char[] int int )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>char</type>
        <name>ch</name>
      </param>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>length</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setPasswordQuality">
    <id>android.app.admin.DevicePolicyManager.setPasswordQuality( ComponentName int )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>int</type>
        <name>quality</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseCommandLineArg">
    <id>android.app.timedetector.ManualTimeSuggestion.parseCommandLineArg( ShellCommand )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ShellCommand</type>
        <name>cmd</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="requestScores">
    <id>android.net.NetworkScoreManager.requestScores( Collection )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>Collection</type>
        <name>networks</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startOp">
    <id>android.app.AppOpsManager.startOp( String int String String String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>op</name>
      </param>
      <param>
        <type>int</type>
        <name>uid</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>String</type>
        <name>attributionTag</name>
      </param>
      <param>
        <type>String</type>
        <name>message</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="simpleQueryForString">
    <id>android.database.sqlite.SQLiteStatement.simpleQueryForString( )</id>
    <exceptions>
      <e>SQLiteDoneException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getBoolean">
    <id>android.content.res.Resources.getBoolean( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="requery">
    <id>android.database.BulkCursorProxy.requery( IContentObserver )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>IContentObserver</type>
        <name>observer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isPostviewAvailable">
    <id>android.hardware.camera2.CameraExtensionCharacteristics.isPostviewAvailable( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>extension</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setTimestampBase">
    <id>android.hardware.camera2.params.OutputConfiguration.setTimestampBase( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>timestampBase</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="removeOnTouchModeChangeListener">
    <id>android.view.ViewTreeObserver.removeOnTouchModeChangeListener( OnTouchModeChangeListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OnTouchModeChangeListener</type>
        <name>victim</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="finalize">
    <id>android.content.res.XmlBlock.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="checkServerTrusted">
    <id>android.security.net.config.NetworkSecurityTrustManager.checkServerTrusted( X509Certificate[] String Socket )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>X509Certificate[]</type>
        <name>certs</name>
      </param>
      <param>
        <type>String</type>
        <name>authType</name>
      </param>
      <param>
        <type>Socket</type>
        <name>socket</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="startStylusHandwriting">
    <id>android.inputmethodservice.IInputMethodWrapper.startStylusHandwriting( int InputChannel List )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>requestId</name>
      </param>
      <param>
        <type>InputChannel</type>
        <name>channel</name>
      </param>
      <param>
        <type>List</type>
        <name>stylusEvents</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="waitForResponse">
    <id>android.hardware.location.ContextHubTransaction.waitForResponse( long TimeUnit )</id>
    <exceptions>
      <e>InterruptedException</e>
      <e>TimeoutException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>timeout</name>
      </param>
      <param>
        <type>TimeUnit</type>
        <name>unit</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="querySearchDocuments">
    <id>android.provider.DocumentsProvider.querySearchDocuments( String String String[] )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>AuthenticationRequiredException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>rootId</name>
      </param>
      <param>
        <type>String</type>
        <name>query</name>
      </param>
      <param>
        <type>String[]</type>
        <name>projection</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setWallpaper">
    <id>android.content.ContextWrapper.setWallpaper( Bitmap )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Bitmap</type>
        <name>bitmap</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="skip">
    <id>android.content.res.FontResourcesParser.skip( XmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="loadOverlay">
    <id>android.content.res.loader.ResourcesProvider.loadOverlay( OverlayInfo )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>OverlayInfo</type>
        <name>overlayInfo</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="close">
    <id>android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl.close( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getResourceTypeName">
    <id>android.content.res.Resources.getResourceTypeName( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>resid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="detectorStatusToString">
    <id>android.app.time.DetectorStatusTypes.detectorStatusToString( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>detectorStatus</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startRecognition">
    <id>android.service.voice.AlwaysOnHotwordDetector.startRecognition( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>recognitionFlags</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="StreamConfiguration">
    <id>android.hardware.camera2.params.StreamConfiguration.StreamConfiguration( int int int boolean )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
      <param>
        <type>int</type>
        <name>width</name>
      </param>
      <param>
        <type>int</type>
        <name>height</name>
      </param>
      <param>
        <type>boolean</type>
        <name>input</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getExtras">
    <id>android.database.IBulkCursor.getExtras( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="write_native">
    <id>android.net.LocalSocketImpl.write_native( int FileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>b</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="writeExportedProperties">
    <id>android.view.ViewDebug.writeExportedProperties( Context Object BufferedWriter Class String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>Object</type>
        <name>view</name>
      </param>
      <param>
        <type>BufferedWriter</type>
        <name>out</name>
      </param>
      <param>
        <type>Class</type>
        <name>klass</name>
      </param>
      <param>
        <type>String</type>
        <name>prefix</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="ofExternalPhysicalAddress">
    <id>android.hardware.hdmi.HdmiTimerRecordSources.ofExternalPhysicalAddress( TimerInfo ExternalPhysicalAddress )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>TimerInfo</type>
        <name>timerInfo</name>
      </param>
      <param>
        <type>ExternalPhysicalAddress</type>
        <name>source</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="MemoryFile">
    <id>android.os.MemoryFile.MemoryFile( String int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>length</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="checkActive">
    <id>android.view.ScrollCaptureConnection.checkActive( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="read">
    <id>android.hardware.usb.DeviceFilter.read( XmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setThumbnail">
    <id>android.hardware.camera2.DngCreator.setThumbnail( Bitmap )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Bitmap</type>
        <name>pixels</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readPersistentServicesLocked">
    <id>android.content.pm.RegisteredServicesCache.readPersistentServicesLocked( InputStream )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>is</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openXmlResourceParser">
    <id>android.content.res.AssetManager.openXmlResourceParser( int String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>cookie</name>
      </param>
      <param>
        <type>String</type>
        <name>fileName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseAllMetaData">
    <id>android.content.pm.PackageParser.parseAllMetaData( Resources XmlResourceParser String Component String[] )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>String</type>
        <name>tag</name>
      </param>
      <param>
        <type>Component</type>
        <name>outInfo</name>
      </param>
      <param>
        <type>String[]</type>
        <name>outError</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="delete">
    <id>android.content.LoggingContentInterface.delete( Uri Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="beginArray">
    <id>android.util.JsonWriter.beginArray( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getApplicationExemptions">
    <id>android.app.admin.DevicePolicyManager.getApplicationExemptions( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="get">
    <id>android.util.LongArrayQueue.get( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="cacheShortcuts">
    <id>android.content.pm.LauncherApps.cacheShortcuts( String List UserHandle int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>List</type>
        <name>shortcutIds</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
      <param>
        <type>int</type>
        <name>cacheFlags</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="applyBatch">
    <id>android.content.ContentProviderProxy.applyBatch( AttributionSource String ArrayList )</id>
    <exceptions>
      <e>RemoteException</e>
      <e>OperationApplicationException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>String</type>
        <name>authority</name>
      </param>
      <param>
        <type>ArrayList</type>
        <name>operations</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="writeAttributeValueToXml">
    <id>android.app.admin.PreferentialNetworkServiceConfig.writeAttributeValueToXml( TypedXmlSerializer String int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>out</name>
      </param>
      <param>
        <type>String</type>
        <name>tag</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="capture">
    <id>android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl.capture( CaptureRequest Executor ExtensionCaptureCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>ExtensionCaptureCallback</type>
        <name>listener</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="finalize">
    <id>android.view.textservice.SpellCheckerSession.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="findDocumentPath">
    <id>android.provider.DocumentsProvider.findDocumentPath( String String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>AuthenticationRequiredException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>parentDocumentId</name>
      </param>
      <param>
        <type>String</type>
        <name>childDocumentId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDefaultTextClassifierImplementation">
    <id>android.service.textclassifier.TextClassifierService.getDefaultTextClassifierImplementation( Context )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setNetworkLoggingEnabled">
    <id>android.app.admin.DevicePolicyManager.setNetworkLoggingEnabled( ComponentName boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>boolean</type>
        <name>enabled</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseId">
    <id>android.content.ContentUris.parseId( Uri )</id>
    <exceptions>
      <e>NumberFormatException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>contentUri</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseUriInternal">
    <id>android.content.Intent.parseUriInternal( String int )</id>
    <exceptions>
      <e>URISyntaxException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>uri</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="revokeRuntimePermission">
    <id>android.app.UiAutomationConnection.revokeRuntimePermission( String String int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>String</type>
        <name>permission</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="nextNonWhitespace">
    <id>android.util.JsonReader.nextNonWhitespace( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="restat">
    <id>android.os.StatFs.restat( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getWifiSsidPolicy">
    <id>android.app.admin.DevicePolicyManager.getWifiSsidPolicy( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="addGeofence">
    <id>android.hardware.location.GeofenceHardware.addGeofence( int int GeofenceHardwareRequest GeofenceHardwareCallback )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>geofenceId</name>
      </param>
      <param>
        <type>int</type>
        <name>monitoringType</name>
      </param>
      <param>
        <type>GeofenceHardwareRequest</type>
        <name>geofenceRequest</name>
      </param>
      <param>
        <type>GeofenceHardwareCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="deserialize">
    <id>android.gesture.GestureStroke.deserialize( DataInputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataInputStream</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="GestureDetector">
    <id>android.view.GestureDetector.GestureDetector( Context OnGestureListener Handler )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>OnGestureListener</type>
        <name>listener</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="toBundle">
    <id>android.app.BroadcastOptions.toBundle( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="dispatchMessage">
    <id>android.companion.CompanionDeviceManager.dispatchMessage( int int byte[] )</id>
    <exceptions>
      <e>DeviceNotAssociatedException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>messageId</name>
      </param>
      <param>
        <type>int</type>
        <name>associationId</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>message</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parseXml">
    <id>android.os.AggregateBatteryConsumer.parseXml( TypedXmlPullParser Builder )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>Builder</type>
        <name>builder</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="makeLink">
    <id>android.os.incremental.IncrementalStorage.makeLink( String IncrementalStorage String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sourcePath</name>
      </param>
      <param>
        <type>IncrementalStorage</type>
        <name>destStorage</name>
      </param>
      <param>
        <type>String</type>
        <name>destPath</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="openTypedAssetFile">
    <id>android.content.IContentProvider.openTypedAssetFile( AttributionSource Uri String Bundle ICancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeType</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>opts</name>
      </param>
      <param>
        <type>ICancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="rethrowFromSystemServer">
    <id>android.os.RemoteException.rethrowFromSystemServer( )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="verifyIntegrityForVerityBasedAlgorithm">
    <id>android.util.apk.ApkSigningBlockUtils.verifyIntegrityForVerityBasedAlgorithm( byte[] RandomAccessFile SignatureInfo )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>expectedDigest</name>
      </param>
      <param>
        <type>RandomAccessFile</type>
        <name>apk</name>
      </param>
      <param>
        <type>SignatureInfo</type>
        <name>signatureInfo</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="fromSocket">
    <id>android.os.ParcelFileDescriptor.fromSocket( Socket )</id>
    <exceptions>
      <e>UncheckedIOException</e>
    </exceptions>
    <params>
      <param>
        <type>Socket</type>
        <name>socket</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="finalize">
    <id>android.util.jar.StrictJarFile.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="parseCommandLineArg">
    <id>android.app.timedetector.TelephonyTimeSuggestion.parseCommandLineArg( ShellCommand )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ShellCommand</type>
        <name>cmd</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="native_open">
    <id>android.hardware.SerialPort.native_open( FileDescriptor int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>pfd</name>
      </param>
      <param>
        <type>int</type>
        <name>speed</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getAuthToken">
    <id>android.accounts.AbstractAccountAuthenticator.getAuthToken( AccountAuthenticatorResponse Account String Bundle )</id>
    <exceptions>
      <e>NetworkErrorException</e>
    </exceptions>
    <params>
      <param>
        <type>AccountAuthenticatorResponse</type>
        <name>response</name>
      </param>
      <param>
        <type>Account</type>
        <name>account</name>
      </param>
      <param>
        <type>String</type>
        <name>authTokenType</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="finalize">
    <id>android.os.UEventObserver.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getDimensionPixelOffset">
    <id>android.content.res.Resources.getDimensionPixelOffset( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setProfileName">
    <id>android.app.admin.DevicePolicyManager.setProfileName( ComponentName String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>profileName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="verifyResourceExistsInCallingPackage">
    <id>android.app.admin.ParcelableResource.verifyResourceExistsInCallingPackage( Context int int )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>int</type>
        <name>resourceId</name>
      </param>
      <param>
        <type>int</type>
        <name>resourceType</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="readFromXml">
    <id>android.content.IntentFilter.readFromXml( XmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readFloat">
    <id>android.os.HwParcel.readFloat( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="notifyPermissionResponse">
    <id>android.content.RestrictionsManager.notifyPermissionResponse( String PersistableBundle )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>PersistableBundle</type>
        <name>response</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="replaceOrThrow">
    <id>android.database.sqlite.SQLiteDatabase.replaceOrThrow( String String ContentValues )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>table</name>
      </param>
      <param>
        <type>String</type>
        <name>nullColumnHack</name>
      </param>
      <param>
        <type>ContentValues</type>
        <name>initialValues</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="taskFinished">
    <id>android.hardware.camera2.utils.TaskSingleDrainer.taskFinished( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="detachSystemDataTransport">
    <id>android.companion.CompanionDeviceManager.detachSystemDataTransport( int )</id>
    <exceptions>
      <e>DeviceNotAssociatedException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>associationId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readEventsOnWrapping">
    <id>android.util.EventLog.readEventsOnWrapping( int[] long Collection )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int[]</type>
        <name>tags</name>
      </param>
      <param>
        <type>long</type>
        <name>timestamp</name>
      </param>
      <param>
        <type>Collection</type>
        <name>output</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="capture">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.capture( CaptureRequest CaptureCallback Executor )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="startUserInBackgroundVisibleOnDisplay">
    <id>android.app.ActivityManager.startUserInBackgroundVisibleOnDisplay( int int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
      <param>
        <type>int</type>
        <name>displayId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="intersect">
    <id>android.util.Range.intersect( Range )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Range</type>
        <name>range</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readPlatformNetworkIdentitySet">
    <id>android.net.netstats.NetworkStatsDataMigrationUtils.readPlatformNetworkIdentitySet( DataInput )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataInput</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="applyBatch">
    <id>android.content.ContentProviderClient.applyBatch( String ArrayList )</id>
    <exceptions>
      <e>RemoteException</e>
      <e>OperationApplicationException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>authority</name>
      </param>
      <param>
        <type>ArrayList</type>
        <name>operations</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="removeOnScrollChangedListener">
    <id>android.view.ViewTreeObserver.removeOnScrollChangedListener( OnScrollChangedListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OnScrollChangedListener</type>
        <name>victim</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createSocket">
    <id>android.net.SSLCertificateSocketFactory.createSocket( InetAddress int InetAddress int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InetAddress</type>
        <name>addr</name>
      </param>
      <param>
        <type>int</type>
        <name>port</name>
      </param>
      <param>
        <type>InetAddress</type>
        <name>localAddr</name>
      </param>
      <param>
        <type>int</type>
        <name>localPort</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="value">
    <id>android.util.JsonWriter.value( Number )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Number</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openFile">
    <id>android.content.ContentResolver.openFile( Uri String CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="send">
    <id>android.app.PendingIntent.send( )</id>
    <exceptions>
      <e>CanceledException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="reboot">
    <id>android.os.PowerManager.reboot( String )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>reason</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDrawable">
    <id>android.content.Context.getDrawable( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="copy">
    <id>android.os.FileUtils.copy( FileDescriptor FileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>in</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>out</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createCaptureRequest">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.createCaptureRequest( int )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>templateType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getInstallerCertificate">
    <id>android.content.pm.ApkChecksum.getInstallerCertificate( )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createAnimationFromXml">
    <id>android.view.animation.AnimationUtils.createAnimationFromXml( Context XmlPullParser AnimationSet AttributeSet )</id>
    <exceptions>
      <e>InflateException</e>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>c</name>
      </param>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>AnimationSet</type>
        <name>parent</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="parse">
    <id>android.text.format.Time.parse( String )</id>
    <exceptions>
      <e>TimeFormatException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>s</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onActivityLaunchOnSecondaryDisplayFailed">
    <id>android.app.TaskStackListener.onActivityLaunchOnSecondaryDisplayFailed( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createView">
    <id>android.view.LayoutInflater.createView( String String AttributeSet )</id>
    <exceptions>
      <e>InflateException</e>
      <e>ClassNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>String</type>
        <name>prefix</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setSystemSetting">
    <id>android.app.admin.DevicePolicyManager.setSystemSetting( ComponentName String String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>setting</name>
      </param>
      <param>
        <type>String</type>
        <name>value</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parseSplitApplication">
    <id>android.content.pm.PackageParser.parseSplitApplication( Package Resources XmlResourceParser int int String[] )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Package</type>
        <name>owner</name>
      </param>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>int</type>
        <name>splitIndex</name>
      </param>
      <param>
        <type>String[]</type>
        <name>outError</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="requestTextBoundsInfo">
    <id>android.view.inputmethod.InputConnectionWrapper.requestTextBoundsInfo( RectF Executor Consumer )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>RectF</type>
        <name>bounds</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>Consumer</type>
        <name>consumer</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="openDatabase">
    <id>android.database.sqlite.SQLiteDatabase.openDatabase( File OpenParams )</id>
    <exceptions>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>path</name>
      </param>
      <param>
        <type>OpenParams</type>
        <name>openParams</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="loadInBackground">
    <id>android.content.AsyncTaskLoader.loadInBackground( )</id>
    <exceptions>
      <e>OperationCanceledException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="checkPrinterId">
    <id>android.print.PrinterInfo.checkPrinterId( PrinterId )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>PrinterId</type>
        <name>printerId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="reconfigure">
    <id>android.database.sqlite.SQLiteConnectionPool.reconfigure( SQLiteDatabaseConfiguration )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>SQLiteDatabaseConfiguration</type>
        <name>configuration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isChildDocument">
    <id>android.provider.DocumentsContract.isChildDocument( ContentResolver Uri Uri )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ContentResolver</type>
        <name>content</name>
      </param>
      <param>
        <type>Uri</type>
        <name>parentDocumentUri</name>
      </param>
      <param>
        <type>Uri</type>
        <name>childDocumentUri</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="deleteStream">
    <id>android.hardware.camera2.impl.ICameraDeviceUserWrapper.deleteStream( int )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>streamId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="requireValidDetectorStatus">
    <id>android.app.time.DetectorStatusTypes.requireValidDetectorStatus( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>detectorStatus</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getApplicationInfo">
    <id>android.app.ApplicationPackageManager.getApplicationInfo( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="flush">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.flush( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="loadTableFromFd">
    <id>android.content.res.ApkAssets.loadTableFromFd( FileDescriptor String long long int AssetsProvider )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
      <param>
        <type>String</type>
        <name>friendlyName</name>
      </param>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>long</type>
        <name>length</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>AssetsProvider</type>
        <name>assets</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="grantRuntimePermission">
    <id>android.app.UiAutomationConnection.grantRuntimePermission( String String int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>String</type>
        <name>permission</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createCaptureRequest">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.createCaptureRequest( int Set )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>templateType</name>
      </param>
      <param>
        <type>Set</type>
        <name>physicalCameraIdSet</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setParameters">
    <id>android.hardware.Camera.setParameters( Parameters )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>Parameters</type>
        <name>params</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readEntityData">
    <id>android.app.backup.BackupDataInput.readEntityData( byte[] int int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>data</name>
      </param>
      <param>
        <type>int</type>
        <name>offset</name>
      </param>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="commitCompletion">
    <id>android.view.inputmethod.InputConnectionWrapper.commitCompletion( CompletionInfo )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>CompletionInfo</type>
        <name>text</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setOneShotPreviewCallback">
    <id>android.hardware.Camera.setOneShotPreviewCallback( PreviewCallback )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>PreviewCallback</type>
        <name>cb</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startActivities">
    <id>android.app.Activity.startActivities( Intent[] )</id>
    <exceptions>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent[]</type>
        <name>intents</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="value">
    <id>android.util.JsonWriter.value( long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="depthFormatToPublic">
    <id>android.hardware.camera2.params.StreamConfigurationMap.depthFormatToPublic( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="fromFd">
    <id>android.os.ParcelFileDescriptor.fromFd( FileDescriptor Handler OnCloseListener )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
      <param>
        <type>OnCloseListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="openTypedAssetFile">
    <id>android.content.ContentInterface.openTypedAssetFile( Uri String Bundle CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeTypeFilter</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>opts</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="checkLenient">
    <id>android.util.JsonReader.checkLenient( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setAutoSizeTextTypeWithDefaults">
    <id>android.widget.TextView.setAutoSizeTextTypeWithDefaults( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>autoSizeTextType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getText">
    <id>android.content.res.TypedArray.getText( int )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nativeWriteImage">
    <id>android.hardware.camera2.DngCreator.nativeWriteImage( OutputStream int int ByteBuffer int int long boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>OutputStream</type>
        <name>out</name>
      </param>
      <param>
        <type>int</type>
        <name>width</name>
      </param>
      <param>
        <type>int</type>
        <name>height</name>
      </param>
      <param>
        <type>ByteBuffer</type>
        <name>rawBuffer</name>
      </param>
      <param>
        <type>int</type>
        <name>rowStride</name>
      </param>
      <param>
        <type>int</type>
        <name>pixStride</name>
      </param>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isDirect</name>
      </param>
    </params>
    <arity>8</arity>
  </method>
  <method name="measureAllBounds">
    <id>android.text.TextLine.measureAllBounds( float[] float[] )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>float[]</type>
        <name>bounds</name>
      </param>
      <param>
        <type>float[]</type>
        <name>advances</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setDuration">
    <id>android.view.animation.Animation.setDuration( long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>durationMillis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPhysicalIdToCharsMap">
    <id>android.hardware.camera2.CameraManager.getPhysicalIdToCharsMap( CameraCharacteristics )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CameraCharacteristics</type>
        <name>chars</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getSystemIcon">
    <id>android.view.PointerIcon.getSystemIcon( Context int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>int</type>
        <name>type</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="disableShortcuts">
    <id>android.content.pm.ShortcutManager.disableShortcuts( List CharSequence )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>shortcutIds</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>disabledMessage</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="execute">
    <id>android.os.AsyncTask.execute( Params[] )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Params</type>
        <name>params</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="captureBurstRequests">
    <id>android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl.captureBurstRequests( List Executor CaptureCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>requests</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>listener</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="readFromStream">
    <id>android.os.PersistableBundle.readFromStream( InputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>inputStream</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readFullLongArray">
    <id>android.net.netstats.NetworkStatsDataMigrationUtils.readFullLongArray( DataInput )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataInput</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addOnWindowVisibilityChangeListener">
    <id>android.view.ViewTreeObserver.addOnWindowVisibilityChangeListener( OnWindowVisibilityChangeListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OnWindowVisibilityChangeListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="mapChar">
    <id>android.view.inspector.PropertyMapper.mapChar( String int )</id>
    <exceptions>
      <e>PropertyConflictException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>attributeId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="startForegroundService">
    <id>android.content.Context.startForegroundService( Intent )</id>
    <exceptions>
      <e>ForegroundServiceStartNotAllowedException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent</type>
        <name>service</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="DynamicRangeProfiles">
    <id>android.hardware.camera2.params.DynamicRangeProfiles.DynamicRangeProfiles( long[] )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long[]</type>
        <name>elements</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setIntents">
    <id>android.content.pm.ShortcutInfo.setIntents( Intent[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent[]</type>
        <name>intents</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="loadFromFd">
    <id>android.content.res.ApkAssets.loadFromFd( FileDescriptor String long long int AssetsProvider )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
      <param>
        <type>String</type>
        <name>friendlyName</name>
      </param>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>long</type>
        <name>length</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>AssetsProvider</type>
        <name>assets</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="grantTrust">
    <id>android.service.trust.TrustAgentService.grantTrust( CharSequence long int Consumer )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>message</name>
      </param>
      <param>
        <type>long</type>
        <name>durationMs</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>Consumer</type>
        <name>resultCallback</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="SurfaceControl">
    <id>android.view.SurfaceControl.SurfaceControl( SurfaceSession String int int int int SurfaceControl SparseIntArray WeakReference String )</id>
    <exceptions>
      <e>OutOfResourcesException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>SurfaceSession</type>
        <name>session</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>w</name>
      </param>
      <param>
        <type>int</type>
        <name>h</name>
      </param>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>SurfaceControl</type>
        <name>parent</name>
      </param>
      <param>
        <type>SparseIntArray</type>
        <name>metadata</name>
      </param>
      <param>
        <type>WeakReference</type>
        <name>localOwnerView</name>
      </param>
      <param>
        <type>String</type>
        <name>callsite</name>
      </param>
    </params>
    <arity>10</arity>
  </method>
  <method name="dropShellPermissionIdentity">
    <id>android.app.UiAutomationConnection.dropShellPermissionIdentity( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getResourcesForApplication">
    <id>android.content.pm.PackageManager.getResourcesForApplication( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onCreateCustomFromTag">
    <id>android.preference.GenericInflater.onCreateCustomFromTag( XmlPullParser T AttributeSet )</id>
    <exceptions>
      <e>XmlPullParserException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>T</type>
        <name>parent</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createOutputStream">
    <id>android.content.res.AssetFileDescriptor.createOutputStream( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setCustomScalarFunction">
    <id>android.database.sqlite.SQLiteDatabase.setCustomScalarFunction( String UnaryOperator )</id>
    <exceptions>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>functionName</name>
      </param>
      <param>
        <type>UnaryOperator</type>
        <name>scalarFunction</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="enableSurfaceSharing">
    <id>android.hardware.camera2.params.OutputConfiguration.enableSurfaceSharing( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="finalize">
    <id>android.view.InputWindowHandle.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="updateOutputConfiguration">
    <id>android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl.updateOutputConfiguration( OutputConfiguration )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>OutputConfiguration</type>
        <name>config</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="loadTableFromFd">
    <id>android.content.res.ApkAssets.loadTableFromFd( FileDescriptor String int AssetsProvider )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
      <param>
        <type>String</type>
        <name>friendlyName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>AssetsProvider</type>
        <name>assets</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getIntent">
    <id>android.content.Intent.getIntent( String )</id>
    <exceptions>
      <e>URISyntaxException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>uri</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="validateDexMetadataManifest">
    <id>android.content.pm.dex.DexMetadataHelper.validateDexMetadataManifest( ParseInput String StrictJarFile String long boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ParseInput</type>
        <name>input</name>
      </param>
      <param>
        <type>String</type>
        <name>dmaPath</name>
      </param>
      <param>
        <type>StrictJarFile</type>
        <name>jarFile</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>long</type>
        <name>versionCode</name>
      </param>
      <param>
        <type>boolean</type>
        <name>requireManifest</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="readString">
    <id>android.util.BackupUtils.readString( DataInputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataInputStream</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setSystemUpdatePolicy">
    <id>android.app.admin.DevicePolicyManager.setSystemUpdatePolicy( ComponentName SystemUpdatePolicy )</id>
    <exceptions>
      <e>ValidationFailedException</e>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>SystemUpdatePolicy</type>
        <name>policy</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getInterfaceDescriptor">
    <id>android.os.BinderProxy.getInterfaceDescriptor( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createCustomCaptureSession">
    <id>android.hardware.camera2.CameraDevice.createCustomCaptureSession( InputConfiguration List int StateCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>InputConfiguration</type>
        <name>inputConfig</name>
      </param>
      <param>
        <type>List</type>
        <name>outputs</name>
      </param>
      <param>
        <type>int</type>
        <name>operatingMode</name>
      </param>
      <param>
        <type>StateCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="startCapture">
    <id>android.view.ScrollCaptureConnection.startCapture( Surface IScrollCaptureCallbacks )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
      <param>
        <type>IScrollCaptureCallbacks</type>
        <name>remote</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="certificateToPemString">
    <id>android.net.Ikev2VpnProfile.certificateToPemString( X509Certificate )</id>
    <exceptions>
      <e>CertificateEncodingException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>X509Certificate</type>
        <name>cert</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setMinimumRequiredWifiSecurityLevel">
    <id>android.app.admin.DevicePolicyManager.setMinimumRequiredWifiSecurityLevel( int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>level</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="removeChild">
    <id>android.view.accessibility.AccessibilityNodeInfo.removeChild( View )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>child</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onTaskStackChanged">
    <id>android.app.TaskStackListener.onTaskStackChanged( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="registerService">
    <id>android.os.HwBinder.registerService( String )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>serviceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="restoreFromXml">
    <id>android.os.PersistableBundle.restoreFromXml( TypedXmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="findSignature">
    <id>android.util.apk.ApkSignatureSchemeV3Verifier.findSignature( RandomAccessFile int )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>RandomAccessFile</type>
        <name>apk</name>
      </param>
      <param>
        <type>int</type>
        <name>blockId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="processPackage">
    <id>android.os.RecoverySystem.processPackage( Context File ProgressListener )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>File</type>
        <name>packageFile</name>
      </param>
      <param>
        <type>ProgressListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getBackupRestoreEventLogger">
    <id>android.app.backup.BackupManager.getBackupRestoreEventLogger( BackupAgent )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>BackupAgent</type>
        <name>backupAgent</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAvailableCaptureResultKeys">
    <id>android.hardware.camera2.CameraExtensionCharacteristics.getAvailableCaptureResultKeys( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>extension</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createSelectionModifiedEvent">
    <id>android.view.textclassifier.SelectionEvent.createSelectionModifiedEvent( int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="next">
    <id>android.content.CursorEntityIterator.next( )</id>
    <exceptions>
      <e>NoSuchElementException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="listManifestByInterface">
    <id>android.os.HwNoService.listManifestByInterface( String )</id>
    <exceptions>
      <e>android.os.RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fqName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getBinaryNoHeader">
    <id>android.hardware.location.NanoAppBinary.getBinaryNoHeader( )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
      <e>NullPointerException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setInitialCaptureRequest">
    <id>android.hardware.camera2.impl.CameraExtensionSessionImpl.setInitialCaptureRequest( List InitialRequestHandler )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>captureStageList</name>
      </param>
      <param>
        <type>InitialRequestHandler</type>
        <name>requestHandler</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="installKeyPair">
    <id>android.app.admin.DevicePolicyManager.installKeyPair( ComponentName PrivateKey Certificate[] String boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>PrivateKey</type>
        <name>privKey</name>
      </param>
      <param>
        <type>Certificate[]</type>
        <name>certs</name>
      </param>
      <param>
        <type>String</type>
        <name>alias</name>
      </param>
      <param>
        <type>boolean</type>
        <name>requestAccess</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getWindows">
    <id>android.app.UiAutomation.getWindows( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="send">
    <id>android.app.PendingIntent.send( Context int Intent OnFinished Handler String Bundle )</id>
    <exceptions>
      <e>CanceledException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>int</type>
        <name>code</name>
      </param>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
      <param>
        <type>OnFinished</type>
        <name>onFinished</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
      <param>
        <type>String</type>
        <name>requiredPermission</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="getLastAuthenticationTime">
    <id>android.hardware.biometrics.BiometricManager.getLastAuthenticationTime( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>authenticators</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="requestBackup">
    <id>android.app.backup.BackupManager.requestBackup( String[] BackupObserver )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String[]</type>
        <name>packages</name>
      </param>
      <param>
        <type>BackupObserver</type>
        <name>observer</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="installExistingPackage">
    <id>android.app.admin.DevicePolicyManager.installExistingPackage( ComponentName String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="native_read_array">
    <id>android.hardware.SerialPort.native_read_array( byte[] int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>buffer</name>
      </param>
      <param>
        <type>int</type>
        <name>length</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="openRead">
    <id>android.util.AtomicFile.openRead( )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="parseBaseApk">
    <id>android.content.pm.PackageParser.parseBaseApk( String Resources XmlResourceParser int String[] )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>apkPath</name>
      </param>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>String[]</type>
        <name>outError</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="ColorSpaceTransform">
    <id>android.hardware.camera2.params.ColorSpaceTransform.ColorSpaceTransform( Rational[] )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Rational[]</type>
        <name>elements</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="close">
    <id>android.hardware.camera2.utils.CloseableLock.close( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getType">
    <id>android.content.res.TypedArray.getType( int )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="open">
    <id>android.util.JsonWriter.open( JsonScope String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>JsonScope</type>
        <name>empty</name>
      </param>
      <param>
        <type>String</type>
        <name>openBracket</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="saveToXml">
    <id>android.app.admin.IntentFilterPolicyKey.saveToXml( TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>serializer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setAccessibilityDataSensitive">
    <id>android.view.accessibility.AccessibilityNodeInfo.setAccessibilityDataSensitive( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>accessibilityDataSensitive</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="rInflateChildren">
    <id>android.view.LayoutInflater.rInflateChildren( XmlPullParser View AttributeSet boolean )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>View</type>
        <name>parent</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
      <param>
        <type>boolean</type>
        <name>finishInflate</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="readEscapeCharacter">
    <id>android.util.JsonReader.readEscapeCharacter( )</id>
    <exceptions>
      <e>NumberFormatException</e>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createInterpolatorFromXml">
    <id>android.view.animation.AnimationUtils.createInterpolatorFromXml( Resources Theme XmlPullParser )</id>
    <exceptions>
      <e>InflateException</e>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="readPlatformCollection">
    <id>android.net.netstats.NetworkStatsDataMigrationUtils.readPlatformCollection( Builder File )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Builder</type>
        <name>builder</name>
      </param>
      <param>
        <type>File</type>
        <name>file</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="preloadPackageForAbi">
    <id>android.os.ZygoteProcess.preloadPackageForAbi( String String String String String )</id>
    <exceptions>
      <e>ZygoteStartFailedEx</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packagePath</name>
      </param>
      <param>
        <type>String</type>
        <name>libsPath</name>
      </param>
      <param>
        <type>String</type>
        <name>libFileName</name>
      </param>
      <param>
        <type>String</type>
        <name>cacheKey</name>
      </param>
      <param>
        <type>String</type>
        <name>abi</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="copyToDoubleArray">
    <id>android.os.HwBlob.copyToDoubleArray( long double[] int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>double[]</type>
        <name>array</name>
      </param>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="set">
    <id>android.os.SystemProperties.set( String String )</id>
    <exceptions>
      <e>RuntimeException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>key</name>
      </param>
      <param>
        <type>String</type>
        <name>val</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getSurroundingText">
    <id>android.view.inputmethod.InputConnection.getSurroundingText( int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>beforeLength</name>
      </param>
      <param>
        <type>int</type>
        <name>afterLength</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="addOverrideApn">
    <id>android.app.admin.DevicePolicyManager.addOverrideApn( ComponentName ApnSetting )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>ApnSetting</type>
        <name>apnSetting</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="removeOnPreDrawListener">
    <id>android.view.ViewTreeObserver.removeOnPreDrawListener( OnPreDrawListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OnPreDrawListener</type>
        <name>victim</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startActivities">
    <id>android.content.Context.startActivities( Intent[] Bundle )</id>
    <exceptions>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent[]</type>
        <name>intents</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getAlwaysOnVpnPackage">
    <id>android.app.admin.DevicePolicyManager.getAlwaysOnVpnPackage( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getCallingUidOrThrow">
    <id>android.os.Binder.getCallingUidOrThrow( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="finalize">
    <id>android.util.MemoryIntArray.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="send">
    <id>android.app.PendingIntent.send( int OnFinished Handler )</id>
    <exceptions>
      <e>CanceledException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>code</name>
      </param>
      <param>
        <type>OnFinished</type>
        <name>onFinished</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getApkContentDigestsFromSignatureBlock">
    <id>android.util.apk.SourceStampVerifier.getApkContentDigestsFromSignatureBlock( ByteBuffer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ByteBuffer</type>
        <name>signatureBlock</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toSigningKeys">
    <id>android.content.pm.PackageParser.toSigningKeys( Signature[] )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>Signature[]</type>
        <name>signatures</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDateValue">
    <id>android.view.autofill.AutofillValue.getDateValue( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="isAnalogForced">
    <id>android.hardware.radio.RadioTuner.isAnalogForced( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="onAuthenticationFrame">
    <id>android.hardware.face.FaceServiceReceiver.onAuthenticationFrame( FaceAuthenticationFrame )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>FaceAuthenticationFrame</type>
        <name>frame</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="tearDown">
    <id>android.hardware.camera2.impl.ICameraDeviceUserWrapper.tearDown( int )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>streamId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="bind">
    <id>android.net.LocalSocket.bind( LocalSocketAddress )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>LocalSocketAddress</type>
        <name>bindpoint</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setShortSupportMessage">
    <id>android.app.admin.DevicePolicyManager.setShortSupportMessage( ComponentName CharSequence )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>message</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getMetadataImage">
    <id>android.hardware.radio.RadioTuner.getMetadataImage( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="requestImage">
    <id>android.view.ScrollCaptureConnection.requestImage( Rect )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Rect</type>
        <name>requestRect</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeDataTypesToXml">
    <id>android.content.IntentFilter.writeDataTypesToXml( XmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlSerializer</type>
        <name>serializer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="listServices">
    <id>android.os.ServiceManagerProxy.listServices( int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>dumpPriority</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="DeviceAdminInfo">
    <id>android.app.admin.DeviceAdminInfo.DeviceAdminInfo( Context ResolveInfo )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>ResolveInfo</type>
        <name>resolveInfo</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getIndexCount">
    <id>android.content.res.TypedArray.getIndexCount( )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="loadColorStateList">
    <id>android.content.res.Resources.loadColorStateList( TypedValue int Theme )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedValue</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isPinningEnforced">
    <id>android.security.net.config.NetworkSecurityTrustManager.isPinningEnforced( List )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>chain</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="update">
    <id>android.content.ContentProvider.update( Uri ContentValues Bundle )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>ContentValues</type>
        <name>values</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getOutputSizes">
    <id>android.hardware.camera2.params.StreamConfigurationMap.getOutputSizes( Class )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>klass</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startActivity">
    <id>android.app.LocalActivityManager.startActivity( String Intent )</id>
    <exceptions>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>id</name>
      </param>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPermittedAccessibilityServices">
    <id>android.app.admin.DevicePolicyManager.getPermittedAccessibilityServices( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="switchInputMethod">
    <id>android.inputmethodservice.InputMethodService.switchInputMethod( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="loadFromDir">
    <id>android.content.res.ApkAssets.loadFromDir( String int AssetsProvider )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>AssetsProvider</type>
        <name>assets</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="addOrThrow">
    <id>android.util.MathUtils.addOrThrow( int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>a</name>
      </param>
      <param>
        <type>int</type>
        <name>b</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readRawBytes">
    <id>android.util.proto.ProtoInputStream.readRawBytes( int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>n</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readHashMap">
    <id>android.os.Parcel.readHashMap( ClassLoader Class Class )</id>
    <exceptions>
      <e>BadParcelableException</e>
    </exceptions>
    <params>
      <param>
        <type>ClassLoader</type>
        <name>loader</name>
      </param>
      <param>
        <type>Class</type>
        <name>clazzKey</name>
      </param>
      <param>
        <type>Class</type>
        <name>clazzValue</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setComposingRegion">
    <id>android.view.inputmethod.InputConnectionWrapper.setComposingRegion( int int TextAttribute )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>end</name>
      </param>
      <param>
        <type>TextAttribute</type>
        <name>textAttribute</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getThreadSession">
    <id>android.database.sqlite.SQLiteDatabase.getThreadSession( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="flush">
    <id>android.util.JsonWriter.flush( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="checkServerTrusted">
    <id>android.security.net.config.NetworkSecurityTrustManager.checkServerTrusted( X509Certificate[] String )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>X509Certificate[]</type>
        <name>certs</name>
      </param>
      <param>
        <type>String</type>
        <name>authType</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getCameraExtensionCharacteristics">
    <id>android.hardware.camera2.CameraManager.getCameraExtensionCharacteristics( String )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>cameraId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setAutoRevokeExempted">
    <id>android.permission.PermissionManager.setAutoRevokeExempted( String boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>boolean</type>
        <name>exempted</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="openRawResource">
    <id>android.content.res.Resources.openRawResource( int TypedValue )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>TypedValue</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDocumentThumbnail">
    <id>android.provider.DocumentsContract.getDocumentThumbnail( ContentResolver Uri Point CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ContentResolver</type>
        <name>content</name>
      </param>
      <param>
        <type>Uri</type>
        <name>documentUri</name>
      </param>
      <param>
        <type>Point</type>
        <name>size</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="writeTo">
    <id>android.os.incremental.V4Signature.writeTo( OutputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>OutputStream</type>
        <name>stream</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="start">
    <id>android.webkit.TracingController.start( TracingConfig )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>TracingConfig</type>
        <name>tracingConfig</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="applyBatch">
    <id>android.content.ContentProvider.applyBatch( String ArrayList )</id>
    <exceptions>
      <e>OperationApplicationException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>authority</name>
      </param>
      <param>
        <type>ArrayList</type>
        <name>operations</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="rethrowIfNecessary">
    <id>android.provider.DocumentsContract.rethrowIfNecessary( Exception )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Exception</type>
        <name>e</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getQuantityText">
    <id>android.content.res.ResourcesImpl.getQuantityText( int int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>quantity</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readFrom">
    <id>android.os.incremental.V4Signature.readFrom( ParcelFileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>pfd</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="insert">
    <id>android.content.ContentResolver.insert( Uri ContentValues Bundle )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>ContentValues</type>
        <name>values</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="injectCamera">
    <id>android.hardware.camera2.CameraManager.injectCamera( String String String Executor InjectionStatusCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>String</type>
        <name>internalCamId</name>
      </param>
      <param>
        <type>String</type>
        <name>externalCamId</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>InjectionStatusCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="verifySigner">
    <id>android.util.apk.ApkSignatureSchemeV2Verifier.verifySigner( ByteBuffer Map CertificateFactory )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ByteBuffer</type>
        <name>signerBlock</name>
      </param>
      <param>
        <type>Map</type>
        <name>contentDigests</name>
      </param>
      <param>
        <type>CertificateFactory</type>
        <name>certFactory</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createReprocessCaptureRequest">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.createReprocessCaptureRequest( TotalCaptureResult )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>TotalCaptureResult</type>
        <name>inputResult</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readSerializable">
    <id>android.os.Parcel.readSerializable( ClassLoader Class )</id>
    <exceptions>
      <e>BadParcelableException</e>
    </exceptions>
    <params>
      <param>
        <type>ClassLoader</type>
        <name>loader</name>
      </param>
      <param>
        <type>Class</type>
        <name>clazz</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="queryChildDocumentsForManage">
    <id>android.provider.DocumentsProvider.queryChildDocumentsForManage( String String[] String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>parentDocumentId</name>
      </param>
      <param>
        <type>String[]</type>
        <name>projection</name>
      </param>
      <param>
        <type>String</type>
        <name>sortOrder</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="accept">
    <id>android.net.LocalSocketImpl.accept( LocalSocketImpl )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>LocalSocketImpl</type>
        <name>s</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="queryExternalStatsForUser">
    <id>android.app.usage.StorageStatsManager.queryExternalStatsForUser( String UserHandle )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>uuid</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="executeForLastInsertedRowId">
    <id>android.database.sqlite.SQLiteSession.executeForLastInsertedRowId( String Object[] int CancellationSignal )</id>
    <exceptions>
      <e>OperationCanceledException</e>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>bindArgs</name>
      </param>
      <param>
        <type>int</type>
        <name>connectionFlags</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="readFloat">
    <id>android.util.proto.ProtoInputStream.readFloat( long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>fieldId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addUserRestrictionGlobally">
    <id>android.app.admin.DevicePolicyManager.addUserRestrictionGlobally( String )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>key</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="unregisterDisplayProxy">
    <id>android.view.accessibility.AccessibilityManager.unregisterDisplayProxy( AccessibilityDisplayProxy )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>AccessibilityDisplayProxy</type>
        <name>proxy</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openImageThumbnail">
    <id>android.provider.DocumentsContract.openImageThumbnail( File )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>file</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="DreamManager">
    <id>android.app.DreamManager.DreamManager( Context )</id>
    <exceptions>
      <e>ServiceManager.ServiceNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getFont">
    <id>android.content.res.Resources.getFont( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readInt64">
    <id>android.os.HwParcel.readInt64( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="readSparseArray">
    <id>android.os.Parcel.readSparseArray( ClassLoader Class )</id>
    <exceptions>
      <e>BadParcelableException</e>
    </exceptions>
    <params>
      <param>
        <type>ClassLoader</type>
        <name>loader</name>
      </param>
      <param>
        <type>Class</type>
        <name>clazz</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="buildUniqueFile">
    <id>android.os.FileUtils.buildUniqueFile( File String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>parent</name>
      </param>
      <param>
        <type>String</type>
        <name>displayName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getFrameTimeNanos">
    <id>android.view.Choreographer.getFrameTimeNanos( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="makeLink">
    <id>android.os.incremental.IncrementalFileStorages.makeLink( String String String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>relativePath</name>
      </param>
      <param>
        <type>String</type>
        <name>fromBase</name>
      </param>
      <param>
        <type>String</type>
        <name>toBase</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="openCamera">
    <id>android.hardware.camera2.CameraManager.openCamera( String Executor StateCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>cameraId</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>StateCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="add">
    <id>android.os.HwNoService.add( String IBase )</id>
    <exceptions>
      <e>android.os.RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>IBase</type>
        <name>service</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createCaptureSession">
    <id>android.hardware.camera2.CameraDevice.createCaptureSession( List StateCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>outputs</name>
      </param>
      <param>
        <type>StateCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setRepeatingRequest">
    <id>android.hardware.camera2.CameraCaptureSession.setRepeatingRequest( CaptureRequest CaptureCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>listener</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="SetEnabledProvidersException">
    <id>android.credentials.SetEnabledProvidersException.SetEnabledProvidersException( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setRepeatingRequest">
    <id>android.hardware.camera2.impl.CameraExtensionSessionImpl.setRepeatingRequest( CaptureStageImpl CaptureCallback CaptureRequest )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureStageImpl</type>
        <name>captureStage</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>requestHandler</name>
      </param>
      <param>
        <type>CaptureRequest</type>
        <name>clientRequest</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isKeyPairGrantedToWifiAuth">
    <id>android.app.admin.DevicePolicyManager.isKeyPairGrantedToWifiAuth( String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>alias</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setError">
    <id>android.view.accessibility.AccessibilityNodeInfo.setError( CharSequence )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>error</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createPackageContext">
    <id>android.content.Context.createPackageContext( String int )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
      <e>NameNotFoundException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="shutdownOutput">
    <id>android.net.LocalSocketImpl.shutdownOutput( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="inflate">
    <id>android.content.res.ColorStateList.inflate( Resources XmlPullParser AttributeSet Theme )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>r</name>
      </param>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="decodeCertPath">
    <id>android.security.keystore.recovery.RecoveryCertPath.decodeCertPath( byte[] )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>bytes</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="initialize">
    <id>android.os.incremental.IncrementalFileStorages.initialize( Context File File DataLoaderParams IDataLoaderStatusListener StorageHealthCheckParams IStorageHealthListener List PerUidReadTimeouts[] IPackageLoadingProgressCallback )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>File</type>
        <name>stageDir</name>
      </param>
      <param>
        <type>File</type>
        <name>inheritedDir</name>
      </param>
      <param>
        <type>DataLoaderParams</type>
        <name>dataLoaderParams</name>
      </param>
      <param>
        <type>IDataLoaderStatusListener</type>
        <name>statusListener</name>
      </param>
      <param>
        <type>StorageHealthCheckParams</type>
        <name>healthCheckParams</name>
      </param>
      <param>
        <type>IStorageHealthListener</type>
        <name>healthListener</name>
      </param>
      <param>
        <type>List</type>
        <name>addedFiles</name>
      </param>
      <param>
        <type>PerUidReadTimeouts[]</type>
        <name>perUidReadTimeouts</name>
      </param>
      <param>
        <type>IPackageLoadingProgressCallback</type>
        <name>progressCallback</name>
      </param>
    </params>
    <arity>10</arity>
  </method>
  <method name="getBeginning">
    <id>android.text.method.WordIterator.getBeginning( int boolean )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>offset</name>
      </param>
      <param>
        <type>boolean</type>
        <name>getPrevWordBeginningOnTwoWordsBoundary</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readInt">
    <id>android.util.proto.ProtoInputStream.readInt( long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>fieldId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="authenticate">
    <id>android.hardware.biometrics.BiometricPrompt.authenticate( CryptoObject CancellationSignal Executor AuthenticationCallback )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>CryptoObject</type>
        <name>crypto</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancel</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>AuthenticationCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setStream">
    <id>android.app.WallpaperManager.setStream( InputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>bitmapData</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="stopUser">
    <id>android.app.admin.DevicePolicyManager.stopUser( ComponentName UserHandle )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>userHandle</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="prepare">
    <id>android.hardware.camera2.impl.ICameraDeviceUserWrapper.prepare( int )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>streamId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getServiceInfo">
    <id>android.content.pm.PackageManager.getServiceInfo( ComponentName ComponentInfoFlags )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>component</name>
      </param>
      <param>
        <type>ComponentInfoFlags</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="delete">
    <id>android.content.ContentProvider.delete( Uri Bundle )</id>
    <exceptions>
      <e>SQLException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createDefaultRequest">
    <id>android.hardware.camera2.impl.ICameraDeviceUserWrapper.createDefaultRequest( int )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>templateId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startUserInBackground">
    <id>android.app.admin.DevicePolicyManager.startUserInBackground( ComponentName UserHandle )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>userHandle</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setCrossProfileCalendarPackages">
    <id>android.app.admin.DevicePolicyManager.setCrossProfileCalendarPackages( ComponentName Set )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>Set</type>
        <name>packageNames</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="name">
    <id>android.util.JsonWriter.name( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="refresh">
    <id>android.content.LoggingContentInterface.refresh( Uri Bundle CancellationSignal )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>args</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="startActivityForResult">
    <id>android.app.Activity.startActivityForResult( Intent int )</id>
    <exceptions>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
      <param>
        <type>int</type>
        <name>requestCode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setCameraAudioRestriction">
    <id>android.hardware.camera2.CameraDevice.setCameraAudioRestriction( int )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>mode</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="processingInstruction">
    <id>android.text.HtmlToSpannedConverter.processingInstruction( String String )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>target</name>
      </param>
      <param>
        <type>String</type>
        <name>data</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getStreamTypes">
    <id>android.content.ContentProviderProxy.getStreamTypes( AttributionSource Uri String )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeTypeFilter</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="onGetSize">
    <id>android.os.ProxyFileDescriptorCallback.onGetSize( )</id>
    <exceptions>
      <e>ErrnoException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="consume">
    <id>android.util.apk.DataDigester.consume( ByteBuffer )</id>
    <exceptions>
      <e>DigestException</e>
    </exceptions>
    <params>
      <param>
        <type>ByteBuffer</type>
        <name>buffer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="call">
    <id>android.content.IContentProvider.call( String String String Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>callingPkg</name>
      </param>
      <param>
        <type>String</type>
        <name>method</name>
      </param>
      <param>
        <type>String</type>
        <name>arg</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setRecoveryStatus">
    <id>android.security.keystore.recovery.RecoveryController.setRecoveryStatus( String int )</id>
    <exceptions>
      <e>InternalRecoveryServiceException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>alias</name>
      </param>
      <param>
        <type>int</type>
        <name>status</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setTrustAgentConfiguration">
    <id>android.app.admin.DevicePolicyManager.setTrustAgentConfiguration( ComponentName ComponentName PersistableBundle )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>ComponentName</type>
        <name>target</name>
      </param>
      <param>
        <type>PersistableBundle</type>
        <name>configuration</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getParcelable">
    <id>android.os.ParcelableHolder.getParcelable( Class )</id>
    <exceptions>
      <e>BadParcelableException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>clazz</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getInt64">
    <id>android.os.HwBlob.getInt64( long )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setAlwaysOnVpnPackage">
    <id>android.app.admin.DevicePolicyManager.setAlwaysOnVpnPackage( ComponentName String boolean Set )</id>
    <exceptions>
      <e>NameNotFoundException</e>
      <e>SecurityException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>vpnPackage</name>
      </param>
      <param>
        <type>boolean</type>
        <name>lockdownEnabled</name>
      </param>
      <param>
        <type>Set</type>
        <name>lockdownAllowlist</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="hasGatewayOption">
    <id>android.net.vcn.VcnGatewayConnectionConfig.hasGatewayOption( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>option</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readMap">
    <id>android.os.Parcel.readMap( Map ClassLoader Class Class )</id>
    <exceptions>
      <e>BadParcelableException</e>
    </exceptions>
    <params>
      <param>
        <type>Map</type>
        <name>outVal</name>
      </param>
      <param>
        <type>ClassLoader</type>
        <name>loader</name>
      </param>
      <param>
        <type>Class</type>
        <name>clazzKey</name>
      </param>
      <param>
        <type>Class</type>
        <name>clazzValue</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="createCameraAdvancedExtensionSession">
    <id>android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl.createCameraAdvancedExtensionSession( CameraDeviceImpl Map Context ExtensionSessionConfiguration int IBinder )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>CameraDeviceImpl</type>
        <name>cameraDevice</name>
      </param>
      <param>
        <type>Map</type>
        <name>characteristicsMap</name>
      </param>
      <param>
        <type>Context</type>
        <name>ctx</name>
      </param>
      <param>
        <type>ExtensionSessionConfiguration</type>
        <name>config</name>
      </param>
      <param>
        <type>int</type>
        <name>sessionId</name>
      </param>
      <param>
        <type>IBinder</type>
        <name>token</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="tearDown">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.tearDown( Surface )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="clone">
    <id>android.view.animation.AnimationSet.clone( )</id>
    <exceptions>
      <e>CloneNotSupportedException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getActivityLogo">
    <id>android.app.ApplicationPackageManager.getActivityLogo( Intent )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="removeVcnNetworkPolicyChangeListener">
    <id>android.net.vcn.VcnManager.removeVcnNetworkPolicyChangeListener( VcnNetworkPolicyChangeListener )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>VcnNetworkPolicyChangeListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setDeviceOwnerType">
    <id>android.app.admin.DevicePolicyManager.setDeviceOwnerType( ComponentName int )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>int</type>
        <name>deviceOwnerType</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setAccessibilityFocused">
    <id>android.view.accessibility.AccessibilityNodeInfo.setAccessibilityFocused( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>focused</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createConstrainedHighSpeedCaptureSession">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.createConstrainedHighSpeedCaptureSession( List StateCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>outputs</name>
      </param>
      <param>
        <type>StateCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setWifiSsidPolicy">
    <id>android.app.admin.DevicePolicyManager.setWifiSsidPolicy( WifiSsidPolicy )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>WifiSsidPolicy</type>
        <name>policy</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isOutputSupportedFor">
    <id>android.hardware.camera2.params.RecommendedStreamConfigurationMap.isOutputSupportedFor( Surface )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setFieldsOn">
    <id>android.os.Debug.setFieldsOn( Class boolean )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>cl</name>
      </param>
      <param>
        <type>boolean</type>
        <name>partial</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="ClipboardManager">
    <id>android.content.ClipboardManager.ClipboardManager( Context Handler )</id>
    <exceptions>
      <e>ServiceNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="saveToXml">
    <id>android.content.Intent.saveToXml( XmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlSerializer</type>
        <name>out</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPreviewTexture">
    <id>android.hardware.Camera.setPreviewTexture( SurfaceTexture )</id>
    <exceptions>
      <e>RuntimeException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>SurfaceTexture</type>
        <name>surfaceTexture</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="value">
    <id>android.util.JsonWriter.value( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startProxyOp">
    <id>android.app.AppOpsManager.startProxyOp( String AttributionSource String boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>op</name>
      </param>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>String</type>
        <name>message</name>
      </param>
      <param>
        <type>boolean</type>
        <name>skipProxyOperation</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="clone">
    <id>android.webkit.WebSyncManager.clone( )</id>
    <exceptions>
      <e>CloneNotSupportedException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setAdapter">
    <id>android.widget.Spinner.setAdapter( SpinnerAdapter )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>SpinnerAdapter</type>
        <name>adapter</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onTaskRemovalStarted">
    <id>android.app.TaskStackListener.onTaskRemovalStarted( RunningTaskInfo )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>RunningTaskInfo</type>
        <name>taskInfo</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="findApkSigningBlock">
    <id>android.util.apk.ApkSigningBlockUtils.findApkSigningBlock( RandomAccessFile long )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>RandomAccessFile</type>
        <name>apk</name>
      </param>
      <param>
        <type>long</type>
        <name>centralDirOffset</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="verify">
    <id>android.util.apk.WrappedX509Certificate.verify( PublicKey String )</id>
    <exceptions>
      <e>CertificateException</e>
      <e>NoSuchAlgorithmException</e>
      <e>SignatureException</e>
      <e>InvalidKeyException</e>
      <e>NoSuchProviderException</e>
    </exceptions>
    <params>
      <param>
        <type>PublicKey</type>
        <name>key</name>
      </param>
      <param>
        <type>String</type>
        <name>sigProvider</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onFreeCache">
    <id>android.service.storage.ExternalStorageService.onFreeCache( UUID long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>UUID</type>
        <name>volumeUuid</name>
      </param>
      <param>
        <type>long</type>
        <name>bytes</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="close">
    <id>android.database.sqlite.SQLiteConnectionPool.close( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="enforceSealed">
    <id>android.view.accessibility.AccessibilityRecord.enforceSealed( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getAncillaryFileDescriptors">
    <id>android.net.LocalSocket.getAncillaryFileDescriptors( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="endBatchEdit">
    <id>android.view.inputmethod.InputConnectionWrapper.endBatchEdit( )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="hasFeatures">
    <id>android.accounts.AbstractAccountAuthenticator.hasFeatures( AccountAuthenticatorResponse Account String[] )</id>
    <exceptions>
      <e>NetworkErrorException</e>
    </exceptions>
    <params>
      <param>
        <type>AccountAuthenticatorResponse</type>
        <name>response</name>
      </param>
      <param>
        <type>Account</type>
        <name>account</name>
      </param>
      <param>
        <type>String[]</type>
        <name>features</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="finishTranslation">
    <id>android.view.translation.UiTranslationManager.finishTranslation( ActivityId )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>ActivityId</type>
        <name>activityId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="cancelPrompt">
    <id>android.security.ConfirmationPrompt.cancelPrompt( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="startActivityAsUser">
    <id>android.content.Context.startActivityAsUser( Intent UserHandle )</id>
    <exceptions>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="beginBatchEdit">
    <id>android.view.inputmethod.InputConnectionWrapper.beginBatchEdit( )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getTotalBytes">
    <id>android.app.usage.StorageStatsManager.getTotalBytes( UUID )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>UUID</type>
        <name>storageUuid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="registerTorchCallback">
    <id>android.hardware.camera2.CameraManager.registerTorchCallback( TorchCallback Handler )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>TorchCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDrawable">
    <id>android.content.res.Resources.getDrawable( int Theme )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="canonicalize">
    <id>android.content.ContentProviderProxy.canonicalize( AttributionSource Uri )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="toVpnProfile">
    <id>android.net.PlatformVpnProfile.toVpnProfile( )</id>
    <exceptions>
      <e>GeneralSecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="checkPins">
    <id>android.security.net.config.NetworkSecurityTrustManager.checkPins( List )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>chain</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="unregisterObserver">
    <id>android.database.Observable.unregisterObserver( T )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>observer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getUsageSource">
    <id>android.app.usage.UsageStatsManager.getUsageSource( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="isPreparedForUnattendedUpdate">
    <id>android.os.RecoverySystem.isPreparedForUnattendedUpdate( Context )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openPidFd">
    <id>android.os.Process.openPidFd( int int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>pid</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getTextAfterCursor">
    <id>android.view.inputmethod.InputConnectionWrapper.getTextAfterCursor( int int )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>n</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="prepare">
    <id>android.hardware.camera2.CameraCaptureSession.prepare( Surface )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="Face">
    <id>android.hardware.camera2.params.Face.Face( Rect int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Rect</type>
        <name>bounds</name>
      </param>
      <param>
        <type>int</type>
        <name>score</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="startActivityForResult">
    <id>android.app.Activity.startActivityForResult( Intent int Bundle )</id>
    <exceptions>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
      <param>
        <type>int</type>
        <name>requestCode</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setChecked">
    <id>android.view.accessibility.AccessibilityRecord.setChecked( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>isChecked</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addView">
    <id>android.widget.TextSwitcher.addView( View int LayoutParams )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>child</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>LayoutParams</type>
        <name>params</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="addChild">
    <id>android.view.accessibility.AccessibilityNodeInfo.addChild( View )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>child</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="postMessage">
    <id>android.webkit.WebMessagePort.postMessage( WebMessage )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>WebMessage</type>
        <name>message</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addPermission">
    <id>android.permission.PermissionManager.addPermission( PermissionInfo boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>PermissionInfo</type>
        <name>permissionInfo</name>
      </param>
      <param>
        <type>boolean</type>
        <name>async</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createAlwaysOnHotwordDetector">
    <id>android.service.voice.VoiceInteractionService.createAlwaysOnHotwordDetector( String Locale PersistableBundle SharedMemory Executor Callback )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>keyphrase</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
      <param>
        <type>PersistableBundle</type>
        <name>options</name>
      </param>
      <param>
        <type>SharedMemory</type>
        <name>sharedMemory</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>Callback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="getProperty">
    <id>android.app.ApplicationPackageManager.getProperty( String ComponentName )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
      <param>
        <type>ComponentName</type>
        <name>component</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getRecommendedStreamConfigurationMap">
    <id>android.hardware.camera2.CameraCharacteristics.getRecommendedStreamConfigurationMap( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>usecase</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="captureLayers">
    <id>android.view.ViewDebug.captureLayers( View DataOutputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>root</name>
      </param>
      <param>
        <type>DataOutputStream</type>
        <name>clientStream</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setSingleRepeatingRequest">
    <id>android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl.setSingleRepeatingRequest( CaptureRequest Executor CaptureCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>listener</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="toIntArray">
    <id>android.hardware.camera2.utils.ArrayUtils.toIntArray( List )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>list</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="contains">
    <id>android.util.Range.contains( T )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createPackageContextAsUser">
    <id>android.content.ContextWrapper.createPackageContextAsUser( String int UserHandle )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="ApkAssets">
    <id>android.content.res.ApkAssets.ApkAssets( int FileDescriptor String long long int AssetsProvider )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
      <param>
        <type>String</type>
        <name>friendlyName</name>
      </param>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>long</type>
        <name>length</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>AssetsProvider</type>
        <name>assets</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="setMaxSqlCacheSize">
    <id>android.database.sqlite.SQLiteDatabase.setMaxSqlCacheSize( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>cacheSize</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setApplicationRestrictions">
    <id>android.app.admin.DevicePolicyManager.setApplicationRestrictions( ComponentName String Bundle )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>settings</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="updateOutputConfiguration">
    <id>android.hardware.camera2.CameraCaptureSession.updateOutputConfiguration( OutputConfiguration )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>OutputConfiguration</type>
        <name>config</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="removeView">
    <id>android.widget.AdapterView.removeView( View )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>child</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="enforcePermissionAllOf">
    <id>android.os.PermissionEnforcer.enforcePermissionAllOf( String[] AttributionSource )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String[]</type>
        <name>permissions</name>
      </param>
      <param>
        <type>AttributionSource</type>
        <name>source</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isCacheBehavior">
    <id>android.os.storage.StorageManager.isCacheBehavior( File String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>path</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="dumpViewProperties">
    <id>android.view.ViewDebug.dumpViewProperties( Context Object BufferedWriter )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>Object</type>
        <name>view</name>
      </param>
      <param>
        <type>BufferedWriter</type>
        <name>out</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="clear">
    <id>android.widget.ArrayAdapter.clear( )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="executeForChangedRowCount">
    <id>android.database.sqlite.SQLiteConnection.executeForChangedRowCount( String Object[] CancellationSignal )</id>
    <exceptions>
      <e>OperationCanceledException</e>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>bindArgs</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getTraceInputStream">
    <id>android.app.ApplicationExitInfo.getTraceInputStream( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="yieldTransaction">
    <id>android.database.sqlite.SQLiteSession.yieldTransaction( long boolean CancellationSignal )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>OperationCanceledException</e>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>sleepAfterYieldDelayMillis</name>
      </param>
      <param>
        <type>boolean</type>
        <name>throwIfUnsafe</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="unregisterUsageSessionObserver">
    <id>android.app.usage.UsageStatsManager.unregisterUsageSessionObserver( int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>sessionObserverId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setEllipsize">
    <id>android.widget.EditText.setEllipsize( TruncateAt )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>TruncateAt</type>
        <name>ellipsis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createMonotoneCubicSpline">
    <id>android.util.Spline.createMonotoneCubicSpline( float[] float[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>float[]</type>
        <name>x</name>
      </param>
      <param>
        <type>float[]</type>
        <name>y</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nativeLoadFdOffsets">
    <id>android.content.res.ApkAssets.nativeLoadFdOffsets( int FileDescriptor String long long int AssetsProvider )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
      <param>
        <type>String</type>
        <name>friendlyName</name>
      </param>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>long</type>
        <name>length</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>AssetsProvider</type>
        <name>asset</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="getDimensionPixelSize">
    <id>android.content.res.TypedArray.getDimensionPixelSize( int int )</id>
    <exceptions>
      <e>RuntimeException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>int</type>
        <name>defValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isProvisioningAllowed">
    <id>android.app.admin.DevicePolicyManager.isProvisioningAllowed( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>action</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAutofilledDrawable">
    <id>android.view.View.getAutofilledDrawable( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="unsafeGetCertsWithoutVerification">
    <id>android.util.apk.ApkSignatureSchemeV3Verifier.unsafeGetCertsWithoutVerification( String )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>apkFile</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getSurroundingText">
    <id>android.view.inputmethod.InputConnectionWrapper.getSurroundingText( int int int )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>beforeLength</name>
      </param>
      <param>
        <type>int</type>
        <name>afterLength</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="digestInternalUserspace">
    <id>android.os.FileUtils.digestInternalUserspace( InputStream String )</id>
    <exceptions>
      <e>IOException</e>
      <e>NoSuchAlgorithmException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>in</name>
      </param>
      <param>
        <type>String</type>
        <name>algorithm</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="checkServerTrusted">
    <id>android.security.net.config.NetworkSecurityTrustManager.checkServerTrusted( X509Certificate[] String String )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>X509Certificate[]</type>
        <name>certs</name>
      </param>
      <param>
        <type>String</type>
        <name>authType</name>
      </param>
      <param>
        <type>String</type>
        <name>host</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="lockHardwareWideColorGamutCanvas">
    <id>android.view.Surface.lockHardwareWideColorGamutCanvas( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getLoadingProgress">
    <id>android.os.incremental.IncrementalStorage.getLoadingProgress( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getOutputMinFrameDuration">
    <id>android.hardware.camera2.params.RecommendedStreamConfigurationMap.getOutputMinFrameDuration( int Size )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
      <param>
        <type>Size</type>
        <name>size</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="findAccessibilityNodeInfoByAccessibilityId">
    <id>android.view.accessibility.DirectAccessibilityConnection.findAccessibilityNodeInfoByAccessibilityId( int long int IAccessibilityInteractionConnectionCallback int long Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>accessibilityWindowId</name>
      </param>
      <param>
        <type>long</type>
        <name>accessibilityNodeId</name>
      </param>
      <param>
        <type>int</type>
        <name>interactionId</name>
      </param>
      <param>
        <type>IAccessibilityInteractionConnectionCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>long</type>
        <name>threadId</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>arguments</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="getOutputMinFrameDuration">
    <id>android.hardware.camera2.params.RecommendedStreamConfigurationMap.getOutputMinFrameDuration( Class Size )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>klass</name>
      </param>
      <param>
        <type>Size</type>
        <name>size</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readShort">
    <id>android.view.inspector.PropertyReader.readShort( int short )</id>
    <exceptions>
      <e>PropertyTypeMismatchException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>short</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="canonicalize">
    <id>android.content.LoggingContentInterface.canonicalize( Uri )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openTypedAssetFile">
    <id>android.content.LoggingContentInterface.openTypedAssetFile( Uri String Bundle CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeTypeFilter</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>opts</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getResourcesForActivity">
    <id>android.app.ApplicationPackageManager.getResourcesForActivity( ComponentName )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>activityName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="authenticate">
    <id>android.hardware.fingerprint.FingerprintManager.authenticate( CryptoObject CancellationSignal int AuthenticationCallback Handler )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>CryptoObject</type>
        <name>crypto</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancel</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>AuthenticationCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="isFileFullyLoaded">
    <id>android.os.incremental.IncrementalStorage.isFileFullyLoaded( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="validateInternal">
    <id>android.view.inputmethod.InputContentInfo.validateInternal( Uri ClipDescription Uri boolean )</id>
    <exceptions>
      <e>InvalidParameterException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>contentUri</name>
      </param>
      <param>
        <type>ClipDescription</type>
        <name>description</name>
      </param>
      <param>
        <type>Uri</type>
        <name>linkUri</name>
      </param>
      <param>
        <type>boolean</type>
        <name>throwException</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="createAndRegisterObserverProxyLocked">
    <id>android.database.CursorToBulkCursorAdaptor.createAndRegisterObserverProxyLocked( IContentObserver )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>IContentObserver</type>
        <name>observer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getEnd">
    <id>android.text.method.WordIterator.getEnd( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>offset</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="TimeDetectorImpl">
    <id>android.app.timedetector.TimeDetectorImpl.TimeDetectorImpl( )</id>
    <exceptions>
      <e>ServiceNotFoundException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="isUninstallBlocked">
    <id>android.app.admin.DevicePolicyManager.isUninstallBlocked( ComponentName String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createDocument">
    <id>android.provider.DocumentsProvider.createDocument( String String String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>AuthenticationRequiredException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>parentDocumentId</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeType</name>
      </param>
      <param>
        <type>String</type>
        <name>displayName</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setSpan">
    <id>android.text.PrecomputedText.setSpan( Object int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>what</name>
      </param>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>end</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="loadDependenciesForSplit">
    <id>android.content.pm.split.SplitDependencyLoader.loadDependenciesForSplit( int )</id>
    <exceptions>
      <e>E</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>splitIdx</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="peekFastDrawable">
    <id>android.app.WallpaperManager.peekFastDrawable( int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>which</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getThreadScheduler">
    <id>android.os.Process.getThreadScheduler( int )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getModuleInfo">
    <id>android.app.ApplicationPackageManager.getModuleInfo( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="native_write_direct">
    <id>android.hardware.SerialPort.native_write_direct( ByteBuffer int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ByteBuffer</type>
        <name>buffer</name>
      </param>
      <param>
        <type>int</type>
        <name>length</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onEvent">
    <id>android.app.backup.BackupManagerMonitorWrapper.onEvent( Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Bundle</type>
        <name>event</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="transact">
    <id>android.os.BinderProxy.transact( int Parcel Parcel int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>code</name>
      </param>
      <param>
        <type>Parcel</type>
        <name>data</name>
      </param>
      <param>
        <type>Parcel</type>
        <name>reply</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="onCreateView">
    <id>android.view.LayoutInflater.onCreateView( View String AttributeSet )</id>
    <exceptions>
      <e>ClassNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>parent</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="prepare">
    <id>android.hardware.camera2.impl.CameraCaptureSessionImpl.prepare( int Surface )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>maxCount</name>
      </param>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="generateApkVerity">
    <id>android.util.apk.ApkSignatureSchemeV2Verifier.generateApkVerity( String ByteBufferFactory )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
      <e>DigestException</e>
      <e>SecurityException</e>
      <e>IOException</e>
      <e>NoSuchAlgorithmException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>apkPath</name>
      </param>
      <param>
        <type>ByteBufferFactory</type>
        <name>bufferFactory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="adoptShellPermissionIdentity">
    <id>android.app.UiAutomationConnection.adoptShellPermissionIdentity( int String[] )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>uid</name>
      </param>
      <param>
        <type>String[]</type>
        <name>permissions</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setBackupServiceEnabled">
    <id>android.app.admin.DevicePolicyManager.setBackupServiceEnabled( ComponentName boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>boolean</type>
        <name>enabled</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readFromXml">
    <id>android.app.admin.PackagePolicyKey.readFromXml( TypedXmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseMenu">
    <id>android.view.MenuInflater.parseMenu( XmlPullParser AttributeSet Menu )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
      <param>
        <type>Menu</type>
        <name>menu</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="capture">
    <id>android.view.ViewDebug.capture( View OutputStream View )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>root</name>
      </param>
      <param>
        <type>OutputStream</type>
        <name>clientStream</name>
      </param>
      <param>
        <type>View</type>
        <name>captureView</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="verifyPendingInstall">
    <id>android.content.pm.PackageManager.verifyPendingInstall( int int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>verificationCode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nativeGetOverlayableInfo">
    <id>android.content.res.ApkAssets.nativeGetOverlayableInfo( long String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>ptr</name>
      </param>
      <param>
        <type>String</type>
        <name>overlayableName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="ListEnabledProvidersException">
    <id>android.credentials.ListEnabledProvidersException.ListEnabledProvidersException( String Throwable )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>Throwable</type>
        <name>cause</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="tearDown">
    <id>android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl.tearDown( Surface )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="waitForProcessDeath">
    <id>android.os.Process.waitForProcessDeath( int int )</id>
    <exceptions>
      <e>InterruptedException</e>
      <e>TimeoutException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>pid</name>
      </param>
      <param>
        <type>int</type>
        <name>timeout</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getAccountCredentialsForCloning">
    <id>android.accounts.AbstractAccountAuthenticator.getAccountCredentialsForCloning( AccountAuthenticatorResponse Account )</id>
    <exceptions>
      <e>NetworkErrorException</e>
    </exceptions>
    <params>
      <param>
        <type>AccountAuthenticatorResponse</type>
        <name>response</name>
      </param>
      <param>
        <type>Account</type>
        <name>account</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="goTo">
    <id>android.widget.CalendarViewLegacyDelegate.goTo( Calendar boolean boolean boolean )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Calendar</type>
        <name>date</name>
      </param>
      <param>
        <type>boolean</type>
        <name>animate</name>
      </param>
      <param>
        <type>boolean</type>
        <name>setSelected</name>
      </param>
      <param>
        <type>boolean</type>
        <name>forceScroll</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="updateOutputConfiguration">
    <id>android.hardware.camera2.impl.CameraCaptureSessionImpl.updateOutputConfiguration( OutputConfiguration )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>OutputConfiguration</type>
        <name>config</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="checkDestroyedAndRun">
    <id>android.view.textclassifier.TextClassificationSession.checkDestroyedAndRun( Supplier )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Supplier</type>
        <name>responseSupplier</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setChecked">
    <id>android.view.accessibility.AccessibilityNodeInfo.setChecked( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>checked</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeToXml">
    <id>android.content.IntentFilter.writeToXml( XmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlSerializer</type>
        <name>serializer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="loadThumbnail">
    <id>android.content.ContentResolver.loadThumbnail( ContentInterface Uri Size CancellationSignal int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ContentInterface</type>
        <name>content</name>
      </param>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>Size</type>
        <name>size</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
      <param>
        <type>int</type>
        <name>allocator</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="onRecentTaskListUpdated">
    <id>android.app.TaskStackListener.onRecentTaskListUpdated( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="startFaceDetection">
    <id>android.hardware.Camera.startFaceDetection( )</id>
    <exceptions>
      <e>RuntimeException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createContextForSplit">
    <id>android.content.Context.createContextForSplit( String )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>splitName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="recycle">
    <id>android.content.res.TypedArray.recycle( )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="registerForNotifications">
    <id>android.os.ServiceManagerProxy.registerForNotifications( String IServiceCallback )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>IServiceCallback</type>
        <name>cb</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isActivePasswordSufficientForDeviceRequirement">
    <id>android.app.admin.DevicePolicyManager.isActivePasswordSufficientForDeviceRequirement( )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="finalize">
    <id>android.hardware.camera2.impl.CameraOfflineSessionImpl.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="endPrefixMapping">
    <id>android.content.DefaultDataHandler.endPrefixMapping( String )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>prefix</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="initializeIfNeeded">
    <id>android.view.ThreadedRenderer.initializeIfNeeded( int int AttachInfo Surface Rect )</id>
    <exceptions>
      <e>OutOfResourcesException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>width</name>
      </param>
      <param>
        <type>int</type>
        <name>height</name>
      </param>
      <param>
        <type>AttachInfo</type>
        <name>attachInfo</name>
      </param>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
      <param>
        <type>Rect</type>
        <name>surfaceInsets</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="startIntentSender">
    <id>android.app.ContextImpl.startIntentSender( IntentSender Intent int int int )</id>
    <exceptions>
      <e>IntentSender.SendIntentException</e>
    </exceptions>
    <params>
      <param>
        <type>IntentSender</type>
        <name>intent</name>
      </param>
      <param>
        <type>Intent</type>
        <name>fillInIntent</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsMask</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsValues</name>
      </param>
      <param>
        <type>int</type>
        <name>extraFlags</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getAccountRemovalAllowed">
    <id>android.accounts.AbstractAccountAuthenticator.getAccountRemovalAllowed( AccountAuthenticatorResponse Account )</id>
    <exceptions>
      <e>NetworkErrorException</e>
    </exceptions>
    <params>
      <param>
        <type>AccountAuthenticatorResponse</type>
        <name>response</name>
      </param>
      <param>
        <type>Account</type>
        <name>account</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="restorecon">
    <id>android.os.SELinux.restorecon( String )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>pathname</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="LocalServerSocket">
    <id>android.net.LocalServerSocket.LocalServerSocket( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createContextForSdkInSandbox">
    <id>android.app.ContextImpl.createContextForSdkInSandbox( ApplicationInfo int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ApplicationInfo</type>
        <name>sdkInfo</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="focusSearch">
    <id>android.view.accessibility.DirectAccessibilityConnection.focusSearch( int long int int IAccessibilityInteractionConnectionCallback long )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>accessibilityWindowId</name>
      </param>
      <param>
        <type>long</type>
        <name>accessibilityNodeId</name>
      </param>
      <param>
        <type>int</type>
        <name>direction</name>
      </param>
      <param>
        <type>int</type>
        <name>interactionId</name>
      </param>
      <param>
        <type>IAccessibilityInteractionConnectionCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>long</type>
        <name>threadId</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="close">
    <id>android.os.HidlMemory.close( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="BlackLevelPattern">
    <id>android.hardware.camera2.params.BlackLevelPattern.BlackLevelPattern( int[] )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int[]</type>
        <name>offsets</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setParcelableData">
    <id>android.view.accessibility.AccessibilityRecord.setParcelableData( Parcelable )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Parcelable</type>
        <name>parcelableData</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getRunningServices">
    <id>android.app.ActivityManager.getRunningServices( int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>maxNum</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="enforceNotSealed">
    <id>android.view.accessibility.AccessibilityNodeInfo.enforceNotSealed( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setHostname">
    <id>android.net.SSLCertificateSocketFactory.setHostname( Socket String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Socket</type>
        <name>socket</name>
      </param>
      <param>
        <type>String</type>
        <name>hostName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isLskfCaptured">
    <id>android.os.RecoverySystem.isLskfCaptured( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseBaseApkCommon">
    <id>android.content.pm.PackageParser.parseBaseApkCommon( Package Set Resources XmlResourceParser int String[] )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Package</type>
        <name>pkg</name>
      </param>
      <param>
        <type>Set</type>
        <name>acceptedTags</name>
      </param>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>String[]</type>
        <name>outError</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="addOnAccountsUpdatedListener">
    <id>android.accounts.AccountManager.addOnAccountsUpdatedListener( OnAccountsUpdateListener Handler boolean String[] )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>OnAccountsUpdateListener</type>
        <name>listener</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
      <param>
        <type>boolean</type>
        <name>updateImmediately</name>
      </param>
      <param>
        <type>String[]</type>
        <name>accountTypes</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setUserControlDisabledPackages">
    <id>android.app.admin.DevicePolicyManager.setUserControlDisabledPackages( ComponentName List )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>List</type>
        <name>packages</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="putInt8Array">
    <id>android.os.HwBlob.putInt8Array( long byte[] )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>x</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="EventLogTags">
    <id>android.util.EventLogTags.EventLogTags( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="runOnCommit">
    <id>android.app.FragmentTransaction.runOnCommit( Runnable )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Runnable</type>
        <name>runnable</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeToXml">
    <id>android.app.admin.FactoryResetProtectionPolicy.writeToXml( TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>out</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nativeWriteInputStream">
    <id>android.hardware.camera2.DngCreator.nativeWriteInputStream( OutputStream InputStream int int long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>OutputStream</type>
        <name>out</name>
      </param>
      <param>
        <type>InputStream</type>
        <name>rawStream</name>
      </param>
      <param>
        <type>int</type>
        <name>width</name>
      </param>
      <param>
        <type>int</type>
        <name>height</name>
      </param>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="addOnColorsChangedListener">
    <id>android.app.WallpaperManager.addOnColorsChangedListener( LocalWallpaperColorConsumer List int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>LocalWallpaperColorConsumer</type>
        <name>callback</name>
      </param>
      <param>
        <type>List</type>
        <name>regions</name>
      </param>
      <param>
        <type>int</type>
        <name>which</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="executeUpdateDelete">
    <id>android.database.sqlite.SQLiteStatement.executeUpdateDelete( )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createReEnrollIntent">
    <id>android.service.voice.AlwaysOnHotwordDetector.createReEnrollIntent( )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getAppMetadata">
    <id>android.app.ApplicationPackageManager.getAppMetadata( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="classifyText">
    <id>android.view.textclassifier.TextClassifier.classifyText( CharSequence int int LocaleList )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>text</name>
      </param>
      <param>
        <type>int</type>
        <name>startIndex</name>
      </param>
      <param>
        <type>int</type>
        <name>endIndex</name>
      </param>
      <param>
        <type>LocaleList</type>
        <name>defaultLocales</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="copyElements">
    <id>android.hardware.camera2.params.ColorSpaceTransform.copyElements( int[] int )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ArrayIndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int[]</type>
        <name>destination</name>
      </param>
      <param>
        <type>int</type>
        <name>offset</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="dump">
    <id>android.view.ViewDebug.dump( View boolean boolean OutputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>root</name>
      </param>
      <param>
        <type>boolean</type>
        <name>skipChildren</name>
      </param>
      <param>
        <type>boolean</type>
        <name>includeProperties</name>
      </param>
      <param>
        <type>OutputStream</type>
        <name>clientStream</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="finalize">
    <id>android.widget.ActivityChooserModel.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getResourcesForActivity">
    <id>android.content.pm.PackageManager.getResourcesForActivity( ComponentName )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>activityName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="execSQL">
    <id>android.database.sqlite.SQLiteDatabase.execSQL( String )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setText">
    <id>android.widget.TextView.setText( CharSequence )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>text</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setDate">
    <id>android.widget.CalendarView.setDate( long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>date</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="saveToXml">
    <id>android.os.PersistableBundle.saveToXml( TypedXmlSerializer )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>out</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="attemptConnectionToSecondaryZygote">
    <id>android.os.ZygoteProcess.attemptConnectionToSecondaryZygote( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="readInt32VectorAsArray">
    <id>android.os.HwParcel.readInt32VectorAsArray( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getCertInstallerPackage">
    <id>android.app.admin.DevicePolicyManager.getCertInstallerPackage( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="inflateTransition">
    <id>android.transition.TransitionInflater.inflateTransition( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>resource</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setTransactionSuccessful">
    <id>android.database.sqlite.SQLiteSession.setTransactionSuccessful( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getAllValidScorers">
    <id>android.net.NetworkScoreManager.getAllValidScorers( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="query">
    <id>android.content.ContentProviderProxy.query( AttributionSource Uri String[] Bundle ICancellationSignal )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>String[]</type>
        <name>projection</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>queryArgs</name>
      </param>
      <param>
        <type>ICancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="startPreview">
    <id>android.hardware.Camera.startPreview( )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="read">
    <id>android.util.Base64InputStream.read( byte[] int int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>b</name>
      </param>
      <param>
        <type>int</type>
        <name>off</name>
      </param>
      <param>
        <type>int</type>
        <name>len</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getFileDescriptor">
    <id>android.os.MemoryFile.getFileDescriptor( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getMarshaler">
    <id>android.hardware.camera2.marshal.MarshalRegistry.getMarshaler( TypeReference int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>TypeReference</type>
        <name>typeToken</name>
      </param>
      <param>
        <type>int</type>
        <name>nativeType</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="ignorableWhitespace">
    <id>android.text.HtmlToSpannedConverter.ignorableWhitespace( char[] int int )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>char</type>
        <name>ch</name>
      </param>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>length</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createInstance">
    <id>android.view.textservice.TextServicesManager.createInstance( Context )</id>
    <exceptions>
      <e>ServiceNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getColumnIndexOrThrow">
    <id>android.database.CursorWrapper.getColumnIndexOrThrow( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>columnName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="encodeCertificates">
    <id>android.app.ApplicationPackageManager.encodeCertificates( List )</id>
    <exceptions>
      <e>CertificateEncodingException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>certs</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="exportUnrolledArray">
    <id>android.view.ViewDebug.exportUnrolledArray( Context BufferedWriter ExportedProperty int[] String String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>BufferedWriter</type>
        <name>out</name>
      </param>
      <param>
        <type>ExportedProperty</type>
        <name>property</name>
      </param>
      <param>
        <type>int[]</type>
        <name>array</name>
      </param>
      <param>
        <type>String</type>
        <name>prefix</name>
      </param>
      <param>
        <type>String</type>
        <name>suffix</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="setResetPasswordToken">
    <id>android.app.admin.DevicePolicyManager.setResetPasswordToken( ComponentName byte[] )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>token</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onEnrollResult">
    <id>android.hardware.fingerprint.FingerprintServiceReceiver.onEnrollResult( Fingerprint int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Fingerprint</type>
        <name>fp</name>
      </param>
      <param>
        <type>int</type>
        <name>remaining</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createContextForSplit">
    <id>android.content.ContextWrapper.createContextForSplit( String )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>splitName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPackageUid">
    <id>android.content.pm.PackageManager.getPackageUid( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="ScaleGestureDetector">
    <id>android.view.ScaleGestureDetector.ScaleGestureDetector( Context OnScaleGestureListener Handler )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>OnScaleGestureListener</type>
        <name>listener</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isGeoDetectionEnabled">
    <id>android.app.time.TimeZoneConfiguration.isGeoDetectionEnabled( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="query">
    <id>android.content.IContentProvider.query( AttributionSource Uri String[] Bundle ICancellationSignal )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>String[]</type>
        <name>projection</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>queryArgs</name>
      </param>
      <param>
        <type>ICancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getCameraCharacteristics">
    <id>android.hardware.camera2.CameraManager.getCameraCharacteristics( String boolean )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>cameraId</name>
      </param>
      <param>
        <type>boolean</type>
        <name>overrideToPortrait</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addAction">
    <id>android.view.accessibility.AccessibilityNodeInfo.addAction( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>action</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="instantiateActivity">
    <id>android.app.AppComponentFactory.instantiateActivity( ClassLoader String Intent )</id>
    <exceptions>
      <e>ClassNotFoundException</e>
      <e>InstantiationException</e>
      <e>IllegalAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>ClassLoader</type>
        <name>cl</name>
      </param>
      <param>
        <type>String</type>
        <name>className</name>
      </param>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="verifySourceStampCertificate">
    <id>android.util.apk.SourceStampVerifier.verifySourceStampCertificate( ByteBuffer byte[] )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ByteBuffer</type>
        <name>sourceStampBlockData</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>sourceStampCertificateDigest</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isDeviceAdminReceiver">
    <id>android.content.pm.parsing.ApkLiteParseUtils.isDeviceAdminReceiver( XmlResourceParser boolean )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>boolean</type>
        <name>applicationHasBindDeviceAdminPermission</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="capture">
    <id>android.hardware.camera2.impl.CameraOfflineSessionImpl.capture( CaptureRequest CaptureCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="newline">
    <id>android.util.JsonWriter.newline( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="unsafeCheckOp">
    <id>android.app.AppOpsManager.unsafeCheckOp( String int String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>op</name>
      </param>
      <param>
        <type>int</type>
        <name>uid</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setContextClickable">
    <id>android.view.accessibility.AccessibilityNodeInfo.setContextClickable( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>contextClickable</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startPrefixMapping">
    <id>android.text.HtmlToSpannedConverter.startPrefixMapping( String String )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>prefix</name>
      </param>
      <param>
        <type>String</type>
        <name>uri</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="decodeLiteral">
    <id>android.util.JsonReader.decodeLiteral( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="parsePackage">
    <id>android.content.pm.PackageParser.parsePackage( File int boolean )</id>
    <exceptions>
      <e>PackageParserException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>packageFile</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>boolean</type>
        <name>useCaches</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="endArray">
    <id>android.util.JsonReader.endArray( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="obtainStyledAttributes">
    <id>android.content.Context.obtainStyledAttributes( int int[] )</id>
    <exceptions>
      <e>Resources.NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>resid</name>
      </param>
      <param>
        <type>int[]</type>
        <name>attrs</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createAlwaysOnHotwordDetector">
    <id>android.service.voice.VoiceInteractionService.createAlwaysOnHotwordDetector( String Locale PersistableBundle SharedMemory Callback )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>keyphrase</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
      <param>
        <type>PersistableBundle</type>
        <name>options</name>
      </param>
      <param>
        <type>SharedMemory</type>
        <name>sharedMemory</name>
      </param>
      <param>
        <type>Callback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="imageFormatToDataspace">
    <id>android.hardware.camera2.params.StreamConfigurationMap.imageFormatToDataspace( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getOffsetForIndex">
    <id>android.hardware.camera2.params.BlackLevelPattern.getOffsetForIndex( int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>column</name>
      </param>
      <param>
        <type>int</type>
        <name>row</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="startLoading">
    <id>android.os.incremental.IncrementalFileStorages.startLoading( DataLoaderParams IDataLoaderStatusListener StorageHealthCheckParams IStorageHealthListener PerUidReadTimeouts[] )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataLoaderParams</type>
        <name>dataLoaderParams</name>
      </param>
      <param>
        <type>IDataLoaderStatusListener</type>
        <name>statusListener</name>
      </param>
      <param>
        <type>StorageHealthCheckParams</type>
        <name>healthCheckParams</name>
      </param>
      <param>
        <type>IStorageHealthListener</type>
        <name>healthListener</name>
      </param>
      <param>
        <type>PerUidReadTimeouts[]</type>
        <name>perUidReadTimeouts</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="fillBuffer">
    <id>android.util.JsonReader.fillBuffer( int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>minimum</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setOnBackInvokedCallbackInfo">
    <id>android.view.WindowlessWindowManager.setOnBackInvokedCallbackInfo( IWindow OnBackInvokedCallbackInfo )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>IWindow</type>
        <name>iWindow</name>
      </param>
      <param>
        <type>OnBackInvokedCallbackInfo</type>
        <name>callbackInfo</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="openInputStream">
    <id>android.content.ContentResolver.openInputStream( Uri )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPackageUidAsUser">
    <id>android.content.pm.PackageManager.getPackageUidAsUser( String int int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="startIntentSender">
    <id>android.content.ContextWrapper.startIntentSender( IntentSender Intent int int int )</id>
    <exceptions>
      <e>IntentSender.SendIntentException</e>
    </exceptions>
    <params>
      <param>
        <type>IntentSender</type>
        <name>intent</name>
      </param>
      <param>
        <type>Intent</type>
        <name>fillInIntent</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsMask</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsValues</name>
      </param>
      <param>
        <type>int</type>
        <name>extraFlags</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="readFromXml">
    <id>android.content.pm.IntentFilterVerificationInfo.readFromXml( TypedXmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="inflateTransitionManager">
    <id>android.transition.TransitionInflater.inflateTransitionManager( int ViewGroup )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>resource</name>
      </param>
      <param>
        <type>ViewGroup</type>
        <name>sceneRoot</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="switchToOffline">
    <id>android.hardware.camera2.impl.CameraCaptureSessionImpl.switchToOffline( Collection Executor CameraOfflineSessionCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>Collection</type>
        <name>offlineOutputs</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>CameraOfflineSessionCallback</type>
        <name>listener</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="skip">
    <id>android.util.proto.ProtoInputStream.skip( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getMtePolicy">
    <id>android.app.admin.DevicePolicyManager.getMtePolicy( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="startActivityAsUser">
    <id>android.content.Context.startActivityAsUser( Intent Bundle UserHandle )</id>
    <exceptions>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>userId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createDocument">
    <id>android.provider.DocumentsContract.createDocument( ContentResolver Uri String String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ContentResolver</type>
        <name>content</name>
      </param>
      <param>
        <type>Uri</type>
        <name>parentDocumentUri</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeType</name>
      </param>
      <param>
        <type>String</type>
        <name>displayName</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="accept">
    <id>android.net.LocalServerSocket.accept( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="updateMccMncConfiguration">
    <id>android.app.ActivityManager.updateMccMncConfiguration( String String )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>mcc</name>
      </param>
      <param>
        <type>String</type>
        <name>mnc</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPermittedInputMethods">
    <id>android.app.admin.DevicePolicyManager.getPermittedInputMethods( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="verifyHostname">
    <id>android.net.SSLCertificateSocketFactory.verifyHostname( Socket String )</id>
    <exceptions>
      <e>SSLPeerUnverifiedException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Socket</type>
        <name>socket</name>
      </param>
      <param>
        <type>String</type>
        <name>hostname</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getNpnSelectedProtocol">
    <id>android.net.SSLCertificateSocketFactory.getNpnSelectedProtocol( Socket )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Socket</type>
        <name>socket</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="unloadNanoApp">
    <id>android.hardware.location.ContextHubManager.unloadNanoApp( ContextHubInfo long )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>ContextHubInfo</type>
        <name>hubInfo</name>
      </param>
      <param>
        <type>long</type>
        <name>nanoAppId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="shutdownInput">
    <id>android.net.LocalSocketImpl.shutdownInput( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createSpecializedTypeReference">
    <id>android.hardware.camera2.utils.TypeReference.createSpecializedTypeReference( Type )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Type</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setGlobalPrivateDnsModeSpecifiedHost">
    <id>android.app.admin.DevicePolicyManager.setGlobalPrivateDnsModeSpecifiedHost( ComponentName String )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>privateDnsHost</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createSocketPair">
    <id>android.os.ParcelFileDescriptor.createSocketPair( int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="finalize">
    <id>android.hardware.usb.UsbDeviceConnection.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getColorStateList">
    <id>android.content.res.Resources.getColorStateList( int Theme )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseLocaleConfig">
    <id>android.app.LocaleConfig.parseLocaleConfig( XmlResourceParser Resources )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="registerAppUsageLimitObserver">
    <id>android.app.usage.UsageStatsManager.registerAppUsageLimitObserver( int String[] Duration Duration PendingIntent )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>observerId</name>
      </param>
      <param>
        <type>String[]</type>
        <name>observedEntities</name>
      </param>
      <param>
        <type>Duration</type>
        <name>timeLimit</name>
      </param>
      <param>
        <type>Duration</type>
        <name>timeUsed</name>
      </param>
      <param>
        <type>PendingIntent</type>
        <name>callbackIntent</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="sendIntent">
    <id>android.content.IntentSender.sendIntent( Context int Intent OnFinished Handler String Bundle )</id>
    <exceptions>
      <e>SendIntentException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>int</type>
        <name>code</name>
      </param>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
      <param>
        <type>OnFinished</type>
        <name>onFinished</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
      <param>
        <type>String</type>
        <name>requiredPermission</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="getActivityInfo">
    <id>android.app.ApplicationPackageManager.getActivityInfo( ComponentName int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>className</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="initializeCaptureRequest">
    <id>android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl.initializeCaptureRequest( CameraDevice Request HashMap )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CameraDevice</type>
        <name>cameraDevice</name>
      </param>
      <param>
        <type>Request</type>
        <name>request</name>
      </param>
      <param>
        <type>HashMap</type>
        <name>surfaceIdMap</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parseHalf">
    <id>android.util.Half.parseHalf( String )</id>
    <exceptions>
      <e>NumberFormatException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>s</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onBackup">
    <id>android.app.backup.BackupAgent.onBackup( ParcelFileDescriptor BackupDataOutput ParcelFileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>oldState</name>
      </param>
      <param>
        <type>BackupDataOutput</type>
        <name>data</name>
      </param>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>newState</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setKeyguardDisabled">
    <id>android.app.admin.DevicePolicyManager.setKeyguardDisabled( ComponentName boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>boolean</type>
        <name>disabled</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readParcelable">
    <id>android.os.Parcel.readParcelable( ClassLoader Class )</id>
    <exceptions>
      <e>BadParcelableException</e>
    </exceptions>
    <params>
      <param>
        <type>ClassLoader</type>
        <name>loader</name>
      </param>
      <param>
        <type>Class</type>
        <name>clazz</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="stopSmoothZoom">
    <id>android.hardware.Camera.stopSmoothZoom( )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="deleteSurroundingText">
    <id>android.view.inputmethod.InputConnectionWrapper.deleteSurroundingText( int int )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>beforeLength</name>
      </param>
      <param>
        <type>int</type>
        <name>afterLength</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="applyBatch">
    <id>android.content.ContentInterface.applyBatch( String ArrayList )</id>
    <exceptions>
      <e>RemoteException</e>
      <e>OperationApplicationException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>authority</name>
      </param>
      <param>
        <type>ArrayList</type>
        <name>operations</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getValue">
    <id>android.content.res.TypedArray.getValue( int TypedValue )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>TypedValue</type>
        <name>outValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isFileEligibleForRestore">
    <id>android.app.backup.BackupAgent.isFileEligibleForRestore( File )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>destination</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getUserRestrictionsGlobally">
    <id>android.app.admin.DevicePolicyManager.getUserRestrictionsGlobally( )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getType">
    <id>android.content.IContentProvider.getType( Uri )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="Half">
    <id>android.util.Half.Half( String )</id>
    <exceptions>
      <e>NumberFormatException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setTouchDelegateInfo">
    <id>android.view.accessibility.AccessibilityNodeInfo.setTouchDelegateInfo( TouchDelegateInfo )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>TouchDelegateInfo</type>
        <name>delegatedInfo</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openTypedAssetFile">
    <id>android.provider.DocumentsProvider.openTypedAssetFile( Uri String Bundle CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeTypeFilter</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>opts</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="closeSocket">
    <id>android.net.util.SocketUtils.closeSocket( FileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getBytesForBackup">
    <id>android.net.NetworkPolicy.getBytesForBackup( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="reportFullscreenMode">
    <id>android.view.inputmethod.InputConnectionWrapper.reportFullscreenMode( boolean )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>enabled</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="verify">
    <id>android.util.apk.ApkSignatureSchemeV3Verifier.verify( RandomAccessFile boolean )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>RandomAccessFile</type>
        <name>apk</name>
      </param>
      <param>
        <type>boolean</type>
        <name>verifyIntegrity</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="loadAnimator">
    <id>android.animation.AnimatorInflater.loadAnimator( Context int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="read">
    <id>android.content.pm.LimitedLengthInputStream.read( byte[] int int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>buffer</name>
      </param>
      <param>
        <type>int</type>
        <name>offset</name>
      </param>
      <param>
        <type>int</type>
        <name>byteCount</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createWebLinkIntent">
    <id>android.provider.DocumentsProvider.createWebLinkIntent( String Bundle )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>AuthenticationRequiredException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>documentId</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="acquireConnection">
    <id>android.database.sqlite.SQLiteConnectionPool.acquireConnection( String int CancellationSignal )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>OperationCanceledException</e>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>int</type>
        <name>connectionFlags</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="detachSystemDataTransport">
    <id>android.companion.CompanionDeviceService.detachSystemDataTransport( int )</id>
    <exceptions>
      <e>DeviceNotAssociatedException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>associationId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="insert">
    <id>android.content.ContentInsertHandler.insert( ContentResolver String )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>ContentResolver</type>
        <name>contentResolver</name>
      </param>
      <param>
        <type>String</type>
        <name>in</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readIntEnum">
    <id>android.view.inspector.PropertyReader.readIntEnum( int int )</id>
    <exceptions>
      <e>PropertyTypeMismatchException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="ClearCredentialStateException">
    <id>android.credentials.ClearCredentialStateException.ClearCredentialStateException( String String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>String</type>
        <name>message</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="requestQuietModeEnabled">
    <id>android.os.UserManager.requestQuietModeEnabled( boolean UserHandle int )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>enableQuietMode</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>userHandle</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parseCommandLineArg">
    <id>android.app.time.ExternalTimeSuggestion.parseCommandLineArg( ShellCommand )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ShellCommand</type>
        <name>cmd</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getFanSpeeds">
    <id>android.os.HardwarePropertiesManager.getFanSpeeds( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setAnalogForced">
    <id>android.hardware.radio.RadioTuner.setAnalogForced( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>isForced</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getUidForSharedUser">
    <id>android.content.pm.PackageManager.getUidForSharedUser( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sharedUserName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="finalize">
    <id>android.view.SurfaceSession.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createHighSpeedRequestList">
    <id>android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession.createHighSpeedRequestList( CaptureRequest )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setFocused">
    <id>android.view.accessibility.AccessibilityNodeInfo.setFocused( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>focused</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openFileInput">
    <id>android.service.voice.VisualQueryDetectionService.openFileInput( String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>filename</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="InputMethodInfo">
    <id>android.view.inputmethod.InputMethodInfo.InputMethodInfo( Context ResolveInfo List )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>ResolveInfo</type>
        <name>service</name>
      </param>
      <param>
        <type>List</type>
        <name>additionalSubtypes</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="calculateRankingScore">
    <id>android.net.ScoredNetwork.calculateRankingScore( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>rssi</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="contains">
    <id>android.util.Range.contains( Range )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>Range</type>
        <name>range</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="loadAuthor">
    <id>android.app.WallpaperInfo.loadAuthor( PackageManager )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>PackageManager</type>
        <name>pm</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getWallpaperInfo">
    <id>android.app.WallpaperManager.getWallpaperInfo( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>which</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readInt32Vector">
    <id>android.os.HwParcel.readInt32Vector( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getEntity">
    <id>android.view.textclassifier.TextClassification.getEntity( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="save">
    <id>android.gesture.GestureStore.save( OutputStream boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>OutputStream</type>
        <name>stream</name>
      </param>
      <param>
        <type>boolean</type>
        <name>closeStream</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onCreateItem">
    <id>android.preference.GenericInflater.onCreateItem( String AttributeSet )</id>
    <exceptions>
      <e>ClassNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onActivityForcedResizable">
    <id>android.app.TaskStackListener.onActivityForcedResizable( String int int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>taskId</name>
      </param>
      <param>
        <type>int</type>
        <name>reason</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="onTaskProfileLocked">
    <id>android.app.TaskStackListener.onTaskProfileLocked( RunningTaskInfo )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>RunningTaskInfo</type>
        <name>taskInfo</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readBoolVectorAsArray">
    <id>android.os.HwParcel.readBoolVectorAsArray( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="initialize">
    <id>android.view.ThreadedRenderer.initialize( Surface )</id>
    <exceptions>
      <e>OutOfResourcesException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="CrateInfo">
    <id>android.os.storage.CrateInfo.CrateInfo( CharSequence long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>label</name>
      </param>
      <param>
        <type>long</type>
        <name>expiration</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="releaseProjection">
    <id>android.app.UiModeManager.releaseProjection( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>projectionType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="previewHandwritingGesture">
    <id>android.view.inputmethod.InputConnectionWrapper.previewHandwritingGesture( PreviewableHandwritingGesture CancellationSignal )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>PreviewableHandwritingGesture</type>
        <name>gesture</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getWidth">
    <id>android.text.PrecomputedText.getWidth( int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="decode">
    <id>android.util.Base64.decode( String int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>str</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseIntent">
    <id>android.content.Intent.parseIntent( Resources XmlPullParser AttributeSet )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>resources</name>
      </param>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="send">
    <id>android.app.PendingIntent.send( Context int Intent OnFinished Handler )</id>
    <exceptions>
      <e>CanceledException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>int</type>
        <name>code</name>
      </param>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
      <param>
        <type>OnFinished</type>
        <name>onFinished</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="writeToXmlAttributeBytesHex">
    <id>android.content.pm.Signature.writeToXmlAttributeBytesHex( TypedXmlSerializer String String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>out</name>
      </param>
      <param>
        <type>String</type>
        <name>namespace</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setDisplayOrientation">
    <id>android.hardware.Camera.setDisplayOrientation( int )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>degrees</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getByteBuffer">
    <id>android.util.apk.ApkSigningBlockUtils.getByteBuffer( ByteBuffer int )</id>
    <exceptions>
      <e>BufferUnderflowException</e>
    </exceptions>
    <params>
      <param>
        <type>ByteBuffer</type>
        <name>source</name>
      </param>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="start">
    <id>android.os.Process.start( String String int int int[] int int int String String String String String String int boolean long[] Map Map boolean boolean String[] )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>processClass</name>
      </param>
      <param>
        <type>String</type>
        <name>niceName</name>
      </param>
      <param>
        <type>int</type>
        <name>uid</name>
      </param>
      <param>
        <type>int</type>
        <name>gid</name>
      </param>
      <param>
        <type>int[]</type>
        <name>gids</name>
      </param>
      <param>
        <type>int</type>
        <name>runtimeFlags</name>
      </param>
      <param>
        <type>int</type>
        <name>mountExternal</name>
      </param>
      <param>
        <type>int</type>
        <name>targetSdkVersion</name>
      </param>
      <param>
        <type>String</type>
        <name>seInfo</name>
      </param>
      <param>
        <type>String</type>
        <name>abi</name>
      </param>
      <param>
        <type>String</type>
        <name>instructionSet</name>
      </param>
      <param>
        <type>String</type>
        <name>appDataDir</name>
      </param>
      <param>
        <type>String</type>
        <name>invokeWith</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>zygotePolicyFlags</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isTopApp</name>
      </param>
      <param>
        <type>long[]</type>
        <name>disabledCompatChanges</name>
      </param>
      <param>
        <type>Map</type>
        <name>pkgDataInfoMap</name>
      </param>
      <param>
        <type>Map</type>
        <name>whitelistedDataInfoMap</name>
      </param>
      <param>
        <type>boolean</type>
        <name>bindMountAppsData</name>
      </param>
      <param>
        <type>boolean</type>
        <name>bindMountAppStorageDirs</name>
      </param>
      <param>
        <type>String[]</type>
        <name>zygoteArgs</name>
      </param>
    </params>
    <arity>22</arity>
  </method>
  <method name="hasGrantedPolicy">
    <id>android.app.admin.DevicePolicyManager.hasGrantedPolicy( ComponentName int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>int</type>
        <name>usesPolicy</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readNativeHandle">
    <id>android.os.HwParcel.readNativeHandle( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="process">
    <id>android.hardware.camera2.impl.CameraExtensionForwardProcessor.process( ParcelImage TotalCaptureResult IProcessResultImpl )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>ParcelImage</type>
        <name>image</name>
      </param>
      <param>
        <type>TotalCaptureResult</type>
        <name>totalCaptureResult</name>
      </param>
      <param>
        <type>IProcessResultImpl</type>
        <name>resultCallback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="updateExternalStorageFileQuotaType">
    <id>android.os.storage.StorageManager.updateExternalStorageFileQuotaType( File int )</id>
    <exceptions>
      <e>IOException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>path</name>
      </param>
      <param>
        <type>int</type>
        <name>quotaType</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="stopRepeating">
    <id>android.hardware.camera2.CameraCaptureSession.stopRepeating( )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="WebAddress">
    <id>android.net.WebAddress.WebAddress( String )</id>
    <exceptions>
      <e>ParseException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>address</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="queryDocument">
    <id>android.provider.DocumentsProvider.queryDocument( String String[] )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>AuthenticationRequiredException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>documentId</name>
      </param>
      <param>
        <type>String[]</type>
        <name>projection</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="startActivitiesAsUser">
    <id>android.content.Context.startActivitiesAsUser( Intent[] Bundle UserHandle )</id>
    <exceptions>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent[]</type>
        <name>intents</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>userHandle</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="copy">
    <id>android.os.FileUtils.copy( File File )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>from</name>
      </param>
      <param>
        <type>File</type>
        <name>to</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="registerAppUsageObserver">
    <id>android.app.usage.UsageStatsManager.registerAppUsageObserver( int String[] long TimeUnit PendingIntent )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>observerId</name>
      </param>
      <param>
        <type>String[]</type>
        <name>observedEntities</name>
      </param>
      <param>
        <type>long</type>
        <name>timeLimit</name>
      </param>
      <param>
        <type>TimeUnit</type>
        <name>timeUnit</name>
      </param>
      <param>
        <type>PendingIntent</type>
        <name>callbackIntent</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="throwAnyImpl">
    <id>android.hardware.camera2.utils.UncheckedThrow.throwAnyImpl( Throwable )</id>
    <exceptions>
      <e>T</e>
    </exceptions>
    <params>
      <param>
        <type>Throwable</type>
        <name>e</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getManifestBytes">
    <id>android.util.apk.SourceStampVerifier.getManifestBytes( StrictJarFile )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>StrictJarFile</type>
        <name>apkJar</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="cancelRequest">
    <id>android.hardware.camera2.impl.ICameraDeviceUserWrapper.cancelRequest( int )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>requestId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="StreamConfigurationMap">
    <id>android.hardware.camera2.params.StreamConfigurationMap.StreamConfigurationMap( StreamConfiguration[] StreamConfigurationDuration[] StreamConfigurationDuration[] StreamConfiguration[] StreamConfigurationDuration[] StreamConfigurationDuration[] StreamConfiguration[] StreamConfigurationDuration[] StreamConfigurationDuration[] StreamConfiguration[] StreamConfigurationDuration[] StreamConfigurationDuration[] StreamConfiguration[] StreamConfigurationDuration[] StreamConfigurationDuration[] HighSpeedVideoConfiguration[] ReprocessFormatsMap boolean )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>StreamConfiguration[]</type>
        <name>configurations</name>
      </param>
      <param>
        <type>StreamConfigurationDuration[]</type>
        <name>minFrameDurations</name>
      </param>
      <param>
        <type>StreamConfigurationDuration[]</type>
        <name>stallDurations</name>
      </param>
      <param>
        <type>StreamConfiguration[]</type>
        <name>depthConfigurations</name>
      </param>
      <param>
        <type>StreamConfigurationDuration[]</type>
        <name>depthMinFrameDurations</name>
      </param>
      <param>
        <type>StreamConfigurationDuration[]</type>
        <name>depthStallDurations</name>
      </param>
      <param>
        <type>StreamConfiguration[]</type>
        <name>dynamicDepthConfigurations</name>
      </param>
      <param>
        <type>StreamConfigurationDuration[]</type>
        <name>dynamicDepthMinFrameDurations</name>
      </param>
      <param>
        <type>StreamConfigurationDuration[]</type>
        <name>dynamicDepthStallDurations</name>
      </param>
      <param>
        <type>StreamConfiguration[]</type>
        <name>heicConfigurations</name>
      </param>
      <param>
        <type>StreamConfigurationDuration[]</type>
        <name>heicMinFrameDurations</name>
      </param>
      <param>
        <type>StreamConfigurationDuration[]</type>
        <name>heicStallDurations</name>
      </param>
      <param>
        <type>StreamConfiguration[]</type>
        <name>jpegRConfigurations</name>
      </param>
      <param>
        <type>StreamConfigurationDuration[]</type>
        <name>jpegRMinFrameDurations</name>
      </param>
      <param>
        <type>StreamConfigurationDuration[]</type>
        <name>jpegRStallDurations</name>
      </param>
      <param>
        <type>HighSpeedVideoConfiguration[]</type>
        <name>highSpeedVideoConfigurations</name>
      </param>
      <param>
        <type>ReprocessFormatsMap</type>
        <name>inputOutputFormatsMap</name>
      </param>
      <param>
        <type>boolean</type>
        <name>listHighResolution</name>
      </param>
    </params>
    <arity>18</arity>
  </method>
  <method name="getApplicationInfoAsUser">
    <id>android.content.pm.PackageManager.getApplicationInfoAsUser( String int UserHandle )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setUsbDataSignalingEnabled">
    <id>android.app.admin.DevicePolicyManager.setUsbDataSignalingEnabled( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>enabled</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="captureBurst">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.captureBurst( List CaptureCallback Executor )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>requests</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="copyInternalUserspace">
    <id>android.os.FileUtils.copyInternalUserspace( InputStream OutputStream CancellationSignal Executor ProgressListener )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>in</name>
      </param>
      <param>
        <type>OutputStream</type>
        <name>out</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>ProgressListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="readBoolean">
    <id>android.util.proto.ProtoInputStream.readBoolean( long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>fieldId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readFromXml">
    <id>android.app.admin.PackagePermissionPolicyKey.readFromXml( TypedXmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createReprocessableCaptureSession">
    <id>android.hardware.camera2.CameraDevice.createReprocessableCaptureSession( InputConfiguration List StateCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>InputConfiguration</type>
        <name>inputConfig</name>
      </param>
      <param>
        <type>List</type>
        <name>outputs</name>
      </param>
      <param>
        <type>StateCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="serialize">
    <id>android.gesture.Gesture.serialize( DataOutputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataOutputStream</type>
        <name>out</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onChallengeGenerated">
    <id>android.hardware.fingerprint.FingerprintServiceReceiver.onChallengeGenerated( int int long )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>sensorId</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
      <param>
        <type>long</type>
        <name>challenge</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="definesOverlayable">
    <id>android.content.res.ApkAssets.definesOverlayable( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="readColor">
    <id>android.view.inspector.PropertyReader.readColor( int long )</id>
    <exceptions>
      <e>PropertyTypeMismatchException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>long</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getFloat">
    <id>android.content.SharedPreferences.getFloat( String float )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>key</name>
      </param>
      <param>
        <type>float</type>
        <name>defValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="writeAsXml">
    <id>android.content.pm.XmlSerializerAndParser.writeAsXml( T TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>item</name>
      </param>
      <param>
        <type>TypedXmlSerializer</type>
        <name>out</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="checkOp">
    <id>android.app.AppOpsManager.checkOp( int int String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>op</name>
      </param>
      <param>
        <type>int</type>
        <name>uid</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setBitmap">
    <id>android.app.DisabledWallpaperManager.setBitmap( Bitmap Rect boolean int int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Bitmap</type>
        <name>fullImage</name>
      </param>
      <param>
        <type>Rect</type>
        <name>visibleCropHint</name>
      </param>
      <param>
        <type>boolean</type>
        <name>allowBackup</name>
      </param>
      <param>
        <type>int</type>
        <name>which</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="hasSignature">
    <id>android.util.apk.ApkSignatureSchemeV3Verifier.hasSignature( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>apkFile</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="finalize">
    <id>android.os.UpdateLock.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setPassword">
    <id>android.view.accessibility.AccessibilityRecord.setPassword( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>isPassword</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="deriveDimension">
    <id>android.util.TypedValue.deriveDimension( int float DisplayMetrics )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>unitToConvertTo</name>
      </param>
      <param>
        <type>float</type>
        <name>pixelValue</name>
      </param>
      <param>
        <type>DisplayMetrics</type>
        <name>metrics</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="open">
    <id>android.content.res.AssetManager.open( String int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fileName</name>
      </param>
      <param>
        <type>int</type>
        <name>accessMode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="openTypedAssetFile">
    <id>android.provider.DocumentsProvider.openTypedAssetFile( Uri String Bundle )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeTypeFilter</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>opts</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="outputDisplayList">
    <id>android.view.ViewDebug.outputDisplayList( View String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>root</name>
      </param>
      <param>
        <type>String</type>
        <name>parameter</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="wipeData">
    <id>android.app.admin.DevicePolicyManager.wipeData( int CharSequence )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>reason</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="PersistableBundle">
    <id>android.os.PersistableBundle.PersistableBundle( ArrayMap boolean )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ArrayMap</type>
        <name>map</name>
      </param>
      <param>
        <type>boolean</type>
        <name>throwException</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDayOfWeekString">
    <id>android.text.format.DateUtils.getDayOfWeekString( int int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>dayOfWeek</name>
      </param>
      <param>
        <type>int</type>
        <name>abbrev</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nextString">
    <id>android.util.JsonReader.nextString( )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setServiceInfo">
    <id>android.app.UiAutomation.setServiceInfo( AccessibilityServiceInfo )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>AccessibilityServiceInfo</type>
        <name>info</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openTypedDocument">
    <id>android.provider.DocumentsProvider.openTypedDocument( String String Bundle CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>AuthenticationRequiredException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>documentId</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeTypeFilter</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>opts</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="onActivityRestartAttempt">
    <id>android.app.TaskStackListener.onActivityRestartAttempt( RunningTaskInfo boolean boolean boolean )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>RunningTaskInfo</type>
        <name>task</name>
      </param>
      <param>
        <type>boolean</type>
        <name>homeTaskVisible</name>
      </param>
      <param>
        <type>boolean</type>
        <name>clearedTask</name>
      </param>
      <param>
        <type>boolean</type>
        <name>wasVisible</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getResultTimed">
    <id>android.util.TimedRemoteCaller.getResultTimed( int )</id>
    <exceptions>
      <e>TimeoutException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>sequence</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="presentPrompt">
    <id>android.security.ConfirmationPrompt.presentPrompt( Executor ConfirmationCallback )</id>
    <exceptions>
      <e>ConfirmationAlreadyPresentingException</e>
      <e>ConfirmationNotAvailableException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>ConfirmationCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="generatePackageInfo">
    <id>android.content.pm.PackageParser.generatePackageInfo( Package ApexInfo int )</id>
    <exceptions>
      <e>PackageParserException</e>
    </exceptions>
    <params>
      <param>
        <type>Package</type>
        <name>pkg</name>
      </param>
      <param>
        <type>ApexInfo</type>
        <name>apexInfo</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getReceiverInfo">
    <id>android.app.ApplicationPackageManager.getReceiverInfo( ComponentName ComponentInfoFlags )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>className</name>
      </param>
      <param>
        <type>ComponentInfoFlags</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="installExistingPackageAsUser">
    <id>android.content.pm.PackageManager.installExistingPackageAsUser( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="GestureDetector">
    <id>android.view.GestureDetector.GestureDetector( Context OnGestureListener )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>OnGestureListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getTorchStrengthLevel">
    <id>android.hardware.camera2.CameraManager.getTorchStrengthLevel( String )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>cameraId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="deactivate">
    <id>android.database.IBulkCursor.deactivate( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="readInt16Vector">
    <id>android.os.HwParcel.readInt16Vector( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setBooleanProperty">
    <id>android.view.accessibility.AccessibilityNodeInfo.setBooleanProperty( int boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>property</name>
      </param>
      <param>
        <type>boolean</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getProvider">
    <id>android.provider.FontsContract.getProvider( PackageManager FontRequest )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>PackageManager</type>
        <name>packageManager</name>
      </param>
      <param>
        <type>FontRequest</type>
        <name>request</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getQuantityString">
    <id>android.content.res.Resources.getQuantityString( int int Object[] )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>quantity</name>
      </param>
      <param>
        <type>Object</type>
        <name>formatArgs</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="bindSocketToInterface">
    <id>android.net.util.SocketUtils.bindSocketToInterface( FileDescriptor String )</id>
    <exceptions>
      <e>ErrnoException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>socket</name>
      </param>
      <param>
        <type>String</type>
        <name>iface</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setStream">
    <id>android.app.DisabledWallpaperManager.setStream( InputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>bitmapData</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getShortcuts">
    <id>android.content.pm.ShortcutManager.getShortcuts( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>matchFlags</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="RangeTemplate">
    <id>android.service.controls.templates.RangeTemplate.RangeTemplate( String float float float float CharSequence )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>templateId</name>
      </param>
      <param>
        <type>float</type>
        <name>minValue</name>
      </param>
      <param>
        <type>float</type>
        <name>maxValue</name>
      </param>
      <param>
        <type>float</type>
        <name>currentValue</name>
      </param>
      <param>
        <type>float</type>
        <name>stepValue</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>formatString</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="createContextForSdkInSandbox">
    <id>android.content.ContextWrapper.createContextForSdkInSandbox( ApplicationInfo int )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ApplicationInfo</type>
        <name>sdkInfo</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="delete">
    <id>android.content.ContentProvider.delete( Uri String String[] )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>selection</name>
      </param>
      <param>
        <type>String[]</type>
        <name>selectionArgs</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="applyBatch">
    <id>android.content.ContentResolver.applyBatch( String ArrayList )</id>
    <exceptions>
      <e>RemoteException</e>
      <e>OperationApplicationException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>authority</name>
      </param>
      <param>
        <type>ArrayList</type>
        <name>operations</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setLocation">
    <id>android.hardware.camera2.DngCreator.setLocation( Location )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Location</type>
        <name>location</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="bulkInsert">
    <id>android.content.ContentInterface.bulkInsert( Uri ContentValues[] )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>ContentValues[]</type>
        <name>initialValues</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="finalizeOutputConfigurations">
    <id>android.hardware.camera2.impl.CameraOfflineSessionImpl.finalizeOutputConfigurations( List )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>outputConfigs</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="close">
    <id>android.net.http.HttpResponseCache.close( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="finalize">
    <id>android.os.BatteryUsageStats.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="start">
    <id>android.util.proto.ProtoInputStream.start( long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>fieldId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="transact">
    <id>android.os.HwRemoteBinder.transact( int HwParcel HwParcel int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>code</name>
      </param>
      <param>
        <type>HwParcel</type>
        <name>request</name>
      </param>
      <param>
        <type>HwParcel</type>
        <name>reply</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="read">
    <id>android.util.jar.StrictJarManifest.read( byte[] )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>buf</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="removeKeyPair">
    <id>android.app.admin.DevicePolicyManager.removeKeyPair( ComponentName String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>alias</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="insert">
    <id>android.content.ContentProvider.insert( Uri ContentValues Bundle )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>ContentValues</type>
        <name>values</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="Surface">
    <id>android.view.Surface.Surface( SurfaceTexture )</id>
    <exceptions>
      <e>OutOfResourcesException</e>
    </exceptions>
    <params>
      <param>
        <type>SurfaceTexture</type>
        <name>surfaceTexture</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readFont">
    <id>android.content.res.FontResourcesParser.readFont( XmlPullParser Resources )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>Resources</type>
        <name>resources</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getTransport">
    <id>android.os.HwNoService.getTransport( String String )</id>
    <exceptions>
      <e>android.os.RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fqName</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nativeLockCanvas">
    <id>android.view.Surface.nativeLockCanvas( long Canvas Rect )</id>
    <exceptions>
      <e>OutOfResourcesException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>nativeObject</name>
      </param>
      <param>
        <type>Canvas</type>
        <name>canvas</name>
      </param>
      <param>
        <type>Rect</type>
        <name>dirty</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createFromXmlInner">
    <id>android.content.res.GradientColor.createFromXmlInner( Resources XmlPullParser AttributeSet Theme )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>r</name>
      </param>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="openFd">
    <id>android.content.res.AssetManager.openFd( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fileName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readIntentFilterFromXml">
    <id>android.app.admin.IntentFilterPolicyKey.readIntentFilterFromXml( TypedXmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="native_get_size">
    <id>android.os.MemoryFile.native_get_size( FileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="unlink">
    <id>android.os.incremental.IncrementalStorage.unlink( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setRepeatingRequest">
    <id>android.hardware.camera2.impl.CameraOfflineSessionImpl.setRepeatingRequest( CaptureRequest CaptureCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setInputExtras">
    <id>android.widget.TextView.setInputExtras( int )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>xmlResId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseRational">
    <id>android.util.Rational.parseRational( String )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>NumberFormatException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>string</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="compare">
    <id>android.text.format.Time.compare( Time Time )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Time</type>
        <name>a</name>
      </param>
      <param>
        <type>Time</type>
        <name>b</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readFromXml">
    <id>android.app.admin.AccountTypePolicyKey.readFromXml( TypedXmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="CreateCredentialRequest">
    <id>android.credentials.CreateCredentialRequest.CreateCredentialRequest( String Bundle Bundle boolean boolean String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>credentialData</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>candidateQueryData</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isSystemProviderRequired</name>
      </param>
      <param>
        <type>boolean</type>
        <name>alwaysSendAppInfoToProvider</name>
      </param>
      <param>
        <type>String</type>
        <name>origin</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="finalize">
    <id>android.hardware.camera2.impl.CameraCaptureSessionImpl.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getComponent">
    <id>android.hardware.camera2.params.RggbChannelVector.getComponent( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>colorChannel</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setBitmap">
    <id>android.app.DisabledWallpaperManager.setBitmap( Bitmap )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Bitmap</type>
        <name>bitmap</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="VirtualDeviceInternal">
    <id>android.companion.virtual.VirtualDeviceInternal.VirtualDeviceInternal( IVirtualDeviceManager Context int VirtualDeviceParams )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>IVirtualDeviceManager</type>
        <name>service</name>
      </param>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>int</type>
        <name>associationId</name>
      </param>
      <param>
        <type>VirtualDeviceParams</type>
        <name>params</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="unregisterAsSystemService">
    <id>android.service.notification.NotificationListenerService.unregisterAsSystemService( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="openFileOutput">
    <id>android.app.ContextImpl.openFileOutput( String int )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>mode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="Signature">
    <id>android.content.pm.Signature.Signature( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addUnsignedLong">
    <id>android.security.keymaster.KeymasterArguments.addUnsignedLong( int BigInteger )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tag</name>
      </param>
      <param>
        <type>BigInteger</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPackageUidAsUser">
    <id>android.app.ApplicationPackageManager.getPackageUidAsUser( String PackageInfoFlags int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>PackageInfoFlags</type>
        <name>flags</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="notifyViewsDisappeared">
    <id>android.view.contentcapture.ContentCaptureSession.notifyViewsDisappeared( AutofillId long[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>AutofillId</type>
        <name>hostId</name>
      </param>
      <param>
        <type>long[]</type>
        <name>virtualIds</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="saveToXml">
    <id>android.os.PersistableBundle.saveToXml( XmlSerializer )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlSerializer</type>
        <name>out</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getObbInfo">
    <id>android.content.res.ObbScanner.getObbInfo( String )</id>
    <exceptions>
      <e>IOException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>filePath</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startActivity">
    <id>android.app.Activity.startActivity( Intent )</id>
    <exceptions>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="execute">
    <id>android.database.sqlite.SQLiteConnection.execute( String Object[] CancellationSignal )</id>
    <exceptions>
      <e>OperationCanceledException</e>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>bindArgs</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="update">
    <id>android.content.ContentProviderClient.update( Uri ContentValues String String[] )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>ContentValues</type>
        <name>values</name>
      </param>
      <param>
        <type>String</type>
        <name>selection</name>
      </param>
      <param>
        <type>String[]</type>
        <name>selectionArgs</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="uncanonicalizeAsync">
    <id>android.content.IContentProvider.uncanonicalizeAsync( AttributionSource Uri RemoteCallback )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>RemoteCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="applyBatch">
    <id>android.content.LoggingContentInterface.applyBatch( String ArrayList )</id>
    <exceptions>
      <e>RemoteException</e>
      <e>OperationApplicationException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>authority</name>
      </param>
      <param>
        <type>ArrayList</type>
        <name>operations</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="implCreateIfNeeded">
    <id>android.net.LocalSocket.implCreateIfNeeded( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="fromParts">
    <id>android.net.Uri.fromParts( String String String )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>scheme</name>
      </param>
      <param>
        <type>String</type>
        <name>ssp</name>
      </param>
      <param>
        <type>String</type>
        <name>fragment</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="putHidlMemory">
    <id>android.os.HwBlob.putHidlMemory( long HidlMemory )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>HidlMemory</type>
        <name>mem</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="resolveSerializer">
    <id>android.util.Xml.resolveSerializer( OutputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>OutputStream</type>
        <name>out</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="deleteTaskDisplayArea">
    <id>android.window.DisplayAreaOrganizer.deleteTaskDisplayArea( WindowContainerToken )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>WindowContainerToken</type>
        <name>taskDisplayArea</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toJson">
    <id>android.app.NotificationChannelGroup.toJson( )</id>
    <exceptions>
      <e>JSONException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getLengthPrefixedSlice">
    <id>android.util.apk.ApkSigningBlockUtils.getLengthPrefixedSlice( ByteBuffer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ByteBuffer</type>
        <name>source</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="prepare">
    <id>android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl.prepare( Surface )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="acquireExclusiveLock">
    <id>android.hardware.camera2.utils.CloseableLock.acquireExclusiveLock( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getResourcePackageName">
    <id>android.content.res.Resources.getResourcePackageName( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>resid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="loadRestrictionElement">
    <id>android.content.RestrictionsManager.loadRestrictionElement( Context XmlResourceParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>appContext</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>xml</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getMeasurements">
    <id>android.os.health.HealthStats.getMeasurements( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>key</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="executeShellCommand">
    <id>android.app.UiAutomationConnection.executeShellCommand( String ParcelFileDescriptor ParcelFileDescriptor )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>command</name>
      </param>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>sink</name>
      </param>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>source</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="makeFile">
    <id>android.os.incremental.IncrementalFileStorages.makeFile( String byte[] int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>content</name>
      </param>
      <param>
        <type>int</type>
        <name>mode</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="detectionAlgorithmStatusToString">
    <id>android.app.time.DetectorStatusTypes.detectionAlgorithmStatusToString( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>detectorAlgorithmStatus</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createClient">
    <id>android.hardware.location.ContextHubManager.createClient( Context ContextHubInfo PendingIntent long )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>ContextHubInfo</type>
        <name>hubInfo</name>
      </param>
      <param>
        <type>PendingIntent</type>
        <name>pendingIntent</name>
      </param>
      <param>
        <type>long</type>
        <name>nanoAppId</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="close">
    <id>android.util.Base64InputStream.close( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="finalize">
    <id>android.content.ContentProviderClient.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="openPipeHelper">
    <id>android.content.ContentProvider.openPipeHelper( Uri String Bundle T PipeDataWriter )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeType</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>opts</name>
      </param>
      <param>
        <type>T</type>
        <name>args</name>
      </param>
      <param>
        <type>PipeDataWriter</type>
        <name>func</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="installExistingPackageAsUser">
    <id>android.app.ApplicationPackageManager.installExistingPackageAsUser( String int int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>installReason</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="CrateInfo">
    <id>android.os.storage.CrateInfo.CrateInfo( CharSequence )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>label</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openFile">
    <id>android.content.ContentProviderClient.openFile( Uri String CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="openAssetFile">
    <id>android.content.IContentProvider.openAssetFile( AttributionSource Uri String ICancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
      <param>
        <type>ICancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="clone">
    <id>android.webkit.CookieManager.clone( )</id>
    <exceptions>
      <e>CloneNotSupportedException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getResult">
    <id>android.accounts.AccountManagerFuture.getResult( )</id>
    <exceptions>
      <e>OperationCanceledException</e>
      <e>AuthenticatorException</e>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="split">
    <id>android.text.TextUtils.split( String Pattern )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
      <param>
        <type>Pattern</type>
        <name>pattern</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="installKeyPair">
    <id>android.app.admin.DevicePolicyManager.installKeyPair( ComponentName PrivateKey Certificate String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>PrivateKey</type>
        <name>privKey</name>
      </param>
      <param>
        <type>Certificate</type>
        <name>cert</name>
      </param>
      <param>
        <type>String</type>
        <name>alias</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="isStatusBarDisabled">
    <id>android.app.admin.DevicePolicyManager.isStatusBarDisabled( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="GameManager">
    <id>android.app.GameManager.GameManager( Context Handler )</id>
    <exceptions>
      <e>ServiceNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setFrameRate">
    <id>android.view.Surface.setFrameRate( float int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>float</type>
        <name>frameRate</name>
      </param>
      <param>
        <type>int</type>
        <name>compatibility</name>
      </param>
      <param>
        <type>int</type>
        <name>changeFrameRateStrategy</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="onBackPressedOnTaskRoot">
    <id>android.app.TaskStackListener.onBackPressedOnTaskRoot( RunningTaskInfo )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>RunningTaskInfo</type>
        <name>taskInfo</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAppUsageLimit">
    <id>android.content.pm.LauncherApps.getAppUsageLimit( String UserHandle )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readBoolVector">
    <id>android.os.HwParcel.readBoolVector( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="loadPvh">
    <id>android.animation.AnimatorInflater.loadPvh( Resources Theme XmlPullParser String int )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
      <param>
        <type>int</type>
        <name>valueType</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="setRepeatingRequest">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.setRepeatingRequest( CaptureRequest CaptureCallback Executor )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="readIntLE">
    <id>android.os.incremental.V4Signature.readIntLE( InputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>stream</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="updateTransportAttributes">
    <id>android.app.backup.BackupManager.updateTransportAttributes( ComponentName String Intent String Intent String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>transportComponent</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>Intent</type>
        <name>configurationIntent</name>
      </param>
      <param>
        <type>String</type>
        <name>currentDestinationString</name>
      </param>
      <param>
        <type>Intent</type>
        <name>dataManagementIntent</name>
      </param>
      <param>
        <type>String</type>
        <name>dataManagementLabel</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="setComposingText">
    <id>android.view.inputmethod.InputConnectionWrapper.setComposingText( CharSequence int TextAttribute )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>text</name>
      </param>
      <param>
        <type>int</type>
        <name>newCursorPosition</name>
      </param>
      <param>
        <type>TextAttribute</type>
        <name>textAttribute</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="onLockedBootComplete">
    <id>android.app.UserSwitchObserver.onLockedBootComplete( int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>newUserId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="updateCompletedFrameNumber">
    <id>android.hardware.camera2.impl.FrameNumberTracker.updateCompletedFrameNumber( long int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>frameNumber</name>
      </param>
      <param>
        <type>int</type>
        <name>requestType</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="openOutputStream">
    <id>android.content.ContentResolver.openOutputStream( Uri )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setRepeatingBurstRequests">
    <id>android.hardware.camera2.impl.CameraCaptureSessionImpl.setRepeatingBurstRequests( List Executor CaptureCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>requests</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setDisplayBrightness">
    <id>android.view.SurfaceControl.setDisplayBrightness( IBinder float float float float )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>IBinder</type>
        <name>displayToken</name>
      </param>
      <param>
        <type>float</type>
        <name>sdrBrightness</name>
      </param>
      <param>
        <type>float</type>
        <name>sdrBrightnessNits</name>
      </param>
      <param>
        <type>float</type>
        <name>displayBrightness</name>
      </param>
      <param>
        <type>float</type>
        <name>displayBrightnessNits</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getDrawable">
    <id>android.content.res.CompatResources.getDrawable( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPrivateKey">
    <id>android.net.Ikev2VpnProfile.getPrivateKey( String )</id>
    <exceptions>
      <e>InvalidKeySpecException</e>
      <e>NoSuchAlgorithmException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>keyStr</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="enableWriteAheadLogging">
    <id>android.database.sqlite.SQLiteDatabase.enableWriteAheadLogging( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setSingleRepeatingRequest">
    <id>android.hardware.camera2.CameraCaptureSession.setSingleRepeatingRequest( CaptureRequest Executor CaptureCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>listener</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="sendAccessibilityEvent">
    <id>android.view.accessibility.AccessibilityManager.sendAccessibilityEvent( AccessibilityEvent )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>AccessibilityEvent</type>
        <name>event</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseBundleExtra">
    <id>android.content.res.Resources.parseBundleExtra( String AttributeSet Bundle )</id>
    <exceptions>
      <e>XmlPullParserException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>tagName</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>outBundle</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="onMove">
    <id>android.database.BulkCursorProxy.onMove( int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setCacheBehaviorTombstone">
    <id>android.os.storage.StorageManager.setCacheBehaviorTombstone( File boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>path</name>
      </param>
      <param>
        <type>boolean</type>
        <name>tombstone</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nextString">
    <id>android.util.JsonReader.nextString( char )</id>
    <exceptions>
      <e>NumberFormatException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>char</type>
        <name>quote</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="TonemapCurve">
    <id>android.hardware.camera2.params.TonemapCurve.TonemapCurve( float[] float[] float[] )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>float[]</type>
        <name>red</name>
      </param>
      <param>
        <type>float[]</type>
        <name>green</name>
      </param>
      <param>
        <type>float[]</type>
        <name>blue</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="readBytes">
    <id>android.os.incremental.V4Signature.readBytes( InputStream int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>stream</name>
      </param>
      <param>
        <type>int</type>
        <name>maxSize</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="generateKey">
    <id>android.security.keystore.recovery.RecoveryController.generateKey( String byte[] )</id>
    <exceptions>
      <e>LockScreenRequiredException</e>
      <e>InternalRecoveryServiceException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>alias</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>metadata</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="reloadPersistedData">
    <id>android.content.rollback.RollbackManager.reloadPersistedData( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setManagedProfileCallerIdAccessPolicy">
    <id>android.app.admin.DevicePolicyManager.setManagedProfileCallerIdAccessPolicy( PackagePolicy )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>PackagePolicy</type>
        <name>policy</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getKeyFromGrant">
    <id>android.security.keystore.recovery.RecoveryController.getKeyFromGrant( String )</id>
    <exceptions>
      <e>KeyPermanentlyInvalidatedException</e>
      <e>UnrecoverableKeyException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>grantAlias</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="blockingGetAuthToken">
    <id>android.accounts.AccountManager.blockingGetAuthToken( Account String boolean )</id>
    <exceptions>
      <e>OperationCanceledException</e>
      <e>AuthenticatorException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Account</type>
        <name>account</name>
      </param>
      <param>
        <type>String</type>
        <name>authTokenType</name>
      </param>
      <param>
        <type>boolean</type>
        <name>notifyAuthFailure</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="peek">
    <id>android.util.JsonReader.peek( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="finalize">
    <id>android.view.VelocityTracker.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="updateInstantAppCookie">
    <id>android.content.pm.PackageManager.updateInstantAppCookie( byte[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>cookie</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="send">
    <id>android.os.Messenger.send( Message )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Message</type>
        <name>message</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onTransact">
    <id>android.content.ContentProviderNative.onTransact( int Parcel Parcel int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>code</name>
      </param>
      <param>
        <type>Parcel</type>
        <name>data</name>
      </param>
      <param>
        <type>Parcel</type>
        <name>reply</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="startIntentSender">
    <id>android.content.Context.startIntentSender( IntentSender Intent int int int Bundle )</id>
    <exceptions>
      <e>IntentSender.SendIntentException</e>
    </exceptions>
    <params>
      <param>
        <type>IntentSender</type>
        <name>intent</name>
      </param>
      <param>
        <type>Intent</type>
        <name>fillInIntent</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsMask</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsValues</name>
      </param>
      <param>
        <type>int</type>
        <name>extraFlags</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="truncateStringForUtf8Storage">
    <id>android.text.TextUtils.truncateStringForUtf8Storage( String int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>str</name>
      </param>
      <param>
        <type>int</type>
        <name>maxbytes</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readNativeHandleAsArray">
    <id>android.os.HwParcel.readNativeHandleAsArray( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="verifyPackageCompatibility">
    <id>android.os.RecoverySystem.verifyPackageCompatibility( File )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>compatibilityFile</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="verify">
    <id>android.util.apk.ApkSignatureSchemeV3Verifier.verify( String )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>apkFile</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getServiceInfoOrThrow">
    <id>android.service.voice.VoiceInteractionServiceInfo.getServiceInfoOrThrow( ComponentName int )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>comp</name>
      </param>
      <param>
        <type>int</type>
        <name>userHandle</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="TranslationServiceInfo">
    <id>android.service.translation.TranslationServiceInfo.TranslationServiceInfo( Context ComponentName boolean int )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>ComponentName</type>
        <name>comp</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isTemporaryService</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getWindowContentFrameStats">
    <id>android.app.UiAutomationConnection.getWindowContentFrameStats( int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>windowId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addDataType">
    <id>android.content.IntentFilter.addDataType( String )</id>
    <exceptions>
      <e>MalformedMimeTypeException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPackageGids">
    <id>android.content.pm.PackageManager.getPackageGids( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getReceiverInfo">
    <id>android.content.pm.PackageManager.getReceiverInfo( ComponentName ComponentInfoFlags )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>component</name>
      </param>
      <param>
        <type>ComponentInfoFlags</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="openCamera">
    <id>android.hardware.camera2.CameraManager.openCamera( String StateCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>cameraId</name>
      </param>
      <param>
        <type>StateCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="waitUntilIdle">
    <id>android.hardware.camera2.impl.ICameraDeviceUserWrapper.waitUntilIdle( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setConfiguration">
    <id>android.view.DisplayAdjustments.setConfiguration( Configuration )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Configuration</type>
        <name>configuration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addDate">
    <id>android.security.keymaster.KeymasterArguments.addDate( int Date )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tag</name>
      </param>
      <param>
        <type>Date</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="digest">
    <id>android.os.FileUtils.digest( InputStream String )</id>
    <exceptions>
      <e>IOException</e>
      <e>NoSuchAlgorithmException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>in</name>
      </param>
      <param>
        <type>String</type>
        <name>algorithm</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readVarLongArray">
    <id>android.net.netstats.NetworkStatsDataMigrationUtils.readVarLongArray( DataInput )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataInput</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addBytes">
    <id>android.security.keymaster.KeymasterArguments.addBytes( int byte[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tag</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createCaptureSessionByOutputConfigurations">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.createCaptureSessionByOutputConfigurations( List StateCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>outputConfigurations</name>
      </param>
      <param>
        <type>StateCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createClient">
    <id>android.hardware.location.ContextHubManager.createClient( Context ContextHubInfo Executor ContextHubClientCallback )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>ContextHubInfo</type>
        <name>hubInfo</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>ContextHubClientCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setPackagesSuspended">
    <id>android.app.admin.DevicePolicyManager.setPackagesSuspended( ComponentName String[] boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String[]</type>
        <name>packageNames</name>
      </param>
      <param>
        <type>boolean</type>
        <name>suspended</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parseDomain">
    <id>android.security.net.config.XmlConfigSource.parseDomain( XmlResourceParser Set )</id>
    <exceptions>
      <e>ParserException</e>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>Set</type>
        <name>seenDomains</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="bootCommand">
    <id>android.os.RecoverySystem.bootCommand( Context String[] )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>String</type>
        <name>args</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="blockRollbackManager">
    <id>android.content.rollback.RollbackManager.blockRollbackManager( long )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>millis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeByteBuffer">
    <id>android.hardware.camera2.DngCreator.writeByteBuffer( int int ByteBuffer OutputStream int int long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>width</name>
      </param>
      <param>
        <type>int</type>
        <name>height</name>
      </param>
      <param>
        <type>ByteBuffer</type>
        <name>pixels</name>
      </param>
      <param>
        <type>OutputStream</type>
        <name>dngOutput</name>
      </param>
      <param>
        <type>int</type>
        <name>pixelStride</name>
      </param>
      <param>
        <type>int</type>
        <name>rowStride</name>
      </param>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="bulkInsert">
    <id>android.content.ContentProviderProxy.bulkInsert( AttributionSource Uri ContentValues[] )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>ContentValues[]</type>
        <name>values</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="process">
    <id>android.hardware.camera2.impl.CameraExtensionJpegProcessor.process( List IProcessResultImpl boolean )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>captureBundle</name>
      </param>
      <param>
        <type>IProcessResultImpl</type>
        <name>captureCallback</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isPostviewRequested</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getSize">
    <id>android.os.MemoryFile.getSize( FileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="generateApkVerity">
    <id>android.util.apk.ApkSignatureVerifier.generateApkVerity( String ByteBufferFactory )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
      <e>DigestException</e>
      <e>SecurityException</e>
      <e>IOException</e>
      <e>NoSuchAlgorithmException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>apkPath</name>
      </param>
      <param>
        <type>ByteBufferFactory</type>
        <name>bufferFactory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="sendMhlVendorCommand">
    <id>android.hardware.hdmi.HdmiTvClient.sendMhlVendorCommand( int int int byte[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>portId</name>
      </param>
      <param>
        <type>int</type>
        <name>offset</name>
      </param>
      <param>
        <type>int</type>
        <name>length</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>data</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="copyToFloatArray">
    <id>android.os.HwBlob.copyToFloatArray( long float[] int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>float[]</type>
        <name>array</name>
      </param>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="readRawByte">
    <id>android.util.proto.EncodedBuffer.readRawByte( )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="performSpellCheck">
    <id>android.view.inputmethod.InputConnectionWrapper.performSpellCheck( )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getExtension">
    <id>android.os.IBinder.getExtension( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getConcurrentCameraIds">
    <id>android.hardware.camera2.CameraManager.getConcurrentCameraIds( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="performRestore">
    <id>android.app.backup.BackupHelperDispatcher.performRestore( BackupDataInput int ParcelFileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>BackupDataInput</type>
        <name>input</name>
      </param>
      <param>
        <type>int</type>
        <name>appVersionCode</name>
      </param>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>newState</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="enforceCallingPid">
    <id>android.content.AttributionSource.enforceCallingPid( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="listByInterface">
    <id>android.os.HwNoService.listByInterface( String )</id>
    <exceptions>
      <e>android.os.RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fqName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getWindow">
    <id>android.database.BulkCursorProxy.getWindow( int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getManagedProfileContactsAccessPolicy">
    <id>android.app.admin.DevicePolicyManager.getManagedProfileContactsAccessPolicy( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="generateVerityTreeInternal">
    <id>android.util.apk.VerityBuilder.generateVerityTreeInternal( RandomAccessFile SignatureInfo byte[] int[] ByteBuffer )</id>
    <exceptions>
      <e>DigestException</e>
      <e>IOException</e>
      <e>NoSuchAlgorithmException</e>
    </exceptions>
    <params>
      <param>
        <type>RandomAccessFile</type>
        <name>apk</name>
      </param>
      <param>
        <type>SignatureInfo</type>
        <name>signatureInfo</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>salt</name>
      </param>
      <param>
        <type>int[]</type>
        <name>levelOffset</name>
      </param>
      <param>
        <type>ByteBuffer</type>
        <name>output</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="supportsOfflineProcessing">
    <id>android.hardware.camera2.CameraCaptureSession.supportsOfflineProcessing( Surface )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPackageGids">
    <id>android.app.ApplicationPackageManager.getPackageGids( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="grantKeyPairToWifiAuth">
    <id>android.app.admin.DevicePolicyManager.grantKeyPairToWifiAuth( String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>alias</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDrawableForDensity">
    <id>android.content.res.Resources.getDrawableForDensity( int int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>density</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="loadFromFd">
    <id>android.content.res.ApkAssets.loadFromFd( FileDescriptor String int AssetsProvider )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
      <param>
        <type>String</type>
        <name>friendlyName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>AssetsProvider</type>
        <name>assets</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getManagedProfileCallerIdAccessPolicy">
    <id>android.app.admin.DevicePolicyManager.getManagedProfileCallerIdAccessPolicy( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="validateV4Signature">
    <id>android.os.incremental.IncrementalStorage.validateV4Signature( byte[] )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>v4signatureBytes</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="capture">
    <id>android.view.ViewDebug.capture( View OutputStream String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>root</name>
      </param>
      <param>
        <type>OutputStream</type>
        <name>clientStream</name>
      </param>
      <param>
        <type>String</type>
        <name>parameter</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="removeSpan">
    <id>android.text.PrecomputedText.removeSpan( Object )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>what</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setLogoutEnabled">
    <id>android.app.admin.DevicePolicyManager.setLogoutEnabled( ComponentName boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>boolean</type>
        <name>enabled</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="commitText">
    <id>android.view.inputmethod.InputConnectionWrapper.commitText( CharSequence int )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>text</name>
      </param>
      <param>
        <type>int</type>
        <name>newCursorPosition</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="verify">
    <id>android.util.apk.ApkSignatureSchemeV2Verifier.verify( RandomAccessFile SignatureInfo boolean )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>RandomAccessFile</type>
        <name>apk</name>
      </param>
      <param>
        <type>SignatureInfo</type>
        <name>signatureInfo</name>
      </param>
      <param>
        <type>boolean</type>
        <name>doVerifyIntegrity</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="currentNetworkTimeClock">
    <id>android.os.SystemClock.currentNetworkTimeClock( )</id>
    <exceptions>
      <e>DateTimeException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getPackageInfo">
    <id>android.content.pm.PackageManager.getPackageInfo( VersionedPackage PackageInfoFlags )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>VersionedPackage</type>
        <name>versionedPackage</name>
      </param>
      <param>
        <type>PackageInfoFlags</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="endDocument">
    <id>android.content.DefaultDataHandler.endDocument( )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="installCaCert">
    <id>android.app.admin.DevicePolicyManager.installCaCert( ComponentName byte[] )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>certBuffer</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="reportNetworkInterfaceForTransports">
    <id>android.os.BatteryStatsManager.reportNetworkInterfaceForTransports( String int[] )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>iface</name>
      </param>
      <param>
        <type>int[]</type>
        <name>transportTypes</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="instantiateReceiver">
    <id>android.app.AppComponentFactory.instantiateReceiver( ClassLoader String Intent )</id>
    <exceptions>
      <e>ClassNotFoundException</e>
      <e>InstantiationException</e>
      <e>IllegalAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>ClassLoader</type>
        <name>cl</name>
      </param>
      <param>
        <type>String</type>
        <name>className</name>
      </param>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="renameDocument">
    <id>android.provider.DocumentsProvider.renameDocument( String String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>AuthenticationRequiredException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>documentId</name>
      </param>
      <param>
        <type>String</type>
        <name>displayName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getResourcesForApplicationAsUser">
    <id>android.app.ApplicationPackageManager.getResourcesForApplicationAsUser( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>appPackageName</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getOrganizationName">
    <id>android.app.admin.DevicePolicyManager.getOrganizationName( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createPendingIntent">
    <id>android.view.textclassifier.TextClassification.createPendingIntent( Context Intent int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
      <param>
        <type>int</type>
        <name>requestCode</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createLayoutAnimationFromXml">
    <id>android.view.animation.AnimationUtils.createLayoutAnimationFromXml( Context XmlPullParser AttributeSet )</id>
    <exceptions>
      <e>InflateException</e>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>c</name>
      </param>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="newApplication">
    <id>android.app.Instrumentation.newApplication( Class Context )</id>
    <exceptions>
      <e>ClassNotFoundException</e>
      <e>InstantiationException</e>
      <e>IllegalAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>clazz</name>
      </param>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getNonResourceString">
    <id>android.content.res.TypedArray.getNonResourceString( int )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setKeepUninstalledPackages">
    <id>android.app.admin.DevicePolicyManager.setKeepUninstalledPackages( ComponentName List )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>List</type>
        <name>packageNames</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setBoundsInWindow">
    <id>android.view.accessibility.AccessibilityNodeInfo.setBoundsInWindow( Rect )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Rect</type>
        <name>bounds</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isNetworkLoggingEnabled">
    <id>android.app.admin.DevicePolicyManager.isNetworkLoggingEnabled( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="beginConfigure">
    <id>android.hardware.camera2.impl.ICameraDeviceUserWrapper.beginConfigure( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getService">
    <id>android.os.HwBinder.getService( String String boolean )</id>
    <exceptions>
      <e>RemoteException</e>
      <e>NoSuchElementException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>iface</name>
      </param>
      <param>
        <type>String</type>
        <name>serviceName</name>
      </param>
      <param>
        <type>boolean</type>
        <name>retry</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="startElement">
    <id>android.content.DefaultDataHandler.startElement( String String String Attributes )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>localName</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>Attributes</type>
        <name>atts</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="call">
    <id>android.content.ContentProviderClient.call( String String Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>method</name>
      </param>
      <param>
        <type>String</type>
        <name>arg</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getDefaultUserType">
    <id>android.content.pm.UserInfo.getDefaultUserType( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>userInfoFlag</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getInt8">
    <id>android.os.HwBlob.getInt8( long )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setInputMethodAndSubtype">
    <id>android.view.inputmethod.InputMethodManager.setInputMethodAndSubtype( IBinder String InputMethodSubtype )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>IBinder</type>
        <name>token</name>
      </param>
      <param>
        <type>String</type>
        <name>id</name>
      </param>
      <param>
        <type>InputMethodSubtype</type>
        <name>subtype</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getPackageInfo">
    <id>android.content.pm.PackageManager.getPackageInfo( VersionedPackage int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>VersionedPackage</type>
        <name>versionedPackage</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getMetaEntries">
    <id>android.util.jar.StrictJarFile.getMetaEntries( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="newActivity">
    <id>android.app.Instrumentation.newActivity( ClassLoader String Intent )</id>
    <exceptions>
      <e>ClassNotFoundException</e>
      <e>InstantiationException</e>
      <e>IllegalAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>ClassLoader</type>
        <name>cl</name>
      </param>
      <param>
        <type>String</type>
        <name>className</name>
      </param>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="OisSample">
    <id>android.hardware.camera2.params.OisSample.OisSample( long float float )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>timestamp</name>
      </param>
      <param>
        <type>float</type>
        <name>xShift</name>
      </param>
      <param>
        <type>float</type>
        <name>yShift</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createContextForSplit">
    <id>android.app.ContextImpl.createContextForSplit( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>splitName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getFontMetricsInt">
    <id>android.text.PrecomputedText.getFontMetricsInt( int int FontMetricsInt )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>end</name>
      </param>
      <param>
        <type>FontMetricsInt</type>
        <name>outMetrics</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="GetCredentialException">
    <id>android.credentials.GetCredentialException.GetCredentialException( String String Throwable )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>String</type>
        <name>message</name>
      </param>
      <param>
        <type>Throwable</type>
        <name>cause</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setCheckable">
    <id>android.view.accessibility.AccessibilityNodeInfo.setCheckable( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>checkable</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="GetCredentialException">
    <id>android.credentials.GetCredentialException.GetCredentialException( String String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>String</type>
        <name>message</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setRecoverySecretTypes">
    <id>android.security.keystore.recovery.RecoveryController.setRecoverySecretTypes( int[] )</id>
    <exceptions>
      <e>InternalRecoveryServiceException</e>
    </exceptions>
    <params>
      <param>
        <type>int[]</type>
        <name>secretTypes</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getActivityLogo">
    <id>android.app.ApplicationPackageManager.getActivityLogo( ComponentName )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>activityName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseApkLite">
    <id>android.content.pm.PackageParser.parseApkLite( FileDescriptor String int )</id>
    <exceptions>
      <e>PackageParserException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
      <param>
        <type>String</type>
        <name>debugPathName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="listForegroundAffiliatedUsers">
    <id>android.app.admin.DevicePolicyManager.listForegroundAffiliatedUsers( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getManifestShortcuts">
    <id>android.content.pm.ShortcutManager.getManifestShortcuts( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setFullScreen">
    <id>android.view.accessibility.AccessibilityRecord.setFullScreen( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>isFullScreen</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getBitmap">
    <id>android.view.TextureView.getBitmap( Bitmap )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Bitmap</type>
        <name>bitmap</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="CaptureRequest">
    <id>android.hardware.camera2.CaptureRequest.CaptureRequest( CameraMetadataNative boolean int String Set )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>CameraMetadataNative</type>
        <name>settings</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isReprocess</name>
      </param>
      <param>
        <type>int</type>
        <name>reprocessableSessionId</name>
      </param>
      <param>
        <type>String</type>
        <name>logicalCameraId</name>
      </param>
      <param>
        <type>Set</type>
        <name>physicalCameraIdSet</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="nativeLoadFd">
    <id>android.content.res.ApkAssets.nativeLoadFd( int FileDescriptor String int AssetsProvider )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
      <param>
        <type>String</type>
        <name>friendlyName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>AssetsProvider</type>
        <name>asset</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getOption">
    <id>android.net.LocalSocketImpl.getOption( int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>optID</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDrawable">
    <id>android.content.res.TypedArray.getDrawable( int )</id>
    <exceptions>
      <e>RuntimeException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="checkCapabilityRecover">
    <id>android.content.pm.SigningDetails.checkCapabilityRecover( SigningDetails int )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>SigningDetails</type>
        <name>oldDetails</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="extend">
    <id>android.util.Range.extend( T )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="execStartActivity">
    <id>android.app.Instrumentation.execStartActivity( Context IBinder IBinder String Intent int Bundle )</id>
    <exceptions>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>who</name>
      </param>
      <param>
        <type>IBinder</type>
        <name>contextThread</name>
      </param>
      <param>
        <type>IBinder</type>
        <name>token</name>
      </param>
      <param>
        <type>String</type>
        <name>target</name>
      </param>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
      <param>
        <type>int</type>
        <name>requestCode</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="setParameter">
    <id>android.service.voice.AlwaysOnHotwordDetector.setParameter( int int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>modelParam</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isDeviceManaged">
    <id>android.app.admin.DevicePolicyManager.isDeviceManaged( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getActivityBanner">
    <id>android.content.pm.PackageManager.getActivityBanner( ComponentName )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>activityName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="install">
    <id>android.net.http.HttpResponseCache.install( File long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>directory</name>
      </param>
      <param>
        <type>long</type>
        <name>maxSize</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="CredentialOption">
    <id>android.credentials.CredentialOption.CredentialOption( String Bundle Bundle boolean )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>credentialRetrievalData</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>candidateQueryData</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isSystemProviderRequired</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="makeFileFromRange">
    <id>android.os.incremental.IncrementalStorage.makeFileFromRange( String String long long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>destPath</name>
      </param>
      <param>
        <type>String</type>
        <name>sourcePath</name>
      </param>
      <param>
        <type>long</type>
        <name>rangeStart</name>
      </param>
      <param>
        <type>long</type>
        <name>rangeEnd</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="generateKey">
    <id>android.security.keystore.recovery.RecoveryController.generateKey( String )</id>
    <exceptions>
      <e>LockScreenRequiredException</e>
      <e>InternalRecoveryServiceException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>alias</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="removeAllowlistedRestrictedPermission">
    <id>android.permission.PermissionManager.removeAllowlistedRestrictedPermission( String String int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>String</type>
        <name>permissionName</name>
      </param>
      <param>
        <type>int</type>
        <name>allowlistFlags</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="saveToXml">
    <id>android.app.admin.ManagedSubscriptionsPolicy.saveToXml( TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>out</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getWindowContentFrameStats">
    <id>android.app.UiAutomation.getWindowContentFrameStats( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>windowId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="prepare">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.prepare( int Surface )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>maxCount</name>
      </param>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="ApkAssets">
    <id>android.content.res.ApkAssets.ApkAssets( int FileDescriptor String int AssetsProvider )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
      <param>
        <type>String</type>
        <name>friendlyName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>AssetsProvider</type>
        <name>assets</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="close">
    <id>android.net.LocalSocketImpl.close( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setEventTime">
    <id>android.view.accessibility.AccessibilityEvent.setEventTime( long )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>eventTime</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startIntentSenderForResultInner">
    <id>android.app.Activity.startIntentSenderForResultInner( IntentSender String int Intent int int Bundle )</id>
    <exceptions>
      <e>IntentSender.SendIntentException</e>
    </exceptions>
    <params>
      <param>
        <type>IntentSender</type>
        <name>intent</name>
      </param>
      <param>
        <type>String</type>
        <name>who</name>
      </param>
      <param>
        <type>int</type>
        <name>requestCode</name>
      </param>
      <param>
        <type>Intent</type>
        <name>fillInIntent</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsMask</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsValues</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="ColorSpaceTransform">
    <id>android.hardware.camera2.params.ColorSpaceTransform.ColorSpaceTransform( int[] )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int[]</type>
        <name>elements</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setRepeatingBurstRequests">
    <id>android.hardware.camera2.impl.CameraOfflineSessionImpl.setRepeatingBurstRequests( List Executor CaptureCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>requests</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="cancelScheduledUpdate">
    <id>android.os.RecoverySystem.cancelScheduledUpdate( Context )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPositionDescription">
    <id>android.content.res.TypedArray.getPositionDescription( )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="onFeatureSet">
    <id>android.hardware.face.FaceServiceReceiver.onFeatureSet( boolean int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>success</name>
      </param>
      <param>
        <type>int</type>
        <name>feature</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="stopRepeating">
    <id>android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl.stopRepeating( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="Capability">
    <id>android.hardware.camera2.params.Capability.Capability( int Size Range )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>mode</name>
      </param>
      <param>
        <type>Size</type>
        <name>maxStreamingSize</name>
      </param>
      <param>
        <type>Range</type>
        <name>zoomRatioRange</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="makeProviderVisible">
    <id>android.content.pm.PackageManager.makeProviderVisible( int String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>recipientUid</name>
      </param>
      <param>
        <type>String</type>
        <name>visibleAuthority</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="simpleQueryForBlobFileDescriptor">
    <id>android.database.sqlite.SQLiteStatement.simpleQueryForBlobFileDescriptor( )</id>
    <exceptions>
      <e>SQLiteDoneException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getCameraInfo">
    <id>android.hardware.Camera.getCameraInfo( int CameraInfo )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>cameraId</name>
      </param>
      <param>
        <type>CameraInfo</type>
        <name>cameraInfo</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onAuthenticationFailed">
    <id>android.hardware.face.FaceServiceReceiver.onAuthenticationFailed( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="streamQuery">
    <id>android.service.voice.VisualQueryDetectionService.streamQuery( String )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>partialQuery</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAutoTimeEnabled">
    <id>android.app.admin.DevicePolicyManager.getAutoTimeEnabled( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="verifyAdditionalAttributes">
    <id>android.util.apk.ApkSignatureSchemeV3Verifier.verifyAdditionalAttributes( ByteBuffer List CertificateFactory )</id>
    <exceptions>
      <e>PlatformNotSupportedException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ByteBuffer</type>
        <name>attrs</name>
      </param>
      <param>
        <type>List</type>
        <name>certs</name>
      </param>
      <param>
        <type>CertificateFactory</type>
        <name>certFactory</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="removeOverrideApn">
    <id>android.app.admin.DevicePolicyManager.removeOverrideApn( ComponentName int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>int</type>
        <name>apnId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="acquireReference">
    <id>android.database.sqlite.SQLiteClosable.acquireReference( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setDelegatedScopes">
    <id>android.app.admin.DevicePolicyManager.setDelegatedScopes( ComponentName String List )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>delegatePackage</name>
      </param>
      <param>
        <type>List</type>
        <name>scopes</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createFromXml">
    <id>android.os.UidBatteryConsumer.createFromXml( TypedXmlPullParser Builder )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>Builder</type>
        <name>builder</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="uncanonicalize">
    <id>android.content.ContentInterface.uncanonicalize( Uri )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="lockCanvas">
    <id>android.view.Surface.lockCanvas( Rect )</id>
    <exceptions>
      <e>OutOfResourcesException</e>
      <e>Surface.OutOfResourcesException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Rect</type>
        <name>inOutDirty</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readList">
    <id>android.os.Parcel.readList( List ClassLoader Class )</id>
    <exceptions>
      <e>BadParcelableException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>outVal</name>
      </param>
      <param>
        <type>ClassLoader</type>
        <name>loader</name>
      </param>
      <param>
        <type>Class</type>
        <name>clazz</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getDouble">
    <id>android.os.HwBlob.getDouble( long )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parsePermission">
    <id>android.content.pm.PackageParser.parsePermission( Package Resources XmlResourceParser String[] )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Package</type>
        <name>owner</name>
      </param>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>String[]</type>
        <name>outError</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="call">
    <id>android.content.IContentProvider.call( AttributionSource String String String Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>String</type>
        <name>authority</name>
      </param>
      <param>
        <type>String</type>
        <name>method</name>
      </param>
      <param>
        <type>String</type>
        <name>arg</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getParametersCopy">
    <id>android.hardware.Camera.getParametersCopy( Parameters )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>Parameters</type>
        <name>parameters</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addWhitelistedRestrictedPermission">
    <id>android.content.pm.PackageManager.addWhitelistedRestrictedPermission( String String int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>String</type>
        <name>permName</name>
      </param>
      <param>
        <type>int</type>
        <name>whitelistFlags</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="executeInsert">
    <id>android.database.DatabaseUtils.executeInsert( SQLiteDatabase String Object[] )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>SQLiteDatabase</type>
        <name>db</name>
      </param>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>bindArgs</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="addUserRestriction">
    <id>android.app.admin.DevicePolicyManager.addUserRestriction( ComponentName String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>key</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="close">
    <id>android.content.res.loader.ResourcesProvider.close( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="saveToXml">
    <id>android.content.pm.SuspendDialogInfo.saveToXml( TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>out</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="waitForInstallConstraints">
    <id>android.content.pm.PackageInstaller.waitForInstallConstraints( List InstallConstraints IntentSender long )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>packageNames</name>
      </param>
      <param>
        <type>InstallConstraints</type>
        <name>constraints</name>
      </param>
      <param>
        <type>IntentSender</type>
        <name>callback</name>
      </param>
      <param>
        <type>long</type>
        <name>timeoutMillis</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getApplicationBanner">
    <id>android.content.pm.PackageManager.getApplicationBanner( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="queryChildDocuments">
    <id>android.provider.DocumentsProvider.queryChildDocuments( String String[] String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>AuthenticationRequiredException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>parentDocumentId</name>
      </param>
      <param>
        <type>String[]</type>
        <name>projection</name>
      </param>
      <param>
        <type>String</type>
        <name>sortOrder</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setEndUserSessionMessage">
    <id>android.app.admin.DevicePolicyManager.setEndUserSessionMessage( ComponentName CharSequence )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>endUserSessionMessage</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="verifyV2Signature">
    <id>android.util.apk.ApkSignatureVerifier.verifyV2Signature( ParseInput String boolean )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ParseInput</type>
        <name>input</name>
      </param>
      <param>
        <type>String</type>
        <name>apkPath</name>
      </param>
      <param>
        <type>boolean</type>
        <name>verifyFull</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="addDynamicDataType">
    <id>android.content.IntentFilter.addDynamicDataType( String )</id>
    <exceptions>
      <e>MalformedMimeTypeException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="SearchableInfo">
    <id>android.app.SearchableInfo.SearchableInfo( Context AttributeSet ComponentName )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>activityContext</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attr</name>
      </param>
      <param>
        <type>ComponentName</type>
        <name>cName</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="onCreateView">
    <id>android.view.LayoutInflater.onCreateView( Context View String AttributeSet )</id>
    <exceptions>
      <e>ClassNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>viewContext</name>
      </param>
      <param>
        <type>View</type>
        <name>parent</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="checkValidity">
    <id>android.util.apk.WrappedX509Certificate.checkValidity( )</id>
    <exceptions>
      <e>CertificateNotYetValidException</e>
      <e>CertificateExpiredException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="executeSql">
    <id>android.database.sqlite.SQLiteDatabase.executeSql( String Object[] )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>bindArgs</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onAcquired">
    <id>android.hardware.face.FaceServiceReceiver.onAcquired( int int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>acquiredInfo</name>
      </param>
      <param>
        <type>int</type>
        <name>vendorCode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="removeCrossProfileWidgetProvider">
    <id>android.app.admin.DevicePolicyManager.removeCrossProfileWidgetProvider( ComponentName String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="canonicalizeAsync">
    <id>android.content.IContentProvider.canonicalizeAsync( AttributionSource Uri RemoteCallback )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>RemoteCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parsePackage">
    <id>android.content.pm.PackageParser.parsePackage( File int )</id>
    <exceptions>
      <e>PackageParserException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>packageFile</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="uncanonicalize">
    <id>android.content.ContentProviderClient.uncanonicalize( Uri )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createLinearSpline">
    <id>android.util.Spline.createLinearSpline( float[] float[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>float[]</type>
        <name>x</name>
      </param>
      <param>
        <type>float[]</type>
        <name>y</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getValue">
    <id>android.content.res.Resources.getValue( int TypedValue boolean )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>TypedValue</type>
        <name>outValue</name>
      </param>
      <param>
        <type>boolean</type>
        <name>resolveRefs</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setInputType">
    <id>android.view.accessibility.AccessibilityNodeInfo.setInputType( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>inputType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onForegroundProfileSwitch">
    <id>android.app.UserSwitchObserver.onForegroundProfileSwitch( int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>newProfileId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="NetworkScoreManager">
    <id>android.net.NetworkScoreManager.NetworkScoreManager( Context )</id>
    <exceptions>
      <e>ServiceNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="unlinkToDeath">
    <id>android.os.IBinder.unlinkToDeath( DeathRecipient int )</id>
    <exceptions>
      <e>NoSuchElementException</e>
    </exceptions>
    <params>
      <param>
        <type>DeathRecipient</type>
        <name>recipient</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getChangingConfigurations">
    <id>android.content.res.TypedArray.getChangingConfigurations( )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="dup">
    <id>android.os.HidlMemory.dup( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setUserIcon">
    <id>android.os.UserManager.setUserIcon( Bitmap )</id>
    <exceptions>
      <e>UserOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>Bitmap</type>
        <name>icon</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openDatabase">
    <id>android.database.sqlite.SQLiteDatabase.openDatabase( String CursorFactory int DatabaseErrorHandler )</id>
    <exceptions>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
      <param>
        <type>CursorFactory</type>
        <name>factory</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>DatabaseErrorHandler</type>
        <name>errorHandler</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setVisibleToUser">
    <id>android.view.accessibility.AccessibilityNodeInfo.setVisibleToUser( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>visibleToUser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openAssetFile">
    <id>android.content.LoggingContentInterface.openAssetFile( Uri String CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="putBlob">
    <id>android.os.HwBlob.putBlob( long HwBlob )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>HwBlob</type>
        <name>blob</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getProxyParameters">
    <id>android.app.admin.DevicePolicyManager.getProxyParameters( Proxy List )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Proxy</type>
        <name>proxySpec</name>
      </param>
      <param>
        <type>List</type>
        <name>exclusionList</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onVolumeStateChanged">
    <id>android.service.storage.ExternalStorageService.onVolumeStateChanged( StorageVolume )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>StorageVolume</type>
        <name>vol</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="switchInputMethod">
    <id>android.inputmethodservice.InputMethodService.switchInputMethod( String InputMethodSubtype )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>id</name>
      </param>
      <param>
        <type>InputMethodSubtype</type>
        <name>subtype</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="constructSplit">
    <id>android.content.pm.split.SplitDependencyLoader.constructSplit( int int[] int )</id>
    <exceptions>
      <e>E</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>splitIdx</name>
      </param>
      <param>
        <type>int[]</type>
        <name>configSplitIndices</name>
      </param>
      <param>
        <type>int</type>
        <name>parentSplitIdx</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setTarget">
    <id>android.view.inputmethod.InputConnectionWrapper.setTarget( InputConnection )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>InputConnection</type>
        <name>target</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseAlias">
    <id>android.app.AliasActivity.parseAlias( XmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setManagedSubscriptionsPolicy">
    <id>android.app.admin.DevicePolicyManager.setManagedSubscriptionsPolicy( ManagedSubscriptionsPolicy )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ManagedSubscriptionsPolicy</type>
        <name>policy</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readRawString">
    <id>android.util.proto.ProtoInputStream.readRawString( int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>n</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getStringSet">
    <id>android.content.SharedPreferences.getStringSet( String Set )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>key</name>
      </param>
      <param>
        <type>Set</type>
        <name>defValues</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getMeasurement">
    <id>android.os.health.HealthStats.getMeasurement( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>key</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nullValue">
    <id>android.util.JsonWriter.nullValue( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="areEffectiveMatch">
    <id>android.content.pm.Signature.areEffectiveMatch( Signature[] Signature[] )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>Signature[]</type>
        <name>a</name>
      </param>
      <param>
        <type>Signature[]</type>
        <name>b</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="truncate">
    <id>android.util.AtomicFile.truncate( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="finalize">
    <id>android.view.CompositionSamplingListener.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="updateSystemUpdateInfo">
    <id>android.os.SystemUpdateManager.updateSystemUpdateInfo( PersistableBundle )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistableBundle</type>
        <name>infoBundle</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="CompoundFormula">
    <id>android.content.integrity.CompoundFormula.CompoundFormula( int List )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>connector</name>
      </param>
      <param>
        <type>List</type>
        <name>formulas</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setOemUnlockAllowedByCarrier">
    <id>android.service.oemlock.OemLockManager.setOemUnlockAllowedByCarrier( boolean byte[] )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>allowed</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>signature</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="prepare">
    <id>android.hardware.camera2.impl.CameraOfflineSessionImpl.prepare( Surface )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startProvisionedVpnProfile">
    <id>android.net.VpnManager.startProvisionedVpnProfile( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="deactivate">
    <id>android.database.BulkCursorProxy.deactivate( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getInstalledCaCerts">
    <id>android.app.admin.DevicePolicyManager.getInstalledCaCerts( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="bind">
    <id>android.net.LocalSocketImpl.bind( LocalSocketAddress )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>LocalSocketAddress</type>
        <name>endpoint</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getOverrideApns">
    <id>android.app.admin.DevicePolicyManager.getOverrideApns( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="copyGainFactors">
    <id>android.hardware.camera2.params.LensShadingMap.copyGainFactors( float[] int )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ArrayIndexOutOfBoundsException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>float[]</type>
        <name>destination</name>
      </param>
      <param>
        <type>int</type>
        <name>offset</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseClusterPackage">
    <id>android.content.pm.PackageParser.parseClusterPackage( File int )</id>
    <exceptions>
      <e>PackageParserException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>packageDir</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="checkClientTrusted">
    <id>android.security.net.config.RootTrustManager.checkClientTrusted( X509Certificate[] String SSLEngine )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>X509Certificate[]</type>
        <name>certs</name>
      </param>
      <param>
        <type>String</type>
        <name>authType</name>
      </param>
      <param>
        <type>SSLEngine</type>
        <name>engine</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="rawGetService">
    <id>android.os.ServiceManager.rawGetService( String )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="insertOrThrow">
    <id>android.database.sqlite.SQLiteDatabase.insertOrThrow( String String ContentValues )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>table</name>
      </param>
      <param>
        <type>String</type>
        <name>nullColumnHack</name>
      </param>
      <param>
        <type>ContentValues</type>
        <name>values</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="buildUniqueFileWithExtension">
    <id>android.os.FileUtils.buildUniqueFileWithExtension( File String String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>parent</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>String</type>
        <name>ext</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="readArray">
    <id>android.os.Parcel.readArray( ClassLoader Class )</id>
    <exceptions>
      <e>BadParcelableException</e>
    </exceptions>
    <params>
      <param>
        <type>ClassLoader</type>
        <name>loader</name>
      </param>
      <param>
        <type>Class</type>
        <name>clazz</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="clone">
    <id>android.view.animation.Animation.clone( )</id>
    <exceptions>
      <e>CloneNotSupportedException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setRepeatingRequest">
    <id>android.hardware.camera2.CameraExtensionSession.setRepeatingRequest( CaptureRequest Executor ExtensionCaptureCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>ExtensionCaptureCallback</type>
        <name>listener</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="read">
    <id>android.util.Base64InputStream.read( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getHighSpeedVideoFpsRangesFor">
    <id>android.hardware.camera2.params.RecommendedStreamConfigurationMap.getHighSpeedVideoFpsRangesFor( Size )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Size</type>
        <name>size</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="skippedEntity">
    <id>android.content.DefaultDataHandler.skippedEntity( String )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="fromData">
    <id>android.os.ParcelFileDescriptor.fromData( byte[] String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>data</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="enforcePermission">
    <id>android.os.PermissionEnforcer.enforcePermission( String AttributionSource )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>permission</name>
      </param>
      <param>
        <type>AttributionSource</type>
        <name>source</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onResolutionUpdate">
    <id>android.hardware.camera2.impl.CameraExtensionJpegProcessor.onResolutionUpdate( Size Size )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Size</type>
        <name>size</name>
      </param>
      <param>
        <type>Size</type>
        <name>postviewSize</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getTBSCertificate">
    <id>android.util.apk.WrappedX509Certificate.getTBSCertificate( )</id>
    <exceptions>
      <e>CertificateEncodingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="get">
    <id>android.hardware.camera2.CameraCharacteristics.get( Key )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Key</type>
        <name>key</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="create">
    <id>android.service.credentials.CredentialProviderInfoFactory.create( Context ComponentName int boolean )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
      <e>NameNotFoundException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>ComponentName</type>
        <name>serviceComponent</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isSystemProvider</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="Marshaler">
    <id>android.hardware.camera2.marshal.Marshaler.Marshaler( MarshalQueryable TypeReference int )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>MarshalQueryable</type>
        <name>query</name>
      </param>
      <param>
        <type>TypeReference</type>
        <name>typeReference</name>
      </param>
      <param>
        <type>int</type>
        <name>nativeType</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getAncillaryFileDescriptors">
    <id>android.net.LocalSocketImpl.getAncillaryFileDescriptors( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="nextValue">
    <id>android.util.JsonReader.nextValue( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="StreamConfigurationDuration">
    <id>android.hardware.camera2.params.StreamConfigurationDuration.StreamConfigurationDuration( int int int long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
      <param>
        <type>int</type>
        <name>width</name>
      </param>
      <param>
        <type>int</type>
        <name>height</name>
      </param>
      <param>
        <type>long</type>
        <name>durationNs</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="openOrCreateDatabase">
    <id>android.content.Context.openOrCreateDatabase( String int CursorFactory )</id>
    <exceptions>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>mode</name>
      </param>
      <param>
        <type>CursorFactory</type>
        <name>factory</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parse3339">
    <id>android.text.format.Time.parse3339( String )</id>
    <exceptions>
      <e>TimeFormatException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>s</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onUnwrap">
    <id>android.service.resumeonreboot.ResumeOnRebootService.onUnwrap( byte[] )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>wrappedBlob</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseProvider">
    <id>android.content.pm.PackageParser.parseProvider( Package Resources XmlResourceParser int String[] CachedComponentArgs )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Package</type>
        <name>owner</name>
      </param>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>String[]</type>
        <name>outError</name>
      </param>
      <param>
        <type>CachedComponentArgs</type>
        <name>cachedArgs</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="checkApplyStrategy">
    <id>android.view.textclassifier.TextLinksParams.checkApplyStrategy( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>applyStrategy</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAll">
    <id>android.content.SharedPreferences.getAll( )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="readInt">
    <id>android.view.inspector.PropertyReader.readInt( int int )</id>
    <exceptions>
      <e>PropertyTypeMismatchException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parsePinSet">
    <id>android.security.net.config.XmlConfigSource.parsePinSet( XmlResourceParser )</id>
    <exceptions>
      <e>ParserException</e>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="checkService">
    <id>android.os.ServiceManagerProxy.checkService( String )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="registerKeyboardBacklightListener">
    <id>android.hardware.input.InputManagerGlobal.registerKeyboardBacklightListener( Executor KeyboardBacklightListener )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>KeyboardBacklightListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="BeginCreateCredentialRequest">
    <id>android.service.credentials.BeginCreateCredentialRequest.BeginCreateCredentialRequest( String Bundle )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>data</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="tearDown">
    <id>android.hardware.camera2.CameraCaptureSession.tearDown( Surface )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeEntityHeader">
    <id>android.app.backup.BackupDataOutput.writeEntityHeader( String int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>key</name>
      </param>
      <param>
        <type>int</type>
        <name>dataSize</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="length">
    <id>android.content.res.TypedArray.length( )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="registerClientCallback">
    <id>android.os.HwNoService.registerClientCallback( String String IBase IClientCallback )</id>
    <exceptions>
      <e>android.os.RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fqName</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>IBase</type>
        <name>server</name>
      </param>
      <param>
        <type>IClientCallback</type>
        <name>cb</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getApplicationInfoAsUser">
    <id>android.content.pm.PackageManager.getApplicationInfoAsUser( String int int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parseIntent">
    <id>android.content.pm.PackageParser.parseIntent( Resources XmlResourceParser boolean boolean IntentInfo String[] )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>boolean</type>
        <name>allowGlobs</name>
      </param>
      <param>
        <type>boolean</type>
        <name>allowAutoVerify</name>
      </param>
      <param>
        <type>IntentInfo</type>
        <name>outInfo</name>
      </param>
      <param>
        <type>String[]</type>
        <name>outError</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="registerForNotifications">
    <id>android.os.HwNoService.registerForNotifications( String String IServiceNotification )</id>
    <exceptions>
      <e>android.os.RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fqName</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>IServiceNotification</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getResourcePackageName">
    <id>android.content.res.ResourcesImpl.getResourcePackageName( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>resid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="PermissionManager">
    <id>android.permission.PermissionManager.PermissionManager( Context )</id>
    <exceptions>
      <e>ServiceManager.ServiceNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="native_read_direct">
    <id>android.hardware.SerialPort.native_read_direct( ByteBuffer int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ByteBuffer</type>
        <name>buffer</name>
      </param>
      <param>
        <type>int</type>
        <name>length</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="sendKeyEvent">
    <id>android.view.inputmethod.InputConnectionWrapper.sendKeyEvent( KeyEvent )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>KeyEvent</type>
        <name>event</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isAutoRevokeExempted">
    <id>android.permission.PermissionManager.isAutoRevokeExempted( String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readParcelableCreator">
    <id>android.os.Parcel.readParcelableCreator( ClassLoader Class )</id>
    <exceptions>
      <e>BadParcelableException</e>
    </exceptions>
    <params>
      <param>
        <type>ClassLoader</type>
        <name>loader</name>
      </param>
      <param>
        <type>Class</type>
        <name>clazz</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="enforceNotSealed">
    <id>android.view.accessibility.AccessibilityRecord.enforceNotSealed( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="send">
    <id>android.app.PendingIntent.send( Bundle )</id>
    <exceptions>
      <e>CanceledException</e>
    </exceptions>
    <params>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDate">
    <id>android.security.keymaster.KeymasterArguments.getDate( int Date )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tag</name>
      </param>
      <param>
        <type>Date</type>
        <name>defaultValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="StatFs">
    <id>android.os.StatFs.StatFs( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="copyNonNullFieldsFrom">
    <id>android.content.pm.ShortcutInfo.copyNonNullFieldsFrom( ShortcutInfo )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>ShortcutInfo</type>
        <name>source</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getExtractedText">
    <id>android.view.inputmethod.InputConnectionWrapper.getExtractedText( ExtractedTextRequest int )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>ExtractedTextRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readPreviousEvents">
    <id>android.app.admin.SecurityLog.readPreviousEvents( Collection )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Collection</type>
        <name>output</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="value">
    <id>android.util.JsonWriter.value( double )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>double</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPermittedAccessibilityServices">
    <id>android.app.admin.DevicePolicyManager.setPermittedAccessibilityServices( ComponentName List )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>List</type>
        <name>packageNames</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="requireKey">
    <id>android.preference.Preference.requireKey( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="queryPermissionsByGroup">
    <id>android.app.ApplicationPackageManager.queryPermissionsByGroup( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>groupName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="rebootWipeCache">
    <id>android.os.RecoverySystem.rebootWipeCache( Context )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="finalize">
    <id>android.content.res.AssetManager.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="ApkChecksum">
    <id>android.content.pm.ApkChecksum.ApkChecksum( String int byte[] String Certificate )</id>
    <exceptions>
      <e>CertificateEncodingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>splitName</name>
      </param>
      <param>
        <type>int</type>
        <name>type</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>value</name>
      </param>
      <param>
        <type>String</type>
        <name>sourcePackageName</name>
      </param>
      <param>
        <type>Certificate</type>
        <name>sourceCertificate</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="writeToXml">
    <id>android.os.AggregateBatteryConsumer.writeToXml( TypedXmlSerializer int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>serializer</name>
      </param>
      <param>
        <type>int</type>
        <name>scope</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="importKey">
    <id>android.security.keystore.recovery.RecoveryController.importKey( String byte[] byte[] )</id>
    <exceptions>
      <e>LockScreenRequiredException</e>
      <e>InternalRecoveryServiceException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>alias</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>keyBytes</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>metadata</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getParentProfileInstance">
    <id>android.app.admin.DevicePolicyManager.getParentProfileInstance( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readPlatformCollection">
    <id>android.net.netstats.NetworkStatsDataMigrationUtils.readPlatformCollection( Builder DataInput )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Builder</type>
        <name>builder</name>
      </param>
      <param>
        <type>DataInput</type>
        <name>in</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="executeInsert">
    <id>android.database.sqlite.SQLiteStatement.executeInsert( )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="StreamConfigurationMap">
    <id>android.hardware.camera2.params.StreamConfigurationMap.StreamConfigurationMap( StreamConfiguration[] StreamConfigurationDuration[] StreamConfigurationDuration[] StreamConfiguration[] StreamConfigurationDuration[] StreamConfigurationDuration[] StreamConfiguration[] StreamConfigurationDuration[] StreamConfigurationDuration[] StreamConfiguration[] StreamConfigurationDuration[] StreamConfigurationDuration[] StreamConfiguration[] StreamConfigurationDuration[] StreamConfigurationDuration[] HighSpeedVideoConfiguration[] ReprocessFormatsMap boolean boolean )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>StreamConfiguration[]</type>
        <name>configurations</name>
      </param>
      <param>
        <type>StreamConfigurationDuration[]</type>
        <name>minFrameDurations</name>
      </param>
      <param>
        <type>StreamConfigurationDuration[]</type>
        <name>stallDurations</name>
      </param>
      <param>
        <type>StreamConfiguration[]</type>
        <name>depthConfigurations</name>
      </param>
      <param>
        <type>StreamConfigurationDuration[]</type>
        <name>depthMinFrameDurations</name>
      </param>
      <param>
        <type>StreamConfigurationDuration[]</type>
        <name>depthStallDurations</name>
      </param>
      <param>
        <type>StreamConfiguration[]</type>
        <name>dynamicDepthConfigurations</name>
      </param>
      <param>
        <type>StreamConfigurationDuration[]</type>
        <name>dynamicDepthMinFrameDurations</name>
      </param>
      <param>
        <type>StreamConfigurationDuration[]</type>
        <name>dynamicDepthStallDurations</name>
      </param>
      <param>
        <type>StreamConfiguration[]</type>
        <name>heicConfigurations</name>
      </param>
      <param>
        <type>StreamConfigurationDuration[]</type>
        <name>heicMinFrameDurations</name>
      </param>
      <param>
        <type>StreamConfigurationDuration[]</type>
        <name>heicStallDurations</name>
      </param>
      <param>
        <type>StreamConfiguration[]</type>
        <name>jpegRConfigurations</name>
      </param>
      <param>
        <type>StreamConfigurationDuration[]</type>
        <name>jpegRMinFrameDurations</name>
      </param>
      <param>
        <type>StreamConfigurationDuration[]</type>
        <name>jpegRStallDurations</name>
      </param>
      <param>
        <type>HighSpeedVideoConfiguration[]</type>
        <name>highSpeedVideoConfigurations</name>
      </param>
      <param>
        <type>ReprocessFormatsMap</type>
        <name>inputOutputFormatsMap</name>
      </param>
      <param>
        <type>boolean</type>
        <name>listHighResolution</name>
      </param>
      <param>
        <type>boolean</type>
        <name>enforceImplementationDefined</name>
      </param>
    </params>
    <arity>19</arity>
  </method>
  <method name="open">
    <id>android.os.ParcelFileDescriptor.open( File int Handler OnCloseListener )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>file</name>
      </param>
      <param>
        <type>int</type>
        <name>mode</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
      <param>
        <type>OnCloseListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getSecondaryUsers">
    <id>android.app.admin.DevicePolicyManager.getSecondaryUsers( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setCustomAggregateFunction">
    <id>android.database.sqlite.SQLiteDatabase.setCustomAggregateFunction( String BinaryOperator )</id>
    <exceptions>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>functionName</name>
      </param>
      <param>
        <type>BinaryOperator</type>
        <name>aggregateFunction</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addOnWindowFocusChangeListener">
    <id>android.view.ViewTreeObserver.addOnWindowFocusChangeListener( OnWindowFocusChangeListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OnWindowFocusChangeListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isContentCaptureFeatureEnabled">
    <id>android.view.contentcapture.ContentCaptureManager.isContentCaptureFeatureEnabled( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="isAutoDetectionEnabled">
    <id>android.app.time.TimeConfiguration.isAutoDetectionEnabled( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="TimeZoneDetectorImpl">
    <id>android.app.timezonedetector.TimeZoneDetectorImpl.TimeZoneDetectorImpl( )</id>
    <exceptions>
      <e>ServiceNotFoundException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="canonicalize">
    <id>android.content.ContentProviderClient.canonicalize( Uri )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setAutoFocusMoveCallback">
    <id>android.hardware.Camera.setAutoFocusMoveCallback( AutoFocusMoveCallback )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>AutoFocusMoveCallback</type>
        <name>cb</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getActivityLogo">
    <id>android.content.pm.PackageManager.getActivityLogo( Intent )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="stringToFile">
    <id>android.os.FileUtils.stringToFile( File String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>file</name>
      </param>
      <param>
        <type>String</type>
        <name>string</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getServiceInfoOrThrow">
    <id>android.service.credentials.CredentialProviderInfoFactory.getServiceInfoOrThrow( ComponentName int )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>serviceComponent</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="acknowledgeDeviceCompliant">
    <id>android.app.admin.DevicePolicyManager.acknowledgeDeviceCompliant( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="beforeName">
    <id>android.util.JsonWriter.beforeName( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="reconnect">
    <id>android.hardware.Camera.reconnect( )</id>
    <exceptions>
      <e>RuntimeException</e>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="tokenize">
    <id>android.database.sqlite.SQLiteTokenizer.tokenize( String int Consumer )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>int</type>
        <name>options</name>
      </param>
      <param>
        <type>Consumer</type>
        <name>checker</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="onTransact">
    <id>android.os.HwBinder.onTransact( int HwParcel HwParcel int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>code</name>
      </param>
      <param>
        <type>HwParcel</type>
        <name>request</name>
      </param>
      <param>
        <type>HwParcel</type>
        <name>reply</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="openFileOutput">
    <id>android.content.ContextWrapper.openFileOutput( String int )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>mode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onStartIntentSenderFromFragment">
    <id>android.app.FragmentHostCallback.onStartIntentSenderFromFragment( Fragment IntentSender int Intent int int int Bundle )</id>
    <exceptions>
      <e>IntentSender.SendIntentException</e>
    </exceptions>
    <params>
      <param>
        <type>Fragment</type>
        <name>fragment</name>
      </param>
      <param>
        <type>IntentSender</type>
        <name>intent</name>
      </param>
      <param>
        <type>int</type>
        <name>requestCode</name>
      </param>
      <param>
        <type>Intent</type>
        <name>fillInIntent</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsMask</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsValues</name>
      </param>
      <param>
        <type>int</type>
        <name>extraFlags</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>8</arity>
  </method>
  <method name="validateIncomingAuthority">
    <id>android.content.ContentProvider.validateIncomingAuthority( String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>authority</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getResult">
    <id>android.accounts.AccountManagerFuture.getResult( long TimeUnit )</id>
    <exceptions>
      <e>OperationCanceledException</e>
      <e>AuthenticatorException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>timeout</name>
      </param>
      <param>
        <type>TimeUnit</type>
        <name>unit</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="RemoteViews">
    <id>android.widget.RemoteViews.RemoteViews( Map )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Map</type>
        <name>remoteViews</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setSelection">
    <id>android.view.inputmethod.InputConnectionWrapper.setSelection( int int )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setTransactionSuccessful">
    <id>android.database.sqlite.SQLiteDatabase.setTransactionSuccessful( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getOutputStallDuration">
    <id>android.hardware.camera2.params.RecommendedStreamConfigurationMap.getOutputStallDuration( int Size )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
      <param>
        <type>Size</type>
        <name>size</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createSize">
    <id>android.hardware.camera2.utils.ParamsUtils.createSize( Rect )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>Rect</type>
        <name>rect</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createFromXml">
    <id>android.content.res.GradientColor.createFromXml( Resources XmlResourceParser Theme )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>r</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getTextArray">
    <id>android.content.res.TypedArray.getTextArray( int )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="autoFocus">
    <id>android.hardware.Camera.autoFocus( AutoFocusCallback )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>AutoFocusCallback</type>
        <name>cb</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="AccessibilityRequestPreparer">
    <id>android.view.accessibility.AccessibilityRequestPreparer.AccessibilityRequestPreparer( View int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>view</name>
      </param>
      <param>
        <type>int</type>
        <name>requestTypes</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="registerHdrSdrRatioChangedListener">
    <id>android.view.Display.registerHdrSdrRatioChangedListener( Executor Consumer )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>Consumer</type>
        <name>listener</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="importKey">
    <id>android.security.keystore.recovery.RecoveryController.importKey( String byte[] )</id>
    <exceptions>
      <e>LockScreenRequiredException</e>
      <e>InternalRecoveryServiceException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>alias</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>keyBytes</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="ColorSpaceProfiles">
    <id>android.hardware.camera2.params.ColorSpaceProfiles.ColorSpaceProfiles( long[] )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long[]</type>
        <name>elements</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createAlwaysOnHotwordDetector">
    <id>android.service.voice.VoiceInteractionService.createAlwaysOnHotwordDetector( String Locale Executor Callback )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>keyphrase</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>Callback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setVrModeEnabled">
    <id>android.app.Activity.setVrModeEnabled( boolean ComponentName )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>enabled</name>
      </param>
      <param>
        <type>ComponentName</type>
        <name>requestedComponent</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="hasLockdownAdminConfiguredNetworks">
    <id>android.app.admin.DevicePolicyManager.hasLockdownAdminConfiguredNetworks( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parse">
    <id>android.util.Xml.parse( Reader ContentHandler )</id>
    <exceptions>
      <e>IOException</e>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>Reader</type>
        <name>in</name>
      </param>
      <param>
        <type>ContentHandler</type>
        <name>contentHandler</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="convertToSignatures">
    <id>android.util.apk.ApkSignatureVerifier.convertToSignatures( Certificate[][] )</id>
    <exceptions>
      <e>CertificateEncodingException</e>
    </exceptions>
    <params>
      <param>
        <type>Certificate[][]</type>
        <name>certs</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="ParcelableResource">
    <id>android.app.admin.ParcelableResource.ParcelableResource( Context int int )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>int</type>
        <name>resourceId</name>
      </param>
      <param>
        <type>int</type>
        <name>resourceType</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="clearVcnConfig">
    <id>android.net.vcn.VcnManager.clearVcnConfig( ParcelUuid )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ParcelUuid</type>
        <name>subscriptionGroup</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="notifyUnsafeOperationStateChanged">
    <id>android.app.admin.DevicePolicyManagerLiteInternal.notifyUnsafeOperationStateChanged( DevicePolicySafetyChecker int boolean )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DevicePolicySafetyChecker</type>
        <name>checker</name>
      </param>
      <param>
        <type>int</type>
        <name>reason</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isSafe</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="generateApkVerityTree">
    <id>android.util.apk.VerityBuilder.generateApkVerityTree( RandomAccessFile SignatureInfo ByteBufferFactory )</id>
    <exceptions>
      <e>DigestException</e>
      <e>SecurityException</e>
      <e>IOException</e>
      <e>NoSuchAlgorithmException</e>
    </exceptions>
    <params>
      <param>
        <type>RandomAccessFile</type>
        <name>apk</name>
      </param>
      <param>
        <type>SignatureInfo</type>
        <name>signatureInfo</name>
      </param>
      <param>
        <type>ByteBufferFactory</type>
        <name>bufferFactory</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getWindowsOnAllDisplays">
    <id>android.app.UiAutomation.getWindowsOnAllDisplays( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="readFromXml">
    <id>android.app.admin.IntentFilterPolicyKey.readFromXml( TypedXmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="currentGnssTimeClock">
    <id>android.os.SystemClock.currentGnssTimeClock( )</id>
    <exceptions>
      <e>DateTimeException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="captureBurstRequests">
    <id>android.hardware.camera2.impl.CameraCaptureSessionImpl.captureBurstRequests( List Executor CaptureCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>requests</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="copyFileOrThrow">
    <id>android.os.FileUtils.copyFileOrThrow( File File )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>srcFile</name>
      </param>
      <param>
        <type>File</type>
        <name>destFile</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="removeAllDynamicShortcuts">
    <id>android.content.pm.ShortcutManager.removeAllDynamicShortcuts( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="openOrCreateDatabase">
    <id>android.content.Context.openOrCreateDatabase( String int CursorFactory DatabaseErrorHandler )</id>
    <exceptions>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>mode</name>
      </param>
      <param>
        <type>CursorFactory</type>
        <name>factory</name>
      </param>
      <param>
        <type>DatabaseErrorHandler</type>
        <name>errorHandler</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="verify">
    <id>android.util.apk.SourceStampVerifier.verify( SignatureInfo Map byte[] )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>SignatureInfo</type>
        <name>signatureInfo</name>
      </param>
      <param>
        <type>Map</type>
        <name>signatureSchemeDigests</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>sourceStampCertificateDigest</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="loadLayoutAnimation">
    <id>android.view.animation.AnimationUtils.loadLayoutAnimation( Context int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setRepeatingBurst">
    <id>android.hardware.camera2.impl.CameraCaptureSessionImpl.setRepeatingBurst( List CaptureCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>requests</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parse">
    <id>android.content.pm.VerifierDeviceIdentity.parse( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>deviceIdentity</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="skip">
    <id>android.util.Base64InputStream.skip( long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>n</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isActivePasswordSufficient">
    <id>android.app.admin.DevicePolicyManager.isActivePasswordSufficient( )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setScrollable">
    <id>android.view.accessibility.AccessibilityRecord.setScrollable( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>scrollable</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPermissionInfo">
    <id>android.content.pm.PackageManager.getPermissionInfo( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>permName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nativePidFdOpen">
    <id>android.os.Process.nativePidFdOpen( int int )</id>
    <exceptions>
      <e>ErrnoException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>pid</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="enforcePermission">
    <id>android.app.admin.DevicePolicyManagerInternal.enforcePermission( String String int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>callerPackage</name>
      </param>
      <param>
        <type>String</type>
        <name>permission</name>
      </param>
      <param>
        <type>int</type>
        <name>targetUserId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="pauseTranslation">
    <id>android.view.translation.UiTranslationManager.pauseTranslation( ActivityId )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>ActivityId</type>
        <name>activityId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="peekFirst">
    <id>android.util.LongArrayQueue.peekFirst( )</id>
    <exceptions>
      <e>NoSuchElementException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="sendRelativeEvent">
    <id>android.hardware.input.VirtualMouse.sendRelativeEvent( VirtualMouseRelativeEvent )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>VirtualMouseRelativeEvent</type>
        <name>event</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="clearScores">
    <id>android.net.NetworkScoreManager.clearScores( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="preCreateUser">
    <id>android.os.UserManager.preCreateUser( String )</id>
    <exceptions>
      <e>UserOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>userType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getCameraAudioRestriction">
    <id>android.hardware.camera2.CameraDevice.getCameraAudioRestriction( )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getLongSupportMessage">
    <id>android.app.admin.DevicePolicyManager.getLongSupportMessage( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="performBackup">
    <id>android.app.backup.BackupHelperDispatcher.performBackup( ParcelFileDescriptor BackupDataOutput ParcelFileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>oldState</name>
      </param>
      <param>
        <type>BackupDataOutput</type>
        <name>data</name>
      </param>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>newState</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parseVerityDigestAndVerifySourceLength">
    <id>android.util.apk.ApkSigningBlockUtils.parseVerityDigestAndVerifySourceLength( byte[] long SignatureInfo )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>data</name>
      </param>
      <param>
        <type>long</type>
        <name>fileSize</name>
      </param>
      <param>
        <type>SignatureInfo</type>
        <name>signatureInfo</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="peekFastDrawable">
    <id>android.app.WallpaperManager.peekFastDrawable( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getFont">
    <id>android.content.res.Resources.getFont( TypedValue int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedValue</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="loadXmlResourceParser">
    <id>android.content.res.Resources.loadXmlResourceParser( int String )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="startIntentSenderForResult">
    <id>android.app.Fragment.startIntentSenderForResult( IntentSender int Intent int int int Bundle )</id>
    <exceptions>
      <e>IntentSender.SendIntentException</e>
    </exceptions>
    <params>
      <param>
        <type>IntentSender</type>
        <name>intent</name>
      </param>
      <param>
        <type>int</type>
        <name>requestCode</name>
      </param>
      <param>
        <type>Intent</type>
        <name>fillInIntent</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsMask</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsValues</name>
      </param>
      <param>
        <type>int</type>
        <name>extraFlags</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="query">
    <id>android.content.ContentProviderClient.query( Uri String[] String String[] String CancellationSignal )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String[]</type>
        <name>projection</name>
      </param>
      <param>
        <type>String</type>
        <name>selection</name>
      </param>
      <param>
        <type>String[]</type>
        <name>selectionArgs</name>
      </param>
      <param>
        <type>String</type>
        <name>sortOrder</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="loadAnimation">
    <id>android.view.animation.AnimationUtils.loadAnimation( Context int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getBoolean">
    <id>android.content.SharedPreferences.getBoolean( String boolean )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>key</name>
      </param>
      <param>
        <type>boolean</type>
        <name>defValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="schedule">
    <id>android.app.servertransaction.ClientTransaction.schedule( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="copyToInt64Array">
    <id>android.os.HwBlob.copyToInt64Array( long long[] int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>long[]</type>
        <name>array</name>
      </param>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="readByte">
    <id>android.view.inspector.PropertyReader.readByte( int byte )</id>
    <exceptions>
      <e>PropertyTypeMismatchException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>byte</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getProfileOwner">
    <id>android.app.admin.DevicePolicyManager.getProfileOwner( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="processingInstruction">
    <id>android.content.DefaultDataHandler.processingInstruction( String String )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>target</name>
      </param>
      <param>
        <type>String</type>
        <name>data</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="registerNetworkScoreCache">
    <id>android.net.NetworkScoreManager.registerNetworkScoreCache( int INetworkScoreCache int )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>networkType</name>
      </param>
      <param>
        <type>INetworkScoreCache</type>
        <name>scoreCache</name>
      </param>
      <param>
        <type>int</type>
        <name>filterType</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="clearDeviceOwnerApp">
    <id>android.app.admin.DevicePolicyManager.clearDeviceOwnerApp( String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readChar">
    <id>android.view.inspector.PropertyReader.readChar( int char )</id>
    <exceptions>
      <e>PropertyTypeMismatchException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>char</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getFileDescriptor">
    <id>android.os.NativeHandle.getFileDescriptor( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getColor">
    <id>android.content.Context.getColor( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getTargetSdkVersion">
    <id>android.content.pm.PackageManager.getTargetSdkVersion( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="saveToXml">
    <id>android.hardware.display.BrightnessConfiguration.saveToXml( TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>serializer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="finalizeOutputConfigurations">
    <id>android.hardware.camera2.CameraCaptureSession.finalizeOutputConfigurations( List )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>outputConfigs</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readFromXml">
    <id>android.app.admin.PolicyKey.readFromXml( TypedXmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addView">
    <id>android.widget.AdapterView.addView( View )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>child</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="capture">
    <id>android.hardware.camera2.impl.CameraExtensionSessionImpl.capture( CaptureRequest Executor ExtensionCaptureCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>ExtensionCaptureCallback</type>
        <name>listener</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isSessionConfigurationSupported">
    <id>android.hardware.camera2.CameraDevice.isSessionConfigurationSupported( SessionConfiguration )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>SessionConfiguration</type>
        <name>sessionConfig</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readEventsOnWrapping">
    <id>android.app.admin.SecurityLog.readEventsOnWrapping( long Collection )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>timestamp</name>
      </param>
      <param>
        <type>Collection</type>
        <name>output</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createInMemory">
    <id>android.database.sqlite.SQLiteDatabase.createInMemory( OpenParams )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>OpenParams</type>
        <name>openParams</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openFile">
    <id>android.provider.DocumentsProvider.openFile( Uri String CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="checkUriPermission">
    <id>android.content.IContentProvider.checkUriPermission( AttributionSource Uri int int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>int</type>
        <name>uid</name>
      </param>
      <param>
        <type>int</type>
        <name>modeFlags</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="relinquishUpdateOwnership">
    <id>android.content.pm.PackageManager.relinquishUpdateOwnership( String )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>targetPackage</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDomainVerificationInfo">
    <id>android.content.pm.verify.domain.DomainVerificationManager.getDomainVerificationInfo( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="start">
    <id>android.os.ZygoteProcess.start( String String int int int[] int int int String String String String String String int boolean long[] Map Map boolean boolean String[] )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>processClass</name>
      </param>
      <param>
        <type>String</type>
        <name>niceName</name>
      </param>
      <param>
        <type>int</type>
        <name>uid</name>
      </param>
      <param>
        <type>int</type>
        <name>gid</name>
      </param>
      <param>
        <type>int[]</type>
        <name>gids</name>
      </param>
      <param>
        <type>int</type>
        <name>runtimeFlags</name>
      </param>
      <param>
        <type>int</type>
        <name>mountExternal</name>
      </param>
      <param>
        <type>int</type>
        <name>targetSdkVersion</name>
      </param>
      <param>
        <type>String</type>
        <name>seInfo</name>
      </param>
      <param>
        <type>String</type>
        <name>abi</name>
      </param>
      <param>
        <type>String</type>
        <name>instructionSet</name>
      </param>
      <param>
        <type>String</type>
        <name>appDataDir</name>
      </param>
      <param>
        <type>String</type>
        <name>invokeWith</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>zygotePolicyFlags</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isTopApp</name>
      </param>
      <param>
        <type>long[]</type>
        <name>disabledCompatChanges</name>
      </param>
      <param>
        <type>Map</type>
        <name>pkgDataInfoMap</name>
      </param>
      <param>
        <type>Map</type>
        <name>allowlistedDataInfoList</name>
      </param>
      <param>
        <type>boolean</type>
        <name>bindMountAppsData</name>
      </param>
      <param>
        <type>boolean</type>
        <name>bindMountAppStorageDirs</name>
      </param>
      <param>
        <type>String[]</type>
        <name>zygoteArgs</name>
      </param>
    </params>
    <arity>22</arity>
  </method>
  <method name="PeopleManager">
    <id>android.app.people.PeopleManager.PeopleManager( Context )</id>
    <exceptions>
      <e>ServiceManager.ServiceNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getHistoricalOps">
    <id>android.app.AppOpsManager.getHistoricalOps( HistoricalOpsRequest Executor Consumer )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>HistoricalOpsRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>Consumer</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="clone">
    <id>android.widget.RemoteViews.clone( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="WifiSsidPolicy">
    <id>android.app.admin.WifiSsidPolicy.WifiSsidPolicy( int Set )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>policyType</name>
      </param>
      <param>
        <type>Set</type>
        <name>ssids</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="registerForNotifications">
    <id>android.os.ServiceManager.registerForNotifications( String IServiceCallback )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>IServiceCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="loadValues">
    <id>android.animation.AnimatorInflater.loadValues( Resources Theme XmlPullParser AttributeSet )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="createApplicationContext">
    <id>android.app.ContextImpl.createApplicationContext( ApplicationInfo int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ApplicationInfo</type>
        <name>application</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getType">
    <id>android.content.LoggingContentInterface.getType( Uri )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isResetPasswordTokenActive">
    <id>android.app.admin.DevicePolicyManager.isResetPasswordTokenActive( ComponentName )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="loadStateListAnimator">
    <id>android.animation.AnimatorInflater.loadStateListAnimator( Context int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getChainSignatures">
    <id>android.content.pm.Signature.getChainSignatures( )</id>
    <exceptions>
      <e>CertificateEncodingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="call">
    <id>android.content.LoggingContentInterface.call( String String String Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>authority</name>
      </param>
      <param>
        <type>String</type>
        <name>method</name>
      </param>
      <param>
        <type>String</type>
        <name>arg</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="copyPermissions">
    <id>android.os.FileUtils.copyPermissions( File File )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>from</name>
      </param>
      <param>
        <type>File</type>
        <name>to</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readEmbeddedHidlMemory">
    <id>android.os.HwParcel.readEmbeddedHidlMemory( long long long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>fieldHandle</name>
      </param>
      <param>
        <type>long</type>
        <name>parentHandle</name>
      </param>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getQuantityText">
    <id>android.content.res.Resources.getQuantityText( int int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>quantity</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="queryRecentDocuments">
    <id>android.provider.DocumentsProvider.queryRecentDocuments( String String[] Bundle CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>rootId</name>
      </param>
      <param>
        <type>String[]</type>
        <name>projection</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>queryArgs</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="captureBurstRequests">
    <id>android.hardware.camera2.CameraCaptureSession.captureBurstRequests( List Executor CaptureCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>requests</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>listener</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getEntity">
    <id>android.view.textclassifier.TextSelection.getEntity( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPropertyAsUser">
    <id>android.content.pm.PackageManager.getPropertyAsUser( String String String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>String</type>
        <name>className</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setThumbnail">
    <id>android.hardware.camera2.DngCreator.setThumbnail( Image )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Image</type>
        <name>pixels</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getOutputMinFrameDuration">
    <id>android.hardware.camera2.params.StreamConfigurationMap.getOutputMinFrameDuration( Class Size )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>klass</name>
      </param>
      <param>
        <type>Size</type>
        <name>size</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="start">
    <id>android.security.keystore.recovery.RecoverySession.start( String CertPath byte[] byte[] List )</id>
    <exceptions>
      <e>InternalRecoveryServiceException</e>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>rootCertificateAlias</name>
      </param>
      <param>
        <type>CertPath</type>
        <name>verifierCertPath</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>vaultParams</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>vaultChallenge</name>
      </param>
      <param>
        <type>List</type>
        <name>secrets</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="write">
    <id>android.hardware.SerialPort.write( ByteBuffer int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ByteBuffer</type>
        <name>buffer</name>
      </param>
      <param>
        <type>int</type>
        <name>length</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="initRecoveryService">
    <id>android.security.keystore.recovery.RecoveryController.initRecoveryService( String byte[] byte[] )</id>
    <exceptions>
      <e>InternalRecoveryServiceException</e>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>rootCertificateAlias</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>certificateFile</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>signatureFile</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getDrawableForDensity">
    <id>android.content.res.Resources.getDrawableForDensity( int int Theme )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>density</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getIntArray">
    <id>android.content.res.Resources.getIntArray( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getTextArray">
    <id>android.content.res.Resources.getTextArray( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeToXml">
    <id>android.content.pm.UserProperties.writeToXml( TypedXmlSerializer )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>serializer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="executeShellCommandWithStderr">
    <id>android.app.UiAutomationConnection.executeShellCommandWithStderr( String ParcelFileDescriptor ParcelFileDescriptor ParcelFileDescriptor )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>command</name>
      </param>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>sink</name>
      </param>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>source</name>
      </param>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>stderrSink</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="clear">
    <id>android.app.WallpaperManager.clear( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="insert">
    <id>android.content.DefaultDataHandler.insert( ContentResolver String )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>ContentResolver</type>
        <name>contentResolver</name>
      </param>
      <param>
        <type>String</type>
        <name>in</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="dumpViewProperties">
    <id>android.view.ViewDebug.dumpViewProperties( Context Object BufferedWriter String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>Object</type>
        <name>view</name>
      </param>
      <param>
        <type>BufferedWriter</type>
        <name>out</name>
      </param>
      <param>
        <type>String</type>
        <name>prefix</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="requestDragging">
    <id>android.accessibilityservice.TouchInteractionController.requestDragging( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>pointerId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="instantiate">
    <id>android.app.Fragment.instantiate( Context String Bundle )</id>
    <exceptions>
      <e>InstantiationException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>String</type>
        <name>fname</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>args</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="openTypedAssetFile">
    <id>android.content.ContentProviderClient.openTypedAssetFile( Uri String Bundle CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeTypeFilter</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>opts</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="ofDigitalSource">
    <id>android.hardware.hdmi.HdmiTimerRecordSources.ofDigitalSource( TimerInfo DigitalServiceSource )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>TimerInfo</type>
        <name>timerInfo</name>
      </param>
      <param>
        <type>DigitalServiceSource</type>
        <name>source</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nativeLoad">
    <id>android.content.res.ApkAssets.nativeLoad( int String int AssetsProvider )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>AssetsProvider</type>
        <name>asset</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="captureBurstRequests">
    <id>android.hardware.camera2.impl.CameraOfflineSessionImpl.captureBurstRequests( List Executor CaptureCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>requests</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setThreadScheduler">
    <id>android.os.Process.setThreadScheduler( int int int )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tid</name>
      </param>
      <param>
        <type>int</type>
        <name>policy</name>
      </param>
      <param>
        <type>int</type>
        <name>priority</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="update">
    <id>android.content.IContentProvider.update( String Uri ContentValues String String[] )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>callingPkg</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>ContentValues</type>
        <name>values</name>
      </param>
      <param>
        <type>String</type>
        <name>selection</name>
      </param>
      <param>
        <type>String[]</type>
        <name>selectionArgs</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="CredentialDescription">
    <id>android.credentials.CredentialDescription.CredentialDescription( String Set List )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>Set</type>
        <name>supportedElementKeys</name>
      </param>
      <param>
        <type>List</type>
        <name>credentialEntries</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="computeContentDigestsPer1MbChunk">
    <id>android.util.apk.ApkSigningBlockUtils.computeContentDigestsPer1MbChunk( int[] DataSource[] )</id>
    <exceptions>
      <e>DigestException</e>
    </exceptions>
    <params>
      <param>
        <type>int[]</type>
        <name>digestAlgorithms</name>
      </param>
      <param>
        <type>DataSource[]</type>
        <name>contents</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setAutofillId">
    <id>android.view.View.setAutofillId( AutofillId )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>AutofillId</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="commitToSystemServer">
    <id>android.content.om.OverlayManager.commitToSystemServer( OverlayManagerTransaction )</id>
    <exceptions>
      <e>Exception</e>
    </exceptions>
    <params>
      <param>
        <type>OverlayManagerTransaction</type>
        <name>transaction</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startShortcut">
    <id>android.content.pm.LauncherApps.startShortcut( ShortcutInfo Rect Bundle )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ShortcutInfo</type>
        <name>shortcut</name>
      </param>
      <param>
        <type>Rect</type>
        <name>sourceBounds</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>startActivityOptions</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="DeviceAdminInfo">
    <id>android.app.admin.DeviceAdminInfo.DeviceAdminInfo( Context ActivityInfo )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>ActivityInfo</type>
        <name>activityInfo</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getCameraIdListNoLazy">
    <id>android.hardware.camera2.CameraManager.getCameraIdListNoLazy( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="readFromStream">
    <id>android.content.pm.Checksum.readFromStream( DataInputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataInputStream</type>
        <name>dis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isExtraLatencyPresent">
    <id>android.hardware.camera2.params.DynamicRangeProfiles.isExtraLatencyPresent( long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>profile</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="clearApplicationUserData">
    <id>android.app.admin.DevicePolicyManager.clearApplicationUserData( ComponentName String Executor OnClearApplicationUserDataListener )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>OnClearApplicationUserDataListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="addEnum">
    <id>android.security.keymaster.KeymasterArguments.addEnum( int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tag</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="finalize">
    <id>android.content.res.loader.ResourcesProvider.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="captureBurst">
    <id>android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl.captureBurst( List CaptureCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>requests</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>listener</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getInt">
    <id>android.content.SharedPreferences.getInt( String int )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>key</name>
      </param>
      <param>
        <type>int</type>
        <name>defValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="scheduleUpdateOnBoot">
    <id>android.os.RecoverySystem.scheduleUpdateOnBoot( Context File )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>File</type>
        <name>packageFile</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getExtraExcludeDirsIfAny">
    <id>android.app.backup.BackupAgent.getExtraExcludeDirsIfAny( Context )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="buildRequestPermissionsIntent">
    <id>android.content.pm.PackageManager.buildRequestPermissionsIntent( String[] )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>String[]</type>
        <name>permissions</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getWallpaperFile">
    <id>android.app.WallpaperManager.getWallpaperFile( int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>which</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onOutputSurface">
    <id>android.hardware.camera2.impl.CameraExtensionJpegProcessor.onOutputSurface( Surface int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readFromProto">
    <id>android.content.res.Configuration.readFromProto( ProtoInputStream long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ProtoInputStream</type>
        <name>protoInputStream</name>
      </param>
      <param>
        <type>long</type>
        <name>fieldId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readVarint">
    <id>android.util.proto.ProtoInputStream.readVarint( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="addTab">
    <id>android.widget.TabHost.addTab( TabSpec )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>TabSpec</type>
        <name>tabSpec</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="putString">
    <id>android.os.HwBlob.putString( long String )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>String</type>
        <name>x</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addView">
    <id>android.widget.AdapterView.addView( View int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>child</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setWallpaper">
    <id>android.app.ContextImpl.setWallpaper( Bitmap )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Bitmap</type>
        <name>bitmap</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="enforceCallingUid">
    <id>android.content.AttributionSource.enforceCallingUid( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="bindPermanent">
    <id>android.os.incremental.IncrementalStorage.bindPermanent( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>targetPath</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="uncanonicalize">
    <id>android.content.IContentProvider.uncanonicalize( AttributionSource Uri )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="removePermission">
    <id>android.content.pm.PackageManager.removePermission( String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>permName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="mapIntFlag">
    <id>android.view.inspector.PropertyMapper.mapIntFlag( String int IntFunction )</id>
    <exceptions>
      <e>PropertyConflictException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>attributeId</name>
      </param>
      <param>
        <type>IntFunction</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="writeEntry">
    <id>android.util.jar.StrictJarManifest.writeEntry( OutputStream Name String CharsetEncoder ByteBuffer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>OutputStream</type>
        <name>os</name>
      </param>
      <param>
        <type>Name</type>
        <name>name</name>
      </param>
      <param>
        <type>String</type>
        <name>value</name>
      </param>
      <param>
        <type>CharsetEncoder</type>
        <name>encoder</name>
      </param>
      <param>
        <type>ByteBuffer</type>
        <name>bBuf</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="updateState">
    <id>android.service.voice.AbstractDetector.updateState( PersistableBundle SharedMemory )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistableBundle</type>
        <name>options</name>
      </param>
      <param>
        <type>SharedMemory</type>
        <name>sharedMemory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setBitmap">
    <id>android.app.WallpaperManager.setBitmap( Bitmap Rect boolean int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Bitmap</type>
        <name>fullImage</name>
      </param>
      <param>
        <type>Rect</type>
        <name>visibleCropHint</name>
      </param>
      <param>
        <type>boolean</type>
        <name>allowBackup</name>
      </param>
      <param>
        <type>int</type>
        <name>which</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="SpellCheckerInfo">
    <id>android.view.textservice.SpellCheckerInfo.SpellCheckerInfo( Context ResolveInfo )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>ResolveInfo</type>
        <name>service</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="attachContext">
    <id>android.window.WindowTokenClient.attachContext( Context )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getSockAddress">
    <id>android.net.LocalSocketImpl.getSockAddress( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="copyStreamToWallpaperFile">
    <id>android.app.WallpaperManager.copyStreamToWallpaperFile( InputStream FileOutputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>data</name>
      </param>
      <param>
        <type>FileOutputStream</type>
        <name>fos</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="saveToXml">
    <id>android.app.admin.SystemUpdatePolicy.saveToXml( TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>out</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseMonolithicPackage">
    <id>android.content.pm.PackageParser.parseMonolithicPackage( File int )</id>
    <exceptions>
      <e>PackageParserException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>apkFile</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="open">
    <id>android.content.res.AssetManager.open( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fileName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startSystemDataTransfer">
    <id>android.companion.CompanionDeviceManager.startSystemDataTransfer( int Executor OutcomeReceiver )</id>
    <exceptions>
      <e>DeviceNotAssociatedException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>associationId</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>OutcomeReceiver</type>
        <name>result</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="executeForBlobFileDescriptor">
    <id>android.database.sqlite.SQLiteSession.executeForBlobFileDescriptor( String Object[] int CancellationSignal )</id>
    <exceptions>
      <e>OperationCanceledException</e>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>bindArgs</name>
      </param>
      <param>
        <type>int</type>
        <name>connectionFlags</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="performAction">
    <id>android.view.accessibility.AccessibilityNodeInfo.performAction( int Bundle )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>action</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>arguments</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getValue">
    <id>android.content.res.ResourcesImpl.getValue( int TypedValue boolean )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>TypedValue</type>
        <name>outValue</name>
      </param>
      <param>
        <type>boolean</type>
        <name>resolveRefs</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setOnAccessibilityEventListener">
    <id>android.app.UiAutomation.setOnAccessibilityEventListener( OnAccessibilityEventListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OnAccessibilityEventListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="loadFromTable">
    <id>android.content.res.loader.ResourcesProvider.loadFromTable( ParcelFileDescriptor long long AssetsProvider )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>fileDescriptor</name>
      </param>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>long</type>
        <name>length</name>
      </param>
      <param>
        <type>AssetsProvider</type>
        <name>assetsProvider</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="updateFromXml">
    <id>android.content.pm.UserProperties.updateFromXml( TypedXmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="read_native">
    <id>android.net.LocalSocketImpl.read_native( FileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="bind">
    <id>android.os.incremental.IncrementalStorage.bind( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>targetPath</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="ClearCredentialStateException">
    <id>android.credentials.ClearCredentialStateException.ClearCredentialStateException( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isPackageSuspendedForUser">
    <id>android.content.pm.PackageManager.isPackageSuspendedForUser( String int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="native_request_wait">
    <id>android.hardware.usb.UsbDeviceConnection.native_request_wait( long )</id>
    <exceptions>
      <e>TimeoutException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>timeout</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="requestCursorUpdates">
    <id>android.view.inputmethod.InputConnectionWrapper.requestCursorUpdates( int int )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>cursorUpdateMode</name>
      </param>
      <param>
        <type>int</type>
        <name>cursorUpdateFilter</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="generateApkVerityDigestAtLeafLevel">
    <id>android.util.apk.VerityBuilder.generateApkVerityDigestAtLeafLevel( RandomAccessFile SignatureInfo byte[] ByteBuffer )</id>
    <exceptions>
      <e>DigestException</e>
      <e>IOException</e>
      <e>NoSuchAlgorithmException</e>
    </exceptions>
    <params>
      <param>
        <type>RandomAccessFile</type>
        <name>apk</name>
      </param>
      <param>
        <type>SignatureInfo</type>
        <name>signatureInfo</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>salt</name>
      </param>
      <param>
        <type>ByteBuffer</type>
        <name>output</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setWallpaper">
    <id>android.app.ContextImpl.setWallpaper( InputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>data</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPasswordMinimumNumeric">
    <id>android.app.admin.DevicePolicyManager.setPasswordMinimumNumeric( ComponentName int )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>int</type>
        <name>length</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="buildPermissionTransferUserConsentIntent">
    <id>android.companion.CompanionDeviceManager.buildPermissionTransferUserConsentIntent( int )</id>
    <exceptions>
      <e>DeviceNotAssociatedException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>associationId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readStringListToIntArray">
    <id>android.app.admin.PreferentialNetworkServiceConfig.readStringListToIntArray( TypedXmlPullParser String )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>String</type>
        <name>tag</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPeerCredentials">
    <id>android.net.LocalSocketImpl.getPeerCredentials( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="add">
    <id>android.util.IntArray.add( int int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseMetaData">
    <id>android.content.pm.PackageParser.parseMetaData( Resources XmlResourceParser Bundle String[] )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>data</name>
      </param>
      <param>
        <type>String[]</type>
        <name>outError</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="openRawResource">
    <id>android.content.res.Resources.openRawResource( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="GetCredentialException">
    <id>android.credentials.GetCredentialException.GetCredentialException( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="bounce">
    <id>android.content.pm.Signature.bounce( CertificateFactory Signature )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>CertificateFactory</type>
        <name>cf</name>
      </param>
      <param>
        <type>Signature</type>
        <name>s</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="finalize">
    <id>android.view.InputEventReceiver.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="deleteAt">
    <id>android.text.PackedIntVector.deleteAt( int int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>row</name>
      </param>
      <param>
        <type>int</type>
        <name>count</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="waitForState">
    <id>android.os.SystemService.waitForState( String State long )</id>
    <exceptions>
      <e>TimeoutException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>service</name>
      </param>
      <param>
        <type>State</type>
        <name>state</name>
      </param>
      <param>
        <type>long</type>
        <name>timeoutMillis</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="read">
    <id>android.hardware.SerialPort.read( ByteBuffer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ByteBuffer</type>
        <name>buffer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openDownloadedFile">
    <id>android.app.DownloadManager.openDownloadedFile( long )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setText">
    <id>android.view.accessibility.AccessibilityNodeInfo.setText( CharSequence )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>text</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setParcelable">
    <id>android.os.ParcelableHolder.setParcelable( Parcelable )</id>
    <exceptions>
      <e>BadParcelableException</e>
    </exceptions>
    <params>
      <param>
        <type>Parcelable</type>
        <name>p</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setUninstallBlocked">
    <id>android.app.admin.DevicePolicyManager.setUninstallBlocked( ComponentName String boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>boolean</type>
        <name>uninstallBlocked</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getForceEphemeralUsers">
    <id>android.app.admin.DevicePolicyManager.getForceEphemeralUsers( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="restoreFromXml">
    <id>android.content.Intent.restoreFromXml( XmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onChallengeGenerated">
    <id>android.hardware.face.FaceServiceReceiver.onChallengeGenerated( int int long )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>sensorId</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
      <param>
        <type>long</type>
        <name>challenge</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setSystemAudioCaptioningEnabled">
    <id>android.view.accessibility.CaptioningManager.setSystemAudioCaptioningEnabled( boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>isEnabled</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createReliablePipe">
    <id>android.os.ParcelFileDescriptor.createReliablePipe( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="decodeBase64Cert">
    <id>android.security.keystore.recovery.X509CertificateParsingUtils.decodeBase64Cert( String )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>string</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onRead">
    <id>android.os.ProxyFileDescriptorCallback.onRead( long int byte[] )</id>
    <exceptions>
      <e>ErrnoException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>data</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getCharacterFlags">
    <id>android.view.inputmethod.TextBoundsInfo.getCharacterFlags( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="tryUnregisterService">
    <id>android.os.ServiceManagerProxy.tryUnregisterService( String IBinder )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>IBinder</type>
        <name>service</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="value">
    <id>android.util.JsonWriter.value( boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onActivityLaunchOnSecondaryDisplayRerouted">
    <id>android.app.TaskStackListener.onActivityLaunchOnSecondaryDisplayRerouted( RunningTaskInfo int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>RunningTaskInfo</type>
        <name>taskInfo</name>
      </param>
      <param>
        <type>int</type>
        <name>requestedDisplayId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="writeToXmlFile">
    <id>android.app.admin.ParcelableResource.writeToXmlFile( TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>xmlSerializer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="MemoryIntArray">
    <id>android.util.MemoryIntArray.MemoryIntArray( int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="restoreFile">
    <id>android.app.backup.FullBackup.restoreFile( ParcelFileDescriptor long int long long File )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>data</name>
      </param>
      <param>
        <type>long</type>
        <name>size</name>
      </param>
      <param>
        <type>int</type>
        <name>type</name>
      </param>
      <param>
        <type>long</type>
        <name>mode</name>
      </param>
      <param>
        <type>long</type>
        <name>mtime</name>
      </param>
      <param>
        <type>File</type>
        <name>outFile</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="getLayoutDimension">
    <id>android.content.res.TypedArray.getLayoutDimension( int int )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>int</type>
        <name>defValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="rInflate">
    <id>android.view.LayoutInflater.rInflate( XmlPullParser View Context AttributeSet boolean )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>View</type>
        <name>parent</name>
      </param>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
      <param>
        <type>boolean</type>
        <name>finishInflate</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="addOnPreDrawListener">
    <id>android.view.ViewTreeObserver.addOnPreDrawListener( OnPreDrawListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OnPreDrawListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="putFloat">
    <id>android.os.HwBlob.putFloat( long float )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>float</type>
        <name>x</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getTextBeforeCursor">
    <id>android.view.inputmethod.InputConnectionWrapper.getTextBeforeCursor( int int )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>n</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="verifyPackageCompatibility">
    <id>android.os.RecoverySystem.verifyPackageCompatibility( InputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>inputStream</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="findZipEndOfCentralDirectoryRecord">
    <id>android.util.apk.ZipUtils.findZipEndOfCentralDirectoryRecord( RandomAccessFile int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>RandomAccessFile</type>
        <name>zip</name>
      </param>
      <param>
        <type>int</type>
        <name>maxCommentSize</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="finalize">
    <id>android.hardware.camera2.DngCreator.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getEstimatedCaptureLatencyRangeMillis">
    <id>android.hardware.camera2.CameraExtensionCharacteristics.getEstimatedCaptureLatencyRangeMillis( int Size int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>extension</name>
      </param>
      <param>
        <type>Size</type>
        <name>captureOutputSize</name>
      </param>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="copySpansFrom">
    <id>android.text.TextUtils.copySpansFrom( Spanned int int Class Spannable int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>Spanned</type>
        <name>source</name>
      </param>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>end</name>
      </param>
      <param>
        <type>Class</type>
        <name>kind</name>
      </param>
      <param>
        <type>Spannable</type>
        <name>dest</name>
      </param>
      <param>
        <type>int</type>
        <name>destoff</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="init">
    <id>android.os.RevocableFileDescriptor.init( Context FileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setStateDescription">
    <id>android.view.accessibility.AccessibilityNodeInfo.setStateDescription( CharSequence )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>stateDescription</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startIntentSender">
    <id>android.app.Activity.startIntentSender( IntentSender Intent int int int Bundle )</id>
    <exceptions>
      <e>IntentSender.SendIntentException</e>
    </exceptions>
    <params>
      <param>
        <type>IntentSender</type>
        <name>intent</name>
      </param>
      <param>
        <type>Intent</type>
        <name>fillInIntent</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsMask</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsValues</name>
      </param>
      <param>
        <type>int</type>
        <name>extraFlags</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="showSensorUseDialog">
    <id>android.hardware.SensorPrivacyManager.showSensorUseDialog( int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>sensor</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="rebootWithLskf">
    <id>android.os.RecoverySystem.rebootWithLskf( String String boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>String</type>
        <name>reason</name>
      </param>
      <param>
        <type>boolean</type>
        <name>slotSwitch</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="putNativeHandle">
    <id>android.os.HwBlob.putNativeHandle( long NativeHandle )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>NativeHandle</type>
        <name>x</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="call">
    <id>android.content.ContentProviderClient.call( String String String Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>authority</name>
      </param>
      <param>
        <type>String</type>
        <name>method</name>
      </param>
      <param>
        <type>String</type>
        <name>arg</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="createInputStream">
    <id>android.content.res.AssetFileDescriptor.createInputStream( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="loadFromPath">
    <id>android.content.res.ApkAssets.loadFromPath( String int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="newActivity">
    <id>android.app.Instrumentation.newActivity( Class Context IBinder Application Intent ActivityInfo CharSequence Activity String Object )</id>
    <exceptions>
      <e>InstantiationException</e>
      <e>IllegalAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>clazz</name>
      </param>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>IBinder</type>
        <name>token</name>
      </param>
      <param>
        <type>Application</type>
        <name>application</name>
      </param>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
      <param>
        <type>ActivityInfo</type>
        <name>info</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>title</name>
      </param>
      <param>
        <type>Activity</type>
        <name>parent</name>
      </param>
      <param>
        <type>String</type>
        <name>id</name>
      </param>
      <param>
        <type>Object</type>
        <name>lastNonConfigurationInstance</name>
      </param>
    </params>
    <arity>10</arity>
  </method>
  <method name="setRepeatingBurst">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.setRepeatingBurst( List CaptureCallback Executor )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>requests</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="uncanonicalizeAsync">
    <id>android.content.ContentProviderProxy.uncanonicalizeAsync( AttributionSource Uri RemoteCallback )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>RemoteCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setParent">
    <id>android.view.accessibility.AccessibilityNodeInfo.setParent( View )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>parent</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getWebViewProviderClass">
    <id>android.webkit.WebViewFactory.getWebViewProviderClass( ClassLoader )</id>
    <exceptions>
      <e>ClassNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ClassLoader</type>
        <name>clazzLoader</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="bytesToId">
    <id>android.os.incremental.IncrementalStorage.bytesToId( byte[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>bytes</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openSession">
    <id>android.content.pm.PackageInstaller.openSession( int )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>sessionId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createFromXml">
    <id>android.content.pm.XmlSerializerAndParser.createFromXml( TypedXmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startActivityFromChild">
    <id>android.app.Activity.startActivityFromChild( Activity Intent int Bundle )</id>
    <exceptions>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Activity</type>
        <name>child</name>
      </param>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
      <param>
        <type>int</type>
        <name>requestCode</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="dumpEncoded">
    <id>android.view.ViewDebug.dumpEncoded( View OutputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>view</name>
      </param>
      <param>
        <type>OutputStream</type>
        <name>out</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="copyToInt8Array">
    <id>android.os.HwBlob.copyToInt8Array( long byte[] int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>array</name>
      </param>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createCaptureSession">
    <id>android.hardware.camera2.CameraDevice.createCaptureSession( SessionConfiguration )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>SessionConfiguration</type>
        <name>config</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="feedIntoDataDigester">
    <id>android.util.apk.DataSource.feedIntoDataDigester( DataDigester long int )</id>
    <exceptions>
      <e>DigestException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataDigester</type>
        <name>md</name>
      </param>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="injectInputEventToInputFilter">
    <id>android.app.UiAutomationConnection.injectInputEventToInputFilter( InputEvent )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>InputEvent</type>
        <name>event</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="loadContextDescription">
    <id>android.app.WallpaperInfo.loadContextDescription( PackageManager )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>PackageManager</type>
        <name>pm</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isOutputSupportedFor">
    <id>android.hardware.camera2.params.RecommendedStreamConfigurationMap.isOutputSupportedFor( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="taskStarted">
    <id>android.hardware.camera2.utils.TaskSingleDrainer.taskStarted( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createUnEnrollIntent">
    <id>android.service.voice.AlwaysOnHotwordDetector.createUnEnrollIntent( )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getValue">
    <id>android.content.res.Resources.getValue( String TypedValue boolean )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>TypedValue</type>
        <name>outValue</name>
      </param>
      <param>
        <type>boolean</type>
        <name>resolveRefs</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="syntaxError">
    <id>android.util.JsonReader.syntaxError( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>message</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="canPackageQuery">
    <id>android.content.pm.PackageManager.canPackageQuery( String String[] )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sourcePackageName</name>
      </param>
      <param>
        <type>String[]</type>
        <name>targetPackageNames</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="unregisterComponentCallbacks">
    <id>android.content.ContextWrapper.unregisterComponentCallbacks( ComponentCallbacks )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentCallbacks</type>
        <name>callback</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setMultiResolutionOutput">
    <id>android.hardware.camera2.params.OutputConfiguration.setMultiResolutionOutput( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setRepeatingBurst">
    <id>android.hardware.camera2.impl.CameraConstrainedHighSpeedCaptureSessionImpl.setRepeatingBurst( List CaptureCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>requests</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>listener</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getRecentlyCommittedRollbacks">
    <id>android.content.rollback.RollbackManager.getRecentlyCommittedRollbacks( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="addVcnUnderlyingNetworkPolicyListener">
    <id>android.net.vcn.VcnManager.addVcnUnderlyingNetworkPolicyListener( Executor VcnUnderlyingNetworkPolicyListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>VcnUnderlyingNetworkPolicyListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setStreamUseCase">
    <id>android.hardware.camera2.params.OutputConfiguration.setStreamUseCase( long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>streamUseCase</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseUsesStaticLibrary">
    <id>android.content.pm.PackageParser.parseUsesStaticLibrary( Package Resources XmlResourceParser String[] )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Package</type>
        <name>pkg</name>
      </param>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>String[]</type>
        <name>outError</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="computeContentDigestsPer1MbChunk">
    <id>android.util.apk.ApkSigningBlockUtils.computeContentDigestsPer1MbChunk( int[] FileDescriptor SignatureInfo )</id>
    <exceptions>
      <e>DigestException</e>
    </exceptions>
    <params>
      <param>
        <type>int[]</type>
        <name>digestAlgorithms</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>apkFileDescriptor</name>
      </param>
      <param>
        <type>SignatureInfo</type>
        <name>signatureInfo</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createSession">
    <id>android.content.pm.PackageInstaller.createSession( SessionParams )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IOException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>SessionParams</type>
        <name>params</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readFrom">
    <id>android.os.incremental.V4Signature.readFrom( byte[] )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>bytes</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startAnimation">
    <id>android.widget.SmartSelectSprite.startAnimation( PointF List Runnable )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>PointF</type>
        <name>start</name>
      </param>
      <param>
        <type>List</type>
        <name>destinationRectangles</name>
      </param>
      <param>
        <type>Runnable</type>
        <name>onAnimationEnd</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setFocusable">
    <id>android.view.accessibility.AccessibilityNodeInfo.setFocusable( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>focusable</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPrimitiveTypeClass">
    <id>android.hardware.camera2.marshal.MarshalHelpers.getPrimitiveTypeClass( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>nativeType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="storeCallComposerPictureAtUri">
    <id>android.provider.CallLog.storeCallComposerPictureAtUri( Context Uri boolean byte[] )</id>
    <exceptions>
      <e>CallComposerLoggingException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>Uri</type>
        <name>insertionUri</name>
      </param>
      <param>
        <type>boolean</type>
        <name>forAllUsers</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>picData</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getCentralDirOffset">
    <id>android.util.apk.ApkSigningBlockUtils.getCentralDirOffset( ByteBuffer long )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ByteBuffer</type>
        <name>eocd</name>
      </param>
      <param>
        <type>long</type>
        <name>eocdOffset</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="bindIsolatedService">
    <id>android.content.Context.bindIsolatedService( Intent int String Executor ServiceConnection )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent</type>
        <name>service</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>String</type>
        <name>instanceName</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>ServiceConnection</type>
        <name>conn</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="writeEntry">
    <id>android.view.ViewDebug.writeEntry( BufferedWriter String String String Object )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>BufferedWriter</type>
        <name>out</name>
      </param>
      <param>
        <type>String</type>
        <name>prefix</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>String</type>
        <name>suffix</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="writeToStream">
    <id>android.util.RecurrenceRule.writeToStream( DataOutputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataOutputStream</type>
        <name>out</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeToStream">
    <id>android.os.PersistableBundle.writeToStream( OutputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>OutputStream</type>
        <name>outputStream</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parsePin">
    <id>android.security.net.config.XmlConfigSource.parsePin( XmlResourceParser )</id>
    <exceptions>
      <e>ParserException</e>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="requestCursorUpdates">
    <id>android.view.inputmethod.InputConnectionWrapper.requestCursorUpdates( int )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>cursorUpdateMode</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isDeviceFinanced">
    <id>android.app.admin.DevicePolicyManager.isDeviceFinanced( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="requestProjection">
    <id>android.app.UiModeManager.requestProjection( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>projectionType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isZip64EndOfCentralDirectoryLocatorPresent">
    <id>android.util.apk.ZipUtils.isZip64EndOfCentralDirectoryLocatorPresent( RandomAccessFile long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>RandomAccessFile</type>
        <name>zip</name>
      </param>
      <param>
        <type>long</type>
        <name>zipEndOfCentralDirectoryPosition</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="close">
    <id>android.hardware.camera2.impl.CameraExtensionSessionImpl.close( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createSocketPair">
    <id>android.os.ParcelFileDescriptor.createSocketPair( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="readLegacyUid">
    <id>android.net.netstats.NetworkStatsDataMigrationUtils.readLegacyUid( Builder DataInput boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Builder</type>
        <name>builder</name>
      </param>
      <param>
        <type>DataInput</type>
        <name>in</name>
      </param>
      <param>
        <type>boolean</type>
        <name>taggedData</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="rInflate">
    <id>android.preference.GenericInflater.rInflate( XmlPullParser T AttributeSet )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>T</type>
        <name>parent</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setPasswordMinimumUpperCase">
    <id>android.app.admin.DevicePolicyManager.setPasswordMinimumUpperCase( ComponentName int )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>int</type>
        <name>length</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="bulkInsert">
    <id>android.content.ContentProviderClient.bulkInsert( Uri ContentValues[] )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>ContentValues[]</type>
        <name>initialValues</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="hasValueOrEmpty">
    <id>android.content.res.TypedArray.hasValueOrEmpty( int )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPackageUidAsUser">
    <id>android.app.ApplicationPackageManager.getPackageUidAsUser( String int int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createExtensionSession">
    <id>android.hardware.camera2.CameraDevice.createExtensionSession( ExtensionSessionConfiguration )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ExtensionSessionConfiguration</type>
        <name>extensionConfiguration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="consumeChildElements">
    <id>android.view.LayoutInflater.consumeChildElements( XmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="rebootPromptAndWipeUserData">
    <id>android.os.RecoverySystem.rebootPromptAndWipeUserData( Context String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>String</type>
        <name>reason</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="close">
    <id>android.hardware.camera2.CameraExtensionSession.close( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="writeInputStream">
    <id>android.hardware.camera2.DngCreator.writeInputStream( OutputStream Size InputStream long )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IOException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>OutputStream</type>
        <name>dngOutput</name>
      </param>
      <param>
        <type>Size</type>
        <name>size</name>
      </param>
      <param>
        <type>InputStream</type>
        <name>pixels</name>
      </param>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="durationOf">
    <id>android.hardware.hdmi.HdmiTimerRecordSources.durationOf( int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hour</name>
      </param>
      <param>
        <type>int</type>
        <name>minute</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="startForeground">
    <id>android.app.Service.startForeground( int Notification int )</id>
    <exceptions>
      <e>MissingForegroundServiceTypeException</e>
      <e>ForegroundServiceStartNotAllowedException</e>
      <e>SecurityException</e>
      <e>InvalidForegroundServiceTypeException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>Notification</type>
        <name>notification</name>
      </param>
      <param>
        <type>int</type>
        <name>foregroundServiceType</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="revokeKeyPairFromApp">
    <id>android.app.admin.DevicePolicyManager.revokeKeyPairFromApp( ComponentName String String )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>alias</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="initializePipeline">
    <id>android.hardware.camera2.impl.CameraExtensionJpegProcessor.initializePipeline( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setRecommendedGlobalProxy">
    <id>android.app.admin.DevicePolicyManager.setRecommendedGlobalProxy( ComponentName ProxyInfo )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>ProxyInfo</type>
        <name>proxyInfo</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setApplicationExemptions">
    <id>android.app.admin.DevicePolicyManager.setApplicationExemptions( String Set )</id>
    <exceptions>
      <e>NameNotFoundException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>Set</type>
        <name>exemptions</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readLiteral">
    <id>android.util.JsonReader.readLiteral( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="finalize">
    <id>android.view.TunnelModeEnabledListener.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="metaStateHasModifiers">
    <id>android.view.KeyEvent.metaStateHasModifiers( int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>metaState</name>
      </param>
      <param>
        <type>int</type>
        <name>modifiers</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="inflate">
    <id>android.view.inputmethod.InlineSuggestion.inflate( Context Size Executor Consumer )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>Size</type>
        <name>size</name>
      </param>
      <param>
        <type>Executor</type>
        <name>callbackExecutor</name>
      </param>
      <param>
        <type>Consumer</type>
        <name>callback</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getOnBackInvokedDispatcher">
    <id>android.app.Activity.getOnBackInvokedDispatcher( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="requestWait">
    <id>android.hardware.usb.UsbDeviceConnection.requestWait( long )</id>
    <exceptions>
      <e>BufferOverflowException</e>
      <e>TimeoutException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>timeout</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="captureSingleRequest">
    <id>android.hardware.camera2.impl.CameraCaptureSessionImpl.captureSingleRequest( CaptureRequest Executor CaptureCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="startIntentSender">
    <id>android.app.ContextImpl.startIntentSender( IntentSender Intent int int int Bundle )</id>
    <exceptions>
      <e>IntentSender.SendIntentException</e>
    </exceptions>
    <params>
      <param>
        <type>IntentSender</type>
        <name>intent</name>
      </param>
      <param>
        <type>Intent</type>
        <name>fillInIntent</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsMask</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsValues</name>
      </param>
      <param>
        <type>int</type>
        <name>extraFlags</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="openFileDescriptor">
    <id>android.content.ContentResolver.openFileDescriptor( Uri String CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setThreadGroupAndCpuset">
    <id>android.os.Process.setThreadGroupAndCpuset( int int )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tid</name>
      </param>
      <param>
        <type>int</type>
        <name>group</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="read">
    <id>android.app.backup.BackupDataInputStream.read( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="queryCratesForUid">
    <id>android.app.usage.StorageStatsManager.queryCratesForUid( UUID int )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
      <e>NameNotFoundException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>UUID</type>
        <name>storageUuid</name>
      </param>
      <param>
        <type>int</type>
        <name>uid</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getResourcesForApplication">
    <id>android.content.pm.PackageManager.getResourcesForApplication( ApplicationInfo Configuration )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ApplicationInfo</type>
        <name>app</name>
      </param>
      <param>
        <type>Configuration</type>
        <name>configuration</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addPeriodicSync">
    <id>android.content.ContentResolver.addPeriodicSync( Account String Bundle long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Account</type>
        <name>account</name>
      </param>
      <param>
        <type>String</type>
        <name>authority</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
      <param>
        <type>long</type>
        <name>pollFrequency</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getKey">
    <id>android.app.backup.BackupDataInput.getKey( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="onRestore">
    <id>android.app.backup.BackupAgentHelper.onRestore( BackupDataInput int ParcelFileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>BackupDataInput</type>
        <name>data</name>
      </param>
      <param>
        <type>int</type>
        <name>appVersionCode</name>
      </param>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>newState</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="registerNetworkScoreCache">
    <id>android.net.NetworkScoreManager.registerNetworkScoreCache( int INetworkScoreCache )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>networkType</name>
      </param>
      <param>
        <type>INetworkScoreCache</type>
        <name>scoreCache</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getMovie">
    <id>android.content.res.Resources.getMovie( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="get">
    <id>android.hardware.camera2.CaptureResult.get( Key )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Key</type>
        <name>key</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onCreateView">
    <id>android.view.LayoutInflater.onCreateView( String AttributeSet )</id>
    <exceptions>
      <e>ClassNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="execStartActivity">
    <id>android.app.Instrumentation.execStartActivity( Context IBinder IBinder Activity Intent int Bundle )</id>
    <exceptions>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>who</name>
      </param>
      <param>
        <type>IBinder</type>
        <name>contextThread</name>
      </param>
      <param>
        <type>IBinder</type>
        <name>token</name>
      </param>
      <param>
        <type>Activity</type>
        <name>target</name>
      </param>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
      <param>
        <type>int</type>
        <name>requestCode</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="setEnabledExclusiveInCategory">
    <id>android.content.om.OverlayManager.setEnabledExclusiveInCategory( String UserHandle )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="executeAndWaitForEvent">
    <id>android.app.UiAutomation.executeAndWaitForEvent( Runnable AccessibilityEventFilter long )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>TimeoutException</e>
    </exceptions>
    <params>
      <param>
        <type>Runnable</type>
        <name>command</name>
      </param>
      <param>
        <type>AccessibilityEventFilter</type>
        <name>filter</name>
      </param>
      <param>
        <type>long</type>
        <name>timeoutMillis</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="findPathForUuid">
    <id>android.os.storage.StorageManager.findPathForUuid( String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>volumeUuid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setBitmap">
    <id>android.app.WallpaperManager.setBitmap( Bitmap Rect boolean int int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Bitmap</type>
        <name>fullImage</name>
      </param>
      <param>
        <type>Rect</type>
        <name>visibleCropHint</name>
      </param>
      <param>
        <type>boolean</type>
        <name>allowBackup</name>
      </param>
      <param>
        <type>int</type>
        <name>which</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="fromFile">
    <id>android.net.Uri.fromFile( File )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>file</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createCaptureSessionByOutputConfigurations">
    <id>android.hardware.camera2.CameraDevice.createCaptureSessionByOutputConfigurations( List StateCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>outputConfigurations</name>
      </param>
      <param>
        <type>StateCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setExplicitlyEnabledInputMethodSubtypes">
    <id>android.view.inputmethod.InputMethodManager.setExplicitlyEnabledInputMethodSubtypes( String int[] )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>imiId</name>
      </param>
      <param>
        <type>int[]</type>
        <name>subtypeHashCodes</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="skipEntityData">
    <id>android.app.backup.BackupDataInput.skipEntityData( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setBatteryDischargePrediction">
    <id>android.os.PowerManager.setBatteryDischargePrediction( Duration boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Duration</type>
        <name>timeRemaining</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isPersonalized</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addAccount">
    <id>android.accounts.AbstractAccountAuthenticator.addAccount( AccountAuthenticatorResponse String String String[] Bundle )</id>
    <exceptions>
      <e>NetworkErrorException</e>
    </exceptions>
    <params>
      <param>
        <type>AccountAuthenticatorResponse</type>
        <name>response</name>
      </param>
      <param>
        <type>String</type>
        <name>accountType</name>
      </param>
      <param>
        <type>String</type>
        <name>authTokenType</name>
      </param>
      <param>
        <type>String[]</type>
        <name>requiredFeatures</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="configure">
    <id>android.hardware.SensorDirectChannel.configure( Sensor int )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>Sensor</type>
        <name>sensor</name>
      </param>
      <param>
        <type>int</type>
        <name>rateLevel</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getAllowlistedRestrictedPermissions">
    <id>android.permission.PermissionManager.getAllowlistedRestrictedPermissions( String int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>allowlistFlag</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getBoolean">
    <id>android.security.keymaster.KeymasterArguments.getBoolean( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tag</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="peekLast">
    <id>android.util.LongArrayQueue.peekLast( )</id>
    <exceptions>
      <e>NoSuchElementException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setSoTimeout">
    <id>android.net.LocalSocket.setSoTimeout( int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>n</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="putInt16Array">
    <id>android.os.HwBlob.putInt16Array( long short[] )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>short[]</type>
        <name>x</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="endPrefixMapping">
    <id>android.text.HtmlToSpannedConverter.endPrefixMapping( String )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>prefix</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="resetPasswordWithToken">
    <id>android.app.admin.DevicePolicyManager.resetPasswordWithToken( ComponentName String byte[] int )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>password</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>token</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="uninstallCaCert">
    <id>android.app.admin.DevicePolicyManager.uninstallCaCert( ComponentName byte[] )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>certBuffer</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="applyBatch">
    <id>android.content.IContentProvider.applyBatch( AttributionSource String ArrayList )</id>
    <exceptions>
      <e>RemoteException</e>
      <e>OperationApplicationException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>String</type>
        <name>authority</name>
      </param>
      <param>
        <type>ArrayList</type>
        <name>operations</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="onFeatureGet">
    <id>android.hardware.face.FaceServiceReceiver.onFeatureGet( boolean int[] boolean[] )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>success</name>
      </param>
      <param>
        <type>int[]</type>
        <name>features</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>featureState</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="openOutputStream">
    <id>android.content.ContentResolver.openOutputStream( Uri String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setupGlobalVendorTagDescriptor">
    <id>android.hardware.camera2.impl.CameraMetadataNative.setupGlobalVendorTagDescriptor( )</id>
    <exceptions>
      <e>ServiceSpecificException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getCameraIdList">
    <id>android.hardware.camera2.CameraManager.getCameraIdList( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="onUserSwitching">
    <id>android.app.UserSwitchObserver.onUserSwitching( int IRemoteCallback )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>newUserId</name>
      </param>
      <param>
        <type>IRemoteCallback</type>
        <name>reply</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="executeOnExecutor">
    <id>android.os.AsyncTask.executeOnExecutor( Executor Params[] )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Executor</type>
        <name>exec</name>
      </param>
      <param>
        <type>Params</type>
        <name>params</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="X509TrustManagerExtensions">
    <id>android.net.http.X509TrustManagerExtensions.X509TrustManagerExtensions( X509TrustManager )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>X509TrustManager</type>
        <name>tm</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="removeOnDrawListener">
    <id>android.view.ViewTreeObserver.removeOnDrawListener( OnDrawListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OnDrawListener</type>
        <name>victim</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getServiceInfo">
    <id>android.app.ApplicationPackageManager.getServiceInfo( ComponentName ComponentInfoFlags )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>className</name>
      </param>
      <param>
        <type>ComponentInfoFlags</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readPoliciesFromXml">
    <id>android.app.admin.DeviceAdminInfo.readPoliciesFromXml( TypedXmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getQueryParameters">
    <id>android.net.Uri.getQueryParameters( String )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>key</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="rebootWipeUserData">
    <id>android.os.RecoverySystem.rebootWipeUserData( Context String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>String</type>
        <name>reason</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="rebootWipeUserData">
    <id>android.os.RecoverySystem.rebootWipeUserData( Context )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addDynamicShortcuts">
    <id>android.content.pm.ShortcutManager.addDynamicShortcuts( List )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>shortcutInfoList</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getApplicationLogo">
    <id>android.content.pm.PackageManager.getApplicationLogo( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="checkValidity">
    <id>android.util.apk.WrappedX509Certificate.checkValidity( Date )</id>
    <exceptions>
      <e>CertificateNotYetValidException</e>
      <e>CertificateExpiredException</e>
    </exceptions>
    <params>
      <param>
        <type>Date</type>
        <name>date</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="finalize">
    <id>android.view.SurfaceControl.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="insert">
    <id>android.content.ContentProviderProxy.insert( AttributionSource Uri ContentValues Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>ContentValues</type>
        <name>values</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="StrictJarManifest">
    <id>android.util.jar.StrictJarManifest.StrictJarManifest( InputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>is</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getSensorOrientation">
    <id>android.hardware.camera2.params.DeviceStateSensorOrientationMap.getSensorOrientation( long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>deviceState</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addApkFile">
    <id>android.os.incremental.IncrementalFileStorages.addApkFile( InstallationFileParcel )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InstallationFileParcel</type>
        <name>apk</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onWrap">
    <id>android.service.resumeonreboot.ResumeOnRebootService.onWrap( byte[] long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>blob</name>
      </param>
      <param>
        <type>long</type>
        <name>lifeTimeInMillis</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="finalize">
    <id>android.content.res.ApkAssets.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="allocateBytes">
    <id>android.os.storage.StorageManager.allocateBytes( FileDescriptor long int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
      <param>
        <type>long</type>
        <name>bytes</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="delete">
    <id>android.content.IContentProvider.delete( AttributionSource Uri Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="takeSnapshot">
    <id>android.view.inputmethod.InputConnectionWrapper.takeSnapshot( )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setColumnsWidthConstraints">
    <id>android.widget.TableRow.setColumnsWidthConstraints( int[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int[]</type>
        <name>columnWidths</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getActivityIcon">
    <id>android.app.ApplicationPackageManager.getActivityIcon( Intent )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="load">
    <id>android.gesture.GestureStore.load( InputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>stream</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="performGlobalAction">
    <id>android.app.UiAutomation.performGlobalAction( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>action</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="suggestSelection">
    <id>android.view.textclassifier.TextClassifier.suggestSelection( CharSequence int int LocaleList )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>text</name>
      </param>
      <param>
        <type>int</type>
        <name>selectionStartIndex</name>
      </param>
      <param>
        <type>int</type>
        <name>selectionEndIndex</name>
      </param>
      <param>
        <type>LocaleList</type>
        <name>defaultLocales</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="openAssetFileDescriptor">
    <id>android.content.ContentResolver.openAssetFileDescriptor( Uri String CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="canPackageQuery">
    <id>android.app.ApplicationPackageManager.canPackageQuery( String String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sourcePackageName</name>
      </param>
      <param>
        <type>String</type>
        <name>targetPackageName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="CreateCredentialException">
    <id>android.credentials.CreateCredentialException.CreateCredentialException( String Throwable )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>Throwable</type>
        <name>cause</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="writeFixedArray">
    <id>android.os.Parcel.writeFixedArray( T int int[] )</id>
    <exceptions>
      <e>BadParcelableException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>val</name>
      </param>
      <param>
        <type>int</type>
        <name>parcelableFlags</name>
      </param>
      <param>
        <type>int</type>
        <name>dimensions</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="finalize">
    <id>android.content.ContentQueryMap.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="get">
    <id>android.util.MemoryIntArray.get( int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="loadFromSplit">
    <id>android.content.res.loader.ResourcesProvider.loadFromSplit( Context String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>String</type>
        <name>splitName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="AccessibilityShortcutInfo">
    <id>android.accessibilityservice.AccessibilityShortcutInfo.AccessibilityShortcutInfo( Context ActivityInfo )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>ActivityInfo</type>
        <name>activityInfo</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getOutputStallDuration">
    <id>android.hardware.camera2.params.RecommendedStreamConfigurationMap.getOutputStallDuration( Class Size )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>klass</name>
      </param>
      <param>
        <type>Size</type>
        <name>size</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="execStartActivity">
    <id>android.app.Instrumentation.execStartActivity( Context IBinder IBinder String Intent int Bundle UserHandle )</id>
    <exceptions>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>who</name>
      </param>
      <param>
        <type>IBinder</type>
        <name>contextThread</name>
      </param>
      <param>
        <type>IBinder</type>
        <name>token</name>
      </param>
      <param>
        <type>String</type>
        <name>resultWho</name>
      </param>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
      <param>
        <type>int</type>
        <name>requestCode</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>8</arity>
  </method>
  <method name="removeUser">
    <id>android.os.UserManager.removeUser( UserHandle )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="bindServiceAsUser">
    <id>android.content.Context.bindServiceAsUser( Intent ServiceConnection int UserHandle )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent</type>
        <name>service</name>
      </param>
      <param>
        <type>ServiceConnection</type>
        <name>conn</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="extractThemeAttrs">
    <id>android.content.res.TypedArray.extractThemeAttrs( )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="onFaceDetected">
    <id>android.hardware.face.FaceServiceReceiver.onFaceDetected( int int boolean )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>sensorId</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isStrongBiometric</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="close">
    <id>android.os.BatteryUsageStats.close( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="MemoryIntArray">
    <id>android.util.MemoryIntArray.MemoryIntArray( Parcel )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Parcel</type>
        <name>parcel</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="loadFromTable">
    <id>android.content.res.loader.ResourcesProvider.loadFromTable( ParcelFileDescriptor AssetsProvider )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>fileDescriptor</name>
      </param>
      <param>
        <type>AssetsProvider</type>
        <name>assetsProvider</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="prepare2">
    <id>android.hardware.camera2.impl.ICameraDeviceUserWrapper.prepare2( int int )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>maxCount</name>
      </param>
      <param>
        <type>int</type>
        <name>streamId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getKeyPairGrants">
    <id>android.app.admin.DevicePolicyManager.getKeyPairGrants( String )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>alias</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="linkToDeath">
    <id>android.os.BinderProxy.linkToDeath( DeathRecipient int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>DeathRecipient</type>
        <name>recipient</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="finalize">
    <id>android.view.KeyCharacterMap.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getCacheBytes">
    <id>android.app.usage.StorageStatsManager.getCacheBytes( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>uuid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toJson">
    <id>android.app.NotificationChannel.toJson( )</id>
    <exceptions>
      <e>JSONException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="sendIntent">
    <id>android.content.IntentSender.sendIntent( Context int Intent OnFinished Handler )</id>
    <exceptions>
      <e>SendIntentException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>int</type>
        <name>code</name>
      </param>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
      <param>
        <type>OnFinished</type>
        <name>onFinished</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="readDoubleVector">
    <id>android.os.HwParcel.readDoubleVector( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createScaleAndTranslateLog">
    <id>android.hardware.display.BrightnessCorrection.createScaleAndTranslateLog( float float )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>float</type>
        <name>scale</name>
      </param>
      <param>
        <type>float</type>
        <name>translate</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="taskFinished">
    <id>android.hardware.camera2.utils.TaskDrainer.taskFinished( T )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>task</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPreviewCallbackWithBuffer">
    <id>android.hardware.Camera.setPreviewCallbackWithBuffer( PreviewCallback )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>PreviewCallback</type>
        <name>cb</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="applyBatch">
    <id>android.content.ContentProvider.applyBatch( ArrayList )</id>
    <exceptions>
      <e>OperationApplicationException</e>
    </exceptions>
    <params>
      <param>
        <type>ArrayList</type>
        <name>operations</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getUnsignedLongs">
    <id>android.security.keymaster.KeymasterArguments.getUnsignedLongs( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tag</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setComposingText">
    <id>android.view.inputmethod.InputConnectionWrapper.setComposingText( CharSequence int )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>text</name>
      </param>
      <param>
        <type>int</type>
        <name>newCursorPosition</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="ClearCredentialStateException">
    <id>android.credentials.ClearCredentialStateException.ClearCredentialStateException( String String Throwable )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>String</type>
        <name>message</name>
      </param>
      <param>
        <type>Throwable</type>
        <name>cause</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getChildId">
    <id>android.view.accessibility.AccessibilityNodeInfo.getChildId( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="makeFile">
    <id>android.os.incremental.IncrementalStorage.makeFile( String long int UUID byte[] byte[] byte[] )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
      <param>
        <type>long</type>
        <name>size</name>
      </param>
      <param>
        <type>int</type>
        <name>mode</name>
      </param>
      <param>
        <type>UUID</type>
        <name>id</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>metadata</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>v4signatureBytes</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>content</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="readLong">
    <id>android.view.inspector.PropertyReader.readLong( int long )</id>
    <exceptions>
      <e>PropertyTypeMismatchException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>long</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="removeChild">
    <id>android.view.accessibility.AccessibilityNodeInfo.removeChild( IBinder )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>IBinder</type>
        <name>token</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeByteBuffer">
    <id>android.hardware.camera2.DngCreator.writeByteBuffer( OutputStream Size ByteBuffer long )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>OutputStream</type>
        <name>dngOutput</name>
      </param>
      <param>
        <type>Size</type>
        <name>size</name>
      </param>
      <param>
        <type>ByteBuffer</type>
        <name>pixels</name>
      </param>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getLockTaskPackages">
    <id>android.app.admin.DevicePolicyManager.getLockTaskPackages( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="canPackageQuery">
    <id>android.app.ApplicationPackageManager.canPackageQuery( String String[] )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sourcePackageName</name>
      </param>
      <param>
        <type>String[]</type>
        <name>targetPackageNames</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="loadOverlayFromPath">
    <id>android.content.res.ApkAssets.loadOverlayFromPath( String int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>idmapPath</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="lock">
    <id>android.hardware.Camera.lock( )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getThemeAttributeId">
    <id>android.content.res.TypedArray.getThemeAttributeId( int int )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>int</type>
        <name>defValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="openTypedAssetFileImpl">
    <id>android.provider.DocumentsProvider.openTypedAssetFileImpl( Uri String Bundle CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeTypeFilter</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>opts</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="openFileOutput">
    <id>android.content.Context.openFileOutput( String int )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>mode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getFrameTime">
    <id>android.view.Choreographer.getFrameTime( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getAppMetadata">
    <id>android.content.pm.PackageManager.getAppMetadata( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="retrieveSystemUpdateInfo">
    <id>android.os.SystemUpdateManager.retrieveSystemUpdateInfo( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getServiceInfoOrThrow">
    <id>android.service.autofill.AutofillServiceInfo.getServiceInfoOrThrow( ComponentName int )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>comp</name>
      </param>
      <param>
        <type>int</type>
        <name>userHandle</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setAccountManagementDisabled">
    <id>android.app.admin.DevicePolicyManager.setAccountManagementDisabled( ComponentName String boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>accountType</name>
      </param>
      <param>
        <type>boolean</type>
        <name>disabled</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="releaseConnection">
    <id>android.database.sqlite.SQLiteConnectionPool.releaseConnection( SQLiteConnection )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>SQLiteConnection</type>
        <name>connection</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="detectSurfaceFormat">
    <id>android.hardware.camera2.utils.SurfaceUtils.detectSurfaceFormat( Surface )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Surface</type>
        <name>surface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getWifiSignalResource">
    <id>android.net.NetworkBadging.getWifiSignalResource( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>signalLevel</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="CreateCredentialRequest">
    <id>android.service.credentials.CreateCredentialRequest.CreateCredentialRequest( CallingAppInfo String Bundle )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>CallingAppInfo</type>
        <name>callingAppInfo</name>
      </param>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>data</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parseCertificatesEntry">
    <id>android.security.net.config.XmlConfigSource.parseCertificatesEntry( XmlResourceParser boolean )</id>
    <exceptions>
      <e>ParserException</e>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>boolean</type>
        <name>defaultOverridePins</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onSuccess">
    <id>android.service.autofill.FillCallback.onSuccess( FillResponse )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>FillResponse</type>
        <name>response</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="finalize">
    <id>android.database.sqlite.SQLiteConnection.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getServiceDebugInfo">
    <id>android.os.ServiceManagerProxy.getServiceDebugInfo( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="fillWindow">
    <id>android.database.sqlite.SQLiteQuery.fillWindow( CursorWindow int int boolean )</id>
    <exceptions>
      <e>OperationCanceledException</e>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>CursorWindow</type>
        <name>window</name>
      </param>
      <param>
        <type>int</type>
        <name>startPos</name>
      </param>
      <param>
        <type>int</type>
        <name>requiredPos</name>
      </param>
      <param>
        <type>boolean</type>
        <name>countAllRows</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="TextSnapshot">
    <id>android.view.inputmethod.TextSnapshot.TextSnapshot( SurroundingText int int int )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>SurroundingText</type>
        <name>surroundingText</name>
      </param>
      <param>
        <type>int</type>
        <name>compositionStart</name>
      </param>
      <param>
        <type>int</type>
        <name>compositionEnd</name>
      </param>
      <param>
        <type>int</type>
        <name>cursorCapsMode</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="readBool">
    <id>android.os.HwParcel.readBool( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setClickable">
    <id>android.view.accessibility.AccessibilityNodeInfo.setClickable( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>clickable</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="lockHardwareCanvas">
    <id>android.view.Surface.lockHardwareCanvas( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="queryStatsForUid">
    <id>android.app.usage.StorageStatsManager.queryStatsForUid( String int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>uuid</name>
      </param>
      <param>
        <type>int</type>
        <name>uid</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="writeToXml">
    <id>android.os.UserBatteryConsumer.writeToXml( TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>serializer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="serialize">
    <id>android.gesture.GestureStroke.serialize( DataOutputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataOutputStream</type>
        <name>out</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="apply">
    <id>android.service.autofill.ImageTransformation.apply( ValueFinder RemoteViews int )</id>
    <exceptions>
      <e>Exception</e>
    </exceptions>
    <params>
      <param>
        <type>ValueFinder</type>
        <name>finder</name>
      </param>
      <param>
        <type>RemoteViews</type>
        <name>parentTemplate</name>
      </param>
      <param>
        <type>int</type>
        <name>childViewId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="startActivityFromFragment">
    <id>android.app.Activity.startActivityFromFragment( Fragment Intent int Bundle )</id>
    <exceptions>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Fragment</type>
        <name>fragment</name>
      </param>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
      <param>
        <type>int</type>
        <name>requestCode</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getAnimation">
    <id>android.content.res.Resources.getAnimation( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="StrictJarFile">
    <id>android.util.jar.StrictJarFile.StrictJarFile( String )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fileName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="ContentCaptureServiceInfo">
    <id>android.service.contentcapture.ContentCaptureServiceInfo.ContentCaptureServiceInfo( Context ComponentName boolean int )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>ComponentName</type>
        <name>comp</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isTemporaryService</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="onCreateCustomFromTag">
    <id>android.preference.PreferenceInflater.onCreateCustomFromTag( XmlPullParser Preference AttributeSet )</id>
    <exceptions>
      <e>XmlPullParserException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>Preference</type>
        <name>parentPreference</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="AccessibilityServiceInfo">
    <id>android.accessibilityservice.AccessibilityServiceInfo.AccessibilityServiceInfo( ResolveInfo Context )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ResolveInfo</type>
        <name>resolveInfo</name>
      </param>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getQueryParameterNames">
    <id>android.net.Uri.getQueryParameterNames( )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="readXml">
    <id>android.service.notification.ZenModeConfig.readXml( TypedXmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="dump">
    <id>android.os.IBinder.dump( FileDescriptor String[] )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
      <param>
        <type>String[]</type>
        <name>args</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getReceiverInfo">
    <id>android.content.pm.PackageManager.getReceiverInfo( ComponentName int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>component</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setOrganizationColor">
    <id>android.app.admin.DevicePolicyManager.setOrganizationColor( ComponentName int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>int</type>
        <name>color</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="requestScores">
    <id>android.net.NetworkScoreManager.requestScores( NetworkKey[] )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>NetworkKey[]</type>
        <name>networks</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="clearMetaKeyStates">
    <id>android.view.inputmethod.InputConnectionWrapper.clearMetaKeyStates( int )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>states</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="CreateCredentialException">
    <id>android.credentials.CreateCredentialException.CreateCredentialException( String String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>String</type>
        <name>message</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="executeForLong">
    <id>android.database.sqlite.SQLiteSession.executeForLong( String Object[] int CancellationSignal )</id>
    <exceptions>
      <e>OperationCanceledException</e>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>bindArgs</name>
      </param>
      <param>
        <type>int</type>
        <name>connectionFlags</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="clear">
    <id>android.app.DisabledWallpaperManager.clear( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getGlobalPrivateDnsHost">
    <id>android.app.admin.DevicePolicyManager.getGlobalPrivateDnsHost( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="MeteringRectangle">
    <id>android.hardware.camera2.params.MeteringRectangle.MeteringRectangle( int int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>x</name>
      </param>
      <param>
        <type>int</type>
        <name>y</name>
      </param>
      <param>
        <type>int</type>
        <name>width</name>
      </param>
      <param>
        <type>int</type>
        <name>height</name>
      </param>
      <param>
        <type>int</type>
        <name>meteringWeight</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="parseMonolithicPackageLite">
    <id>android.content.pm.PackageParser.parseMonolithicPackageLite( File int )</id>
    <exceptions>
      <e>PackageParserException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>packageFile</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="registerDynamicSensorCallback">
    <id>android.hardware.SensorManager.registerDynamicSensorCallback( DynamicSensorCallback Handler )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DynamicSensorCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createCameraExtensionSession">
    <id>android.hardware.camera2.impl.CameraExtensionSessionImpl.createCameraExtensionSession( CameraDeviceImpl Map Context ExtensionSessionConfiguration int IBinder )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>CameraDeviceImpl</type>
        <name>cameraDevice</name>
      </param>
      <param>
        <type>Map</type>
        <name>characteristicsMap</name>
      </param>
      <param>
        <type>Context</type>
        <name>ctx</name>
      </param>
      <param>
        <type>ExtensionSessionConfiguration</type>
        <name>config</name>
      </param>
      <param>
        <type>int</type>
        <name>sessionId</name>
      </param>
      <param>
        <type>IBinder</type>
        <name>token</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="startAppWidgetConfigureActivityForResult">
    <id>android.appwidget.AppWidgetHost.startAppWidgetConfigureActivityForResult( Activity int int int Bundle )</id>
    <exceptions>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Activity</type>
        <name>activity</name>
      </param>
      <param>
        <type>int</type>
        <name>appWidgetId</name>
      </param>
      <param>
        <type>int</type>
        <name>intentFlags</name>
      </param>
      <param>
        <type>int</type>
        <name>requestCode</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="addView">
    <id>android.widget.AdapterView.addView( View int LayoutParams )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>child</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>LayoutParams</type>
        <name>params</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="onRestoreFile">
    <id>android.app.backup.BackupAgent.onRestoreFile( ParcelFileDescriptor long File int long long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>data</name>
      </param>
      <param>
        <type>long</type>
        <name>size</name>
      </param>
      <param>
        <type>File</type>
        <name>destination</name>
      </param>
      <param>
        <type>int</type>
        <name>type</name>
      </param>
      <param>
        <type>long</type>
        <name>mode</name>
      </param>
      <param>
        <type>long</type>
        <name>mtime</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="transact">
    <id>android.os.HwBinder.transact( int HwParcel HwParcel int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>code</name>
      </param>
      <param>
        <type>HwParcel</type>
        <name>request</name>
      </param>
      <param>
        <type>HwParcel</type>
        <name>reply</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setCameraDisabled">
    <id>android.app.admin.DevicePolicyManager.setCameraDisabled( ComponentName boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>boolean</type>
        <name>disabled</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="registerAsSystemService">
    <id>android.service.notification.NotificationListenerService.registerAsSystemService( Context ComponentName int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>ComponentName</type>
        <name>componentName</name>
      </param>
      <param>
        <type>int</type>
        <name>currentUser</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getProfileCaptureRequestConstraints">
    <id>android.hardware.camera2.params.DynamicRangeProfiles.getProfileCaptureRequestConstraints( long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>profile</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="queryStatsForUser">
    <id>android.app.usage.StorageStatsManager.queryStatsForUser( UUID UserHandle )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>UUID</type>
        <name>storageUuid</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="SetEnabledProvidersRequest">
    <id>android.credentials.SetEnabledProvidersRequest.SetEnabledProvidersRequest( List )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>providers</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="simpleQueryForLong">
    <id>android.database.sqlite.SQLiteStatement.simpleQueryForLong( )</id>
    <exceptions>
      <e>SQLiteDoneException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="openAssetFile">
    <id>android.content.ContentInterface.openAssetFile( Uri String CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setAppExclusionList">
    <id>android.net.VpnManager.setAppExclusionList( int String List )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
      <param>
        <type>String</type>
        <name>vpnPackage</name>
      </param>
      <param>
        <type>List</type>
        <name>excludedApps</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="finishSession">
    <id>android.accounts.AbstractAccountAuthenticator.finishSession( AccountAuthenticatorResponse String Bundle )</id>
    <exceptions>
      <e>NetworkErrorException</e>
    </exceptions>
    <params>
      <param>
        <type>AccountAuthenticatorResponse</type>
        <name>response</name>
      </param>
      <param>
        <type>String</type>
        <name>accountType</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>sessionBundle</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="allocateSpaceForUpdate">
    <id>android.os.RecoverySystem.allocateSpaceForUpdate( File )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>packageFile</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createSelectionActionEvent">
    <id>android.view.textclassifier.SelectionEvent.createSelectionActionEvent( int int int TextClassification )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>end</name>
      </param>
      <param>
        <type>int</type>
        <name>actionType</name>
      </param>
      <param>
        <type>TextClassification</type>
        <name>classification</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getVerityRootHash">
    <id>android.util.apk.ApkSignatureSchemeV2Verifier.getVerityRootHash( String )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>apkPath</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="convertRectF">
    <id>android.hardware.camera2.utils.ParamsUtils.convertRectF( Rect RectF )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>Rect</type>
        <name>source</name>
      </param>
      <param>
        <type>RectF</type>
        <name>destination</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getWifiMacAddress">
    <id>android.app.admin.DevicePolicyManager.getWifiMacAddress( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setRepeatingRequest">
    <id>android.hardware.camera2.impl.CameraCaptureSessionImpl.setRepeatingRequest( CaptureRequest CaptureCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="obtainTypedArray">
    <id>android.content.res.Resources.obtainTypedArray( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDeviceOwnerType">
    <id>android.app.admin.DevicePolicyManager.getDeviceOwnerType( ComponentName )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="finalize">
    <id>android.os.MessageQueue.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setOemUnlockAllowedByUser">
    <id>android.service.oemlock.OemLockManager.setOemUnlockAllowedByUser( boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>allowed</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPrevWordBeginningOnTwoWordsBoundary">
    <id>android.text.method.WordIterator.getPrevWordBeginningOnTwoWordsBoundary( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>offset</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onTaskMovedToFront">
    <id>android.app.TaskStackListener.onTaskMovedToFront( int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>taskId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openDatabase">
    <id>android.database.sqlite.SQLiteDatabase.openDatabase( String CursorFactory int )</id>
    <exceptions>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
      <param>
        <type>CursorFactory</type>
        <name>factory</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="CreateCredentialException">
    <id>android.credentials.CreateCredentialException.CreateCredentialException( String String Throwable )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>String</type>
        <name>message</name>
      </param>
      <param>
        <type>Throwable</type>
        <name>cause</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="SearchManager">
    <id>android.app.SearchManager.SearchManager( Context Handler )</id>
    <exceptions>
      <e>ServiceNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="startRecognitionWithToken">
    <id>android.hardware.soundtrigger.SoundTriggerModule.startRecognitionWithToken( int RecognitionConfig )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>soundModelHandle</name>
      </param>
      <param>
        <type>RecognitionConfig</type>
        <name>config</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getFirstId">
    <id>android.hardware.radio.ProgramSelector.getFirstId( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readFamily">
    <id>android.content.res.FontResourcesParser.readFamily( XmlPullParser Resources )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>Resources</type>
        <name>resources</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onStartSession">
    <id>android.service.storage.ExternalStorageService.onStartSession( String int ParcelFileDescriptor File File )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sessionId</name>
      </param>
      <param>
        <type>int</type>
        <name>flag</name>
      </param>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>deviceFd</name>
      </param>
      <param>
        <type>File</type>
        <name>upperFileSystemPath</name>
      </param>
      <param>
        <type>File</type>
        <name>lowerFileSystemPath</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getPermissionGrantState">
    <id>android.app.admin.DevicePolicyManager.getPermissionGrantState( ComponentName String String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>String</type>
        <name>permission</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getService">
    <id>android.os.ServiceManagerProxy.getService( String )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getCacheSizeBytes">
    <id>android.os.storage.StorageManager.getCacheSizeBytes( UUID )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>UUID</type>
        <name>storageUuid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openFileHelper">
    <id>android.content.ContentProvider.openFileHelper( Uri String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="update">
    <id>android.content.ContentResolver.update( Uri ContentValues Bundle )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>ContentValues</type>
        <name>values</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="finalize">
    <id>android.content.res.StringBlock.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="HighSpeedVideoConfiguration">
    <id>android.hardware.camera2.params.HighSpeedVideoConfiguration.HighSpeedVideoConfiguration( int int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>width</name>
      </param>
      <param>
        <type>int</type>
        <name>height</name>
      </param>
      <param>
        <type>int</type>
        <name>fpsMin</name>
      </param>
      <param>
        <type>int</type>
        <name>fpsMax</name>
      </param>
      <param>
        <type>int</type>
        <name>batchSizeMax</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="createStream">
    <id>android.hardware.camera2.impl.ICameraDeviceUserWrapper.createStream( OutputConfiguration )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>OutputConfiguration</type>
        <name>outputConfiguration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="close">
    <id>android.util.MemoryIntArray.close( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setEnabled">
    <id>android.view.accessibility.AccessibilityRecord.setEnabled( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>isEnabled</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="respond">
    <id>android.database.IBulkCursor.respond( Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="generateFsVerityRootHash">
    <id>android.util.apk.VerityBuilder.generateFsVerityRootHash( String byte[] ByteBufferFactory )</id>
    <exceptions>
      <e>DigestException</e>
      <e>IOException</e>
      <e>NoSuchAlgorithmException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>apkPath</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>salt</name>
      </param>
      <param>
        <type>ByteBufferFactory</type>
        <name>bufferFactory</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setDomainVerificationUserSelection">
    <id>android.content.pm.verify.domain.DomainVerificationManager.setDomainVerificationUserSelection( UUID Set boolean )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>UUID</type>
        <name>domainSetId</name>
      </param>
      <param>
        <type>Set</type>
        <name>domains</name>
      </param>
      <param>
        <type>boolean</type>
        <name>enabled</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="mapRect">
    <id>android.hardware.camera2.utils.ParamsUtils.mapRect( Matrix Rect )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>Matrix</type>
        <name>transform</name>
      </param>
      <param>
        <type>Rect</type>
        <name>rect</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="registerComponentCallbacks">
    <id>android.content.ContextWrapper.registerComponentCallbacks( ComponentCallbacks )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentCallbacks</type>
        <name>callback</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="open">
    <id>android.hardware.Camera.open( int )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>cameraId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setAffiliationIds">
    <id>android.app.admin.DevicePolicyManager.setAffiliationIds( ComponentName Set )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>Set</type>
        <name>ids</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getUnderlyingNetworkPolicy">
    <id>android.net.vcn.VcnManager.getUnderlyingNetworkPolicy( NetworkCapabilities LinkProperties )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>NetworkCapabilities</type>
        <name>networkCapabilities</name>
      </param>
      <param>
        <type>LinkProperties</type>
        <name>linkProperties</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseCertificateTransparency">
    <id>android.security.net.config.XmlConfigSource.parseCertificateTransparency( XmlResourceParser )</id>
    <exceptions>
      <e>ParserException</e>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="updateOverrideApn">
    <id>android.app.admin.DevicePolicyManager.updateOverrideApn( ComponentName int ApnSetting )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>int</type>
        <name>apnId</name>
      </param>
      <param>
        <type>ApnSetting</type>
        <name>apnSetting</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setCacheBehavior">
    <id>android.os.storage.StorageManager.setCacheBehavior( File String boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>path</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>boolean</type>
        <name>enabled</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setWallpaper">
    <id>android.content.ContextWrapper.setWallpaper( InputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>data</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="TextServicesManager">
    <id>android.view.textservice.TextServicesManager.TextServicesManager( int InputMethodManager )</id>
    <exceptions>
      <e>ServiceNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
      <param>
        <type>InputMethodManager</type>
        <name>inputMethodManager</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setTime">
    <id>android.app.admin.DevicePolicyManager.setTime( ComponentName long )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>long</type>
        <name>millis</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="writeValue">
    <id>android.view.ViewDebug.writeValue( BufferedWriter Object )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>BufferedWriter</type>
        <name>out</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getTimers">
    <id>android.os.health.HealthStats.getTimers( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>key</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="requestTriggerSensor">
    <id>android.hardware.SensorManager.requestTriggerSensor( TriggerEventListener Sensor )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>TriggerEventListener</type>
        <name>listener</name>
      </param>
      <param>
        <type>Sensor</type>
        <name>sensor</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="fromString">
    <id>android.os.ParcelUuid.fromString( String )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>uuid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="verifyPackageHasInteractAcrossProfilePermission">
    <id>android.content.pm.CrossProfileAppsInternal.verifyPackageHasInteractAcrossProfilePermission( String int )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nativeDump">
    <id>android.hardware.camera2.impl.CameraMetadataNative.nativeDump( long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>ptr</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createEnrollIntent">
    <id>android.service.voice.AlwaysOnHotwordDetector.createEnrollIntent( )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setRepeatingBurst">
    <id>android.hardware.camera2.CameraCaptureSession.setRepeatingBurst( List CaptureCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>requests</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>listener</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="endAccess">
    <id>android.os.MemoryFile.endAccess( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getPreferentialNetworkServiceConfig">
    <id>android.app.admin.PreferentialNetworkServiceConfig.getPreferentialNetworkServiceConfig( TypedXmlPullParser String )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>String</type>
        <name>tag</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="validate">
    <id>android.service.controls.templates.RangeTemplate.validate( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="BiometricTestSession">
    <id>android.hardware.biometrics.BiometricTestSession.BiometricTestSession( Context int TestSessionProvider )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>int</type>
        <name>sensorId</name>
      </param>
      <param>
        <type>TestSessionProvider</type>
        <name>testSessionProvider</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="mapObject">
    <id>android.view.inspector.PropertyMapper.mapObject( String int )</id>
    <exceptions>
      <e>PropertyConflictException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>attributeId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setRepeatingRequest">
    <id>android.hardware.camera2.impl.CameraAdvancedExtensionSessionImpl.setRepeatingRequest( CaptureRequest Executor ExtensionCaptureCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>ExtensionCaptureCallback</type>
        <name>listener</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getLocale">
    <id>android.view.textclassifier.TextLanguage.getLocale( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createTransitionFromXml">
    <id>android.transition.TransitionInflater.createTransitionFromXml( XmlPullParser AttributeSet Transition )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
      <param>
        <type>Transition</type>
        <name>parent</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="convertToContentDigestType">
    <id>android.util.apk.ApkSignatureSchemeV4Verifier.convertToContentDigestType( int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hashAlgorithm</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readEmbeddedBuffer">
    <id>android.os.HwParcel.readEmbeddedBuffer( long long long boolean )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>NoSuchElementException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>expectedSize</name>
      </param>
      <param>
        <type>long</type>
        <name>parentHandle</name>
      </param>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>boolean</type>
        <name>nullable</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="enforceInterface">
    <id>android.os.HwParcel.enforceInterface( String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>interfaceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getInteger">
    <id>android.content.res.Resources.getInteger( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readParcelableList">
    <id>android.os.Parcel.readParcelableList( List ClassLoader Class )</id>
    <exceptions>
      <e>BadParcelableException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>list</name>
      </param>
      <param>
        <type>ClassLoader</type>
        <name>cl</name>
      </param>
      <param>
        <type>Class</type>
        <name>clazz</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isCredentialsUpdateSuggested">
    <id>android.accounts.AbstractAccountAuthenticator.isCredentialsUpdateSuggested( AccountAuthenticatorResponse Account String )</id>
    <exceptions>
      <e>NetworkErrorException</e>
    </exceptions>
    <params>
      <param>
        <type>AccountAuthenticatorResponse</type>
        <name>response</name>
      </param>
      <param>
        <type>Account</type>
        <name>account</name>
      </param>
      <param>
        <type>String</type>
        <name>statusToken</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createCancellationSignal">
    <id>android.content.IContentProvider.createCancellationSignal( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="readFrom">
    <id>android.os.incremental.V4Signature.readFrom( InputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>stream</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getMetadata">
    <id>android.provider.MetadataReader.getMetadata( Bundle InputStream String String[] )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Bundle</type>
        <name>metadata</name>
      </param>
      <param>
        <type>InputStream</type>
        <name>stream</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeType</name>
      </param>
      <param>
        <type>String[]</type>
        <name>tags</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="checkValidServerReply">
    <id>android.net.SntpClient.checkValidServerReply( byte byte int Timestamp64 Timestamp64 Timestamp64 Timestamp64 )</id>
    <exceptions>
      <e>InvalidServerReplyException</e>
    </exceptions>
    <params>
      <param>
        <type>byte</type>
        <name>leap</name>
      </param>
      <param>
        <type>byte</type>
        <name>mode</name>
      </param>
      <param>
        <type>int</type>
        <name>stratum</name>
      </param>
      <param>
        <type>Timestamp64</type>
        <name>transmitTimestamp</name>
      </param>
      <param>
        <type>Timestamp64</type>
        <name>referenceTimestamp</name>
      </param>
      <param>
        <type>Timestamp64</type>
        <name>randomizedRequestTimestamp</name>
      </param>
      <param>
        <type>Timestamp64</type>
        <name>originateTimestamp</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="getReadableDatabase">
    <id>android.database.sqlite.SQLiteOpenHelper.getReadableDatabase( )</id>
    <exceptions>
      <e>SQLiteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="fetchFonts">
    <id>android.provider.FontsContract.fetchFonts( Context CancellationSignal FontRequest )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
      <param>
        <type>FontRequest</type>
        <name>request</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="checkServerTrusted">
    <id>android.security.net.config.NetworkSecurityTrustManager.checkServerTrusted( X509Certificate[] String SSLEngine )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>X509Certificate[]</type>
        <name>certs</name>
      </param>
      <param>
        <type>String</type>
        <name>authType</name>
      </param>
      <param>
        <type>SSLEngine</type>
        <name>engine</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="feedIntoDataDigester">
    <id>android.util.apk.ReadFileDataSource.feedIntoDataDigester( DataDigester long int )</id>
    <exceptions>
      <e>DigestException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataDigester</type>
        <name>md</name>
      </param>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getResourceId">
    <id>android.content.res.TypedArray.getResourceId( int int )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>int</type>
        <name>defValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="execute">
    <id>android.database.sqlite.SQLiteStatement.execute( )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="sendScrollEvent">
    <id>android.hardware.input.VirtualMouse.sendScrollEvent( VirtualMouseScrollEvent )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>VirtualMouseScrollEvent</type>
        <name>event</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="removeSyncBarrier">
    <id>android.os.MessageQueue.removeSyncBarrier( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>token</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPeerCredentials">
    <id>android.net.LocalSocket.getPeerCredentials( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="readEmbeddedNativeHandle">
    <id>android.os.HwParcel.readEmbeddedNativeHandle( long long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>parentHandle</name>
      </param>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nativeList">
    <id>android.content.res.AssetManager.nativeList( long String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>ptr</name>
      </param>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="initialize">
    <id>android.hardware.camera2.impl.CameraExtensionSessionImpl.initialize( )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="readInt8VectorAsArray">
    <id>android.os.HwParcel.readInt8VectorAsArray( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="StrictJarManifestReader">
    <id>android.util.jar.StrictJarManifestReader.StrictJarManifestReader( byte[] Attributes )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>buf</name>
      </param>
      <param>
        <type>Attributes</type>
        <name>main</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="tokenize">
    <id>android.database.sqlite.SQLiteTokenizer.tokenize( String int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>int</type>
        <name>options</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="save">
    <id>android.gesture.GestureStore.save( OutputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>OutputStream</type>
        <name>stream</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setTooltipText">
    <id>android.view.accessibility.AccessibilityNodeInfo.setTooltipText( CharSequence )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>tooltipText</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeToParcel">
    <id>android.content.integrity.IntegrityFormula.writeToParcel( IntegrityFormula Parcel int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>IntegrityFormula</type>
        <name>formula</name>
      </param>
      <param>
        <type>Parcel</type>
        <name>dest</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setAutoTimeZoneEnabled">
    <id>android.app.admin.DevicePolicyManager.setAutoTimeZoneEnabled( ComponentName boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>boolean</type>
        <name>enabled</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseIntSetting">
    <id>android.provider.Settings.parseIntSetting( String String )</id>
    <exceptions>
      <e>SettingNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>settingValue</name>
      </param>
      <param>
        <type>String</type>
        <name>settingName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="close">
    <id>android.util.Base64OutputStream.close( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="putDoubleArray">
    <id>android.os.HwBlob.putDoubleArray( long double[] )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>double[]</type>
        <name>x</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="queryStatsForUser">
    <id>android.app.usage.StorageStatsManager.queryStatsForUser( String UserHandle )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>uuid</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="queryNanoApps">
    <id>android.hardware.location.ContextHubManager.queryNanoApps( ContextHubInfo )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>ContextHubInfo</type>
        <name>hubInfo</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPublicKey">
    <id>android.content.pm.Signature.getPublicKey( )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="translate">
    <id>android.view.translation.Translator.translate( TranslationRequest Executor Consumer )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>TranslationRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>Consumer</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="startForeground">
    <id>android.app.Service.startForeground( int Notification )</id>
    <exceptions>
      <e>MissingForegroundServiceTypeException</e>
      <e>ForegroundServiceStartNotAllowedException</e>
      <e>SecurityException</e>
      <e>InvalidForegroundServiceTypeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>Notification</type>
        <name>notification</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="validateXmlContent">
    <id>android.content.res.GradientColor.validateXmlContent( )</id>
    <exceptions>
      <e>XmlPullParserException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="onRestore">
    <id>android.app.backup.BackupAgent.onRestore( BackupDataInput long ParcelFileDescriptor Set )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>BackupDataInput</type>
        <name>data</name>
      </param>
      <param>
        <type>long</type>
        <name>appVersionCode</name>
      </param>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>newState</name>
      </param>
      <param>
        <type>Set</type>
        <name>excludedKeys</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="parsePackageSplitNames">
    <id>android.content.pm.parsing.ApkLiteParseUtils.parsePackageSplitNames( ParseInput XmlResourceParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ParseInput</type>
        <name>input</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="putFloatArray">
    <id>android.os.HwBlob.putFloatArray( long float[] )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>float[]</type>
        <name>x</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onLoadInBackground">
    <id>android.content.AsyncTaskLoader.onLoadInBackground( )</id>
    <exceptions>
      <e>OperationCanceledException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setStatusBarDisabled">
    <id>android.app.admin.DevicePolicyManager.setStatusBarDisabled( ComponentName boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>boolean</type>
        <name>disabled</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="authenticate">
    <id>android.hardware.biometrics.BiometricPrompt.authenticate( CancellationSignal Executor AuthenticationCallback )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>CancellationSignal</type>
        <name>cancel</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>AuthenticationCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getRecentTasks">
    <id>android.app.ActivityManager.getRecentTasks( int int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>maxNum</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="invokeViewMethod">
    <id>android.view.ViewDebug.invokeViewMethod( View Method Object[] )</id>
    <exceptions>
      <e>Exception</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>view</name>
      </param>
      <param>
        <type>Method</type>
        <name>method</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>args</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="openFileInput">
    <id>android.content.Context.openFileInput( String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="abortCaptures">
    <id>android.hardware.camera2.CameraCaptureSession.abortCaptures( )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getServiceInfoOrThrow">
    <id>android.service.translation.TranslationServiceInfo.getServiceInfoOrThrow( ComponentName boolean int )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>comp</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isTemp</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="writeZenPolicyXml">
    <id>android.service.notification.ZenModeConfig.writeZenPolicyXml( ZenPolicy TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ZenPolicy</type>
        <name>policy</name>
      </param>
      <param>
        <type>TypedXmlSerializer</type>
        <name>out</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getApplicationIcon">
    <id>android.app.ApplicationPackageManager.getApplicationIcon( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createAndManageUser">
    <id>android.app.admin.DevicePolicyManager.createAndManageUser( ComponentName String ComponentName PersistableBundle int )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>UserOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>ComponentName</type>
        <name>profileOwner</name>
      </param>
      <param>
        <type>PersistableBundle</type>
        <name>adminExtras</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="DevicePolicyDrawableResource">
    <id>android.app.admin.DevicePolicyDrawableResource.DevicePolicyDrawableResource( Context String String String int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>String</type>
        <name>drawableId</name>
      </param>
      <param>
        <type>String</type>
        <name>drawableStyle</name>
      </param>
      <param>
        <type>String</type>
        <name>drawableSource</name>
      </param>
      <param>
        <type>int</type>
        <name>resourceIdInCallingPackage</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="commitSelfTarget">
    <id>android.content.om.OverlayManager.commitSelfTarget( OverlayManagerTransaction )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
      <e>NameNotFoundException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>OverlayManagerTransaction</type>
        <name>transaction</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startIntentSender">
    <id>android.content.ContextWrapper.startIntentSender( IntentSender Intent int int int Bundle )</id>
    <exceptions>
      <e>IntentSender.SendIntentException</e>
    </exceptions>
    <params>
      <param>
        <type>IntentSender</type>
        <name>intent</name>
      </param>
      <param>
        <type>Intent</type>
        <name>fillInIntent</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsMask</name>
      </param>
      <param>
        <type>int</type>
        <name>flagsValues</name>
      </param>
      <param>
        <type>int</type>
        <name>extraFlags</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="setPermissionPolicy">
    <id>android.app.admin.DevicePolicyManager.setPermissionPolicy( ComponentName int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>int</type>
        <name>policy</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="performAccessibilityAction">
    <id>android.view.accessibility.DirectAccessibilityConnection.performAccessibilityAction( int long int Bundle int IAccessibilityInteractionConnectionCallback long )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>accessibilityWindowId</name>
      </param>
      <param>
        <type>long</type>
        <name>accessibilityNodeId</name>
      </param>
      <param>
        <type>int</type>
        <name>action</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>arguments</name>
      </param>
      <param>
        <type>int</type>
        <name>interactionId</name>
      </param>
      <param>
        <type>IAccessibilityInteractionConnectionCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>long</type>
        <name>threadId</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="getProfileOwnerName">
    <id>android.app.admin.DevicePolicyManager.getProfileOwnerName( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="unsafeGetCertsWithoutVerification">
    <id>android.util.apk.ApkSignatureSchemeV2Verifier.unsafeGetCertsWithoutVerification( String )</id>
    <exceptions>
      <e>SignatureNotFoundException</e>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>apkFile</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="initializeBurstCapturePipeline">
    <id>android.hardware.camera2.impl.CameraExtensionSessionImpl.initializeBurstCapturePipeline( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="dismissDialog">
    <id>android.app.Activity.dismissDialog( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="close">
    <id>android.database.BulkCursorProxy.close( )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="skipToEndOfRow">
    <id>android.inputmethodservice.Keyboard.skipToEndOfRow( XmlResourceParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="IncrementalFileStorages">
    <id>android.os.incremental.IncrementalFileStorages.IncrementalFileStorages( File File IncrementalManager DataLoaderParams )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>stageDir</name>
      </param>
      <param>
        <type>File</type>
        <name>inheritedDir</name>
      </param>
      <param>
        <type>IncrementalManager</type>
        <name>incrementalManager</name>
      </param>
      <param>
        <type>DataLoaderParams</type>
        <name>dataLoaderParams</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="refresh">
    <id>android.content.ContentInterface.refresh( Uri Bundle CancellationSignal )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="restoreFromXml">
    <id>android.os.PersistableBundle.restoreFromXml( XmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="hasShortcutHostPermission">
    <id>android.content.pm.LauncherApps.hasShortcutHostPermission( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="bulkInsert">
    <id>android.content.IContentProvider.bulkInsert( String Uri ContentValues[] )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>callingPkg</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>ContentValues[]</type>
        <name>initialValues</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="canStartStylusHandwriting">
    <id>android.inputmethodservice.IInputMethodWrapper.canStartStylusHandwriting( int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>requestId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="unregisterForNotifications">
    <id>android.os.ServiceManagerProxy.unregisterForNotifications( String IServiceCallback )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>IServiceCallback</type>
        <name>cb</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getOwnerInstalledCaCerts">
    <id>android.app.admin.DevicePolicyManager.getOwnerInstalledCaCerts( UserHandle )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="startWrite">
    <id>android.util.AtomicFile.startWrite( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setRepeatingBurst">
    <id>android.hardware.camera2.impl.CameraOfflineSessionImpl.setRepeatingBurst( List CaptureCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>requests</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getHighSpeedVideoSizesFor">
    <id>android.hardware.camera2.params.StreamConfigurationMap.getHighSpeedVideoSizesFor( Range )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Range</type>
        <name>fpsRange</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="installExistingPackage">
    <id>android.app.ApplicationPackageManager.installExistingPackage( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="create">
    <id>android.service.credentials.CredentialProviderInfoFactory.create( Context ServiceInfo boolean boolean boolean boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>ServiceInfo</type>
        <name>serviceInfo</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isSystemProvider</name>
      </param>
      <param>
        <type>boolean</type>
        <name>disableSystemAppVerificationForTests</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isEnabled</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isPrimary</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="convertPixelsToDimension">
    <id>android.util.TypedValue.convertPixelsToDimension( int float DisplayMetrics )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>unitToConvertTo</name>
      </param>
      <param>
        <type>float</type>
        <name>pixelValue</name>
      </param>
      <param>
        <type>DisplayMetrics</type>
        <name>metrics</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setCameraAudioRestriction">
    <id>android.hardware.camera2.impl.CameraDeviceImpl.setCameraAudioRestriction( int )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>mode</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onTaskDescriptionChanged">
    <id>android.app.TaskStackListener.onTaskDescriptionChanged( int TaskDescription )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>taskId</name>
      </param>
      <param>
        <type>TaskDescription</type>
        <name>td</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="sendUrgentData">
    <id>android.net.LocalSocketImpl.sendUrgentData( int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>data</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseSplitApk">
    <id>android.content.pm.PackageParser.parseSplitApk( Package int AssetManager int )</id>
    <exceptions>
      <e>PackageParserException</e>
    </exceptions>
    <params>
      <param>
        <type>Package</type>
        <name>pkg</name>
      </param>
      <param>
        <type>int</type>
        <name>splitIndex</name>
      </param>
      <param>
        <type>AssetManager</type>
        <name>assets</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setOnOpNotedCallback">
    <id>android.app.AppOpsManager.setOnOpNotedCallback( Executor OnOpNotedCallback )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Executor</type>
        <name>asyncExecutor</name>
      </param>
      <param>
        <type>OnOpNotedCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="bulkInsert">
    <id>android.content.LoggingContentInterface.bulkInsert( Uri ContentValues[] )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>ContentValues[]</type>
        <name>initialValues</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="insert">
    <id>android.content.DefaultDataHandler.insert( ContentResolver InputStream )</id>
    <exceptions>
      <e>IOException</e>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>ContentResolver</type>
        <name>contentResolver</name>
      </param>
      <param>
        <type>InputStream</type>
        <name>in</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setContentDescription">
    <id>android.view.accessibility.AccessibilityRecord.setContentDescription( CharSequence )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>contentDescription</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readString">
    <id>android.util.proto.ProtoInputStream.readString( long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>fieldId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="dup">
    <id>android.os.ParcelFileDescriptor.dup( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="create">
    <id>android.database.sqlite.SQLiteDatabase.create( CursorFactory )</id>
    <exceptions>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>CursorFactory</type>
        <name>factory</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="propagate">
    <id>android.util.ExceptionUtils.propagate( Throwable Class )</id>
    <exceptions>
      <e>E</e>
    </exceptions>
    <params>
      <param>
        <type>Throwable</type>
        <name>t</name>
      </param>
      <param>
        <type>Class</type>
        <name>c</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="RadioManager">
    <id>android.hardware.radio.RadioManager.RadioManager( Context )</id>
    <exceptions>
      <e>ServiceNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseActivityAlias">
    <id>android.content.pm.PackageParser.parseActivityAlias( Package Resources XmlResourceParser int String[] CachedComponentArgs )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Package</type>
        <name>owner</name>
      </param>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>String[]</type>
        <name>outError</name>
      </param>
      <param>
        <type>CachedComponentArgs</type>
        <name>cachedArgs</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="setMasterVolumeMuted">
    <id>android.app.admin.DevicePolicyManager.setMasterVolumeMuted( ComponentName boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>boolean</type>
        <name>on</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setDisplayBrightness">
    <id>android.view.SurfaceControl.setDisplayBrightness( IBinder float )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>IBinder</type>
        <name>displayToken</name>
      </param>
      <param>
        <type>float</type>
        <name>brightness</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="ignorableWhitespace">
    <id>android.content.DefaultDataHandler.ignorableWhitespace( char[] int int )</id>
    <exceptions>
      <e>SAXException</e>
    </exceptions>
    <params>
      <param>
        <type>char[]</type>
        <name>ch</name>
      </param>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>length</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="open">
    <id>android.os.ParcelFileDescriptor.open( File int )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>file</name>
      </param>
      <param>
        <type>int</type>
        <name>mode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createPackageContext">
    <id>android.app.ContextImpl.createPackageContext( String int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="checkUriPermission">
    <id>android.content.ContentProviderProxy.checkUriPermission( AttributionSource Uri int int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>int</type>
        <name>uid</name>
      </param>
      <param>
        <type>int</type>
        <name>modeFlags</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="nextInt">
    <id>android.util.JsonReader.nextInt( )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>NumberFormatException</e>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createRecoveryCertPath">
    <id>android.security.keystore.recovery.RecoveryCertPath.createRecoveryCertPath( CertPath )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>CertPath</type>
        <name>certPath</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="peekValue">
    <id>android.content.res.TypedArray.peekValue( int )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="endObject">
    <id>android.util.JsonWriter.endObject( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="updateCredentials">
    <id>android.accounts.AbstractAccountAuthenticator.updateCredentials( AccountAuthenticatorResponse Account String Bundle )</id>
    <exceptions>
      <e>NetworkErrorException</e>
    </exceptions>
    <params>
      <param>
        <type>AccountAuthenticatorResponse</type>
        <name>response</name>
      </param>
      <param>
        <type>Account</type>
        <name>account</name>
      </param>
      <param>
        <type>String</type>
        <name>authTokenType</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getDelegatedScopes">
    <id>android.app.admin.DevicePolicyManager.getDelegatedScopes( ComponentName String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>delegatedPackage</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getResourceTypeName">
    <id>android.content.res.ResourcesImpl.getResourceTypeName( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>resid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createReprocessableCaptureSessionByConfigurations">
    <id>android.hardware.camera2.CameraDevice.createReprocessableCaptureSessionByConfigurations( InputConfiguration List StateCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>InputConfiguration</type>
        <name>inputConfig</name>
      </param>
      <param>
        <type>List</type>
        <name>outputs</name>
      </param>
      <param>
        <type>StateCallback</type>
        <name>callback</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="transact">
    <id>android.os.IBinder.transact( int Parcel Parcel int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>code</name>
      </param>
      <param>
        <type>Parcel</type>
        <name>data</name>
      </param>
      <param>
        <type>Parcel</type>
        <name>reply</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="openAssetFile">
    <id>android.provider.DocumentsProvider.openAssetFile( Uri String CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="compileStatement">
    <id>android.database.sqlite.SQLiteDatabase.compileStatement( String )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readColor">
    <id>android.view.inspector.PropertyReader.readColor( int int )</id>
    <exceptions>
      <e>PropertyTypeMismatchException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createDirectChannel">
    <id>android.hardware.SensorManager.createDirectChannel( HardwareBuffer )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>UncheckedIOException</e>
    </exceptions>
    <params>
      <param>
        <type>HardwareBuffer</type>
        <name>mem</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addOnWindowShownListener">
    <id>android.view.ViewTreeObserver.addOnWindowShownListener( OnWindowShownListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>OnWindowShownListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="feedIntoDataDigester">
    <id>android.util.apk.ByteBufferDataSource.feedIntoDataDigester( DataDigester long int )</id>
    <exceptions>
      <e>DigestException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataDigester</type>
        <name>md</name>
      </param>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="finishQuery">
    <id>android.service.voice.VisualQueryDetectionService.finishQuery( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setEnabled">
    <id>android.view.accessibility.AccessibilityNodeInfo.setEnabled( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>enabled</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="physicalAddressFirstDifferentDigitPos">
    <id>android.hardware.hdmi.HdmiUtils.physicalAddressFirstDifferentDigitPos( int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>address1</name>
      </param>
      <param>
        <type>int</type>
        <name>address2</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="enableNanoApp">
    <id>android.hardware.location.ContextHubManager.enableNanoApp( ContextHubInfo long )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>ContextHubInfo</type>
        <name>hubInfo</name>
      </param>
      <param>
        <type>long</type>
        <name>nanoAppId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getNetworkTemplateFromBackup">
    <id>android.net.NetworkPolicy.getNetworkTemplateFromBackup( DataInputStream )</id>
    <exceptions>
      <e>BackupUtils.BadVersionException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataInputStream</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="close">
    <id>android.os.NativeHandle.close( )</id>
    <exceptions>
      <e>java.io.IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="seekTo">
    <id>android.os.ParcelFileDescriptor.seekTo( long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>pos</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="BeginCreateCredentialRequest">
    <id>android.service.credentials.BeginCreateCredentialRequest.BeginCreateCredentialRequest( String Bundle CallingAppInfo )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>data</name>
      </param>
      <param>
        <type>CallingAppInfo</type>
        <name>callingAppInfo</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="writeImage">
    <id>android.hardware.camera2.DngCreator.writeImage( OutputStream Image )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IOException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>OutputStream</type>
        <name>dngOutput</name>
      </param>
      <param>
        <type>Image</type>
        <name>pixels</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="decodeBase32">
    <id>android.content.pm.VerifierDeviceIdentity.decodeBase32( byte[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>input</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getWifiIcon">
    <id>android.net.NetworkBadging.getWifiIcon( int int Theme )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>signalLevel</name>
      </param>
      <param>
        <type>int</type>
        <name>badging</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="insert">
    <id>android.widget.ArrayAdapter.insert( T int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>object</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readColor">
    <id>android.view.inspector.PropertyReader.readColor( int Color )</id>
    <exceptions>
      <e>PropertyTypeMismatchException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>Color</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setDrawingOrder">
    <id>android.view.accessibility.AccessibilityNodeInfo.setDrawingOrder( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>drawingOrderInParent</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="loadFromApk">
    <id>android.content.res.loader.ResourcesProvider.loadFromApk( ParcelFileDescriptor )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ParcelFileDescriptor</type>
        <name>fileDescriptor</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="update">
    <id>android.content.IContentProvider.update( AttributionSource Uri ContentValues Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>ContentValues</type>
        <name>values</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getColorStateList">
    <id>android.content.res.TypedArray.getColorStateList( int )</id>
    <exceptions>
      <e>RuntimeException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="CredentialOption">
    <id>android.credentials.CredentialOption.CredentialOption( String Bundle Bundle boolean ArraySet )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>credentialRetrievalData</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>candidateQueryData</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isSystemProviderRequired</name>
      </param>
      <param>
        <type>ArraySet</type>
        <name>allowedProviders</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getSendBufferSize">
    <id>android.net.LocalSocket.getSendBufferSize( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getRemoteViewsToReapply">
    <id>android.widget.RemoteViews.getRemoteViewsToReapply( Context View SizeF )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>View</type>
        <name>v</name>
      </param>
      <param>
        <type>SizeF</type>
        <name>size</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="openNonAsset">
    <id>android.content.res.AssetManager.openNonAsset( String int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fileName</name>
      </param>
      <param>
        <type>int</type>
        <name>accessMode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="submitRequest">
    <id>android.hardware.camera2.impl.ICameraDeviceUserWrapper.submitRequest( CaptureRequest boolean )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>boolean</type>
        <name>streaming</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="native_pin">
    <id>android.os.MemoryFile.native_pin( FileDescriptor boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
      <param>
        <type>boolean</type>
        <name>pin</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setMaximumTimeToLock">
    <id>android.app.admin.DevicePolicyManager.setMaximumTimeToLock( ComponentName long )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>long</type>
        <name>timeMs</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isCaptureProcessProgressAvailable">
    <id>android.hardware.camera2.CameraExtensionCharacteristics.isCaptureProcessProgressAvailable( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>extension</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getInstalledProvidersForPackage">
    <id>android.appwidget.AppWidgetManager.getInstalledProvidersForPackage( String UserHandle )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>profile</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="transact">
    <id>android.os.Binder.transact( int Parcel Parcel int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>code</name>
      </param>
      <param>
        <type>Parcel</type>
        <name>data</name>
      </param>
      <param>
        <type>Parcel</type>
        <name>reply</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="parseApkLite">
    <id>android.content.pm.PackageParser.parseApkLite( File int )</id>
    <exceptions>
      <e>PackageParserException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>apkFile</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="encodeCertPath">
    <id>android.security.keystore.recovery.RecoveryCertPath.encodeCertPath( CertPath )</id>
    <exceptions>
      <e>CertificateEncodingException</e>
    </exceptions>
    <params>
      <param>
        <type>CertPath</type>
        <name>certPath</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="stopPreview">
    <id>android.hardware.Camera.stopPreview( )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="IntentFilter">
    <id>android.content.IntentFilter.IntentFilter( String String )</id>
    <exceptions>
      <e>MalformedMimeTypeException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>action</name>
      </param>
      <param>
        <type>String</type>
        <name>dataType</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getFdDup">
    <id>android.os.SharedMemory.getFdDup( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="verifyIntegrity">
    <id>android.util.apk.ApkSigningBlockUtils.verifyIntegrity( Map RandomAccessFile SignatureInfo )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>Map</type>
        <name>expectedDigests</name>
      </param>
      <param>
        <type>RandomAccessFile</type>
        <name>apk</name>
      </param>
      <param>
        <type>SignatureInfo</type>
        <name>signatureInfo</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setPackageName">
    <id>android.view.accessibility.AccessibilityEvent.setPackageName( CharSequence )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openFile">
    <id>android.content.ContentProvider.openFile( Uri String CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="finalize">
    <id>android.hardware.camera2.impl.CameraMetadataNative.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getUserBadgeDarkColor">
    <id>android.os.UserManager.getUserBadgeDarkColor( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="registerVisibleActivityCallback">
    <id>android.service.voice.VoiceInteractionSession.registerVisibleActivityCallback( Executor VisibleActivityCallback )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>VisibleActivityCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="loadRestriction">
    <id>android.content.RestrictionsManager.loadRestriction( Context TypedArray XmlResourceParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>appContext</name>
      </param>
      <param>
        <type>TypedArray</type>
        <name>a</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>xml</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="startRemoteLockscreenValidation">
    <id>android.app.KeyguardManager.startRemoteLockscreenValidation( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="write">
    <id>android.hardware.usb.AccessoryFilter.write( XmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlSerializer</type>
        <name>serializer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="putInt16">
    <id>android.os.HwBlob.putInt16( long short )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>short</type>
        <name>x</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDate">
    <id>android.security.keymaster.KeyCharacteristics.getDate( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tag</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="close">
    <id>android.util.JsonWriter.close( JsonScope JsonScope String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>JsonScope</type>
        <name>empty</name>
      </param>
      <param>
        <type>JsonScope</type>
        <name>nonempty</name>
      </param>
      <param>
        <type>String</type>
        <name>closeBracket</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="dispatchMessageToSystem">
    <id>android.companion.CompanionDeviceService.dispatchMessageToSystem( int int byte[] )</id>
    <exceptions>
      <e>DeviceNotAssociatedException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>messageId</name>
      </param>
      <param>
        <type>int</type>
        <name>associationId</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>message</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="LocaleSpan">
    <id>android.text.style.LocaleSpan.LocaleSpan( LocaleList )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>LocaleList</type>
        <name>locales</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getTypeAsync">
    <id>android.content.IContentProvider.getTypeAsync( Uri RemoteCallback )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>RemoteCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="copyInternalUserspace">
    <id>android.os.FileUtils.copyInternalUserspace( FileDescriptor FileDescriptor long CancellationSignal Executor ProgressListener )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>in</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>out</name>
      </param>
      <param>
        <type>long</type>
        <name>count</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>ProgressListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="nextField">
    <id>android.util.proto.ProtoInputStream.nextField( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getComplexColor">
    <id>android.content.res.TypedArray.getComplexColor( int )</id>
    <exceptions>
      <e>RuntimeException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openAssetFile">
    <id>android.content.ContentResolver.openAssetFile( Uri String CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="executeForString">
    <id>android.database.sqlite.SQLiteConnection.executeForString( String Object[] CancellationSignal )</id>
    <exceptions>
      <e>OperationCanceledException</e>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>bindArgs</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="finalize">
    <id>android.hardware.location.ContextHubClient.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="mapReadWrite">
    <id>android.os.SharedMemory.mapReadWrite( )</id>
    <exceptions>
      <e>ErrnoException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="sendAndReturnResult">
    <id>android.app.PendingIntent.sendAndReturnResult( Context int Intent OnFinished Handler String Bundle )</id>
    <exceptions>
      <e>CanceledException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>int</type>
        <name>code</name>
      </param>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
      <param>
        <type>OnFinished</type>
        <name>onFinished</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
      <param>
        <type>String</type>
        <name>requiredPermission</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>options</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="onActivityPinned">
    <id>android.app.TaskStackListener.onActivityPinned( String int int int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
      <param>
        <type>int</type>
        <name>taskId</name>
      </param>
      <param>
        <type>int</type>
        <name>rootTaskId</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="transact">
    <id>android.os.IHwBinder.transact( int HwParcel HwParcel int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>code</name>
      </param>
      <param>
        <type>HwParcel</type>
        <name>request</name>
      </param>
      <param>
        <type>HwParcel</type>
        <name>reply</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="relayoutWindow">
    <id>android.view.ViewRootImpl.relayoutWindow( LayoutParams int boolean )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>LayoutParams</type>
        <name>params</name>
      </param>
      <param>
        <type>int</type>
        <name>viewVisibility</name>
      </param>
      <param>
        <type>boolean</type>
        <name>insetsPending</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="readDouble">
    <id>android.os.HwParcel.readDouble( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="wipeDevice">
    <id>android.app.admin.DevicePolicyManager.wipeDevice( int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getActivityIcon">
    <id>android.app.ApplicationPackageManager.getActivityIcon( ComponentName )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>activityName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getOrDefault">
    <id>android.hardware.camera2.utils.ParamsUtils.getOrDefault( CaptureRequest Key T )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>r</name>
      </param>
      <param>
        <type>Key</type>
        <name>key</name>
      </param>
      <param>
        <type>T</type>
        <name>defaultValue</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getReceiveBufferSize">
    <id>android.net.LocalSocket.getReceiveBufferSize( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="loadFromXml">
    <id>android.hardware.display.BrightnessConfiguration.loadFromXml( TypedXmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="respond">
    <id>android.database.BulkCursorProxy.respond( Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="tryUnregister">
    <id>android.os.HwNoService.tryUnregister( String String IBase )</id>
    <exceptions>
      <e>android.os.RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fqName</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>IBase</type>
        <name>service</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="read">
    <id>android.app.backup.BackupDataInputStream.read( byte[] )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>b</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="executeForCursorWindow">
    <id>android.database.sqlite.SQLiteSession.executeForCursorWindow( String Object[] CursorWindow int int boolean int CancellationSignal )</id>
    <exceptions>
      <e>OperationCanceledException</e>
      <e>SQLiteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>bindArgs</name>
      </param>
      <param>
        <type>CursorWindow</type>
        <name>window</name>
      </param>
      <param>
        <type>int</type>
        <name>startPos</name>
      </param>
      <param>
        <type>int</type>
        <name>requiredPos</name>
      </param>
      <param>
        <type>boolean</type>
        <name>countAllRows</name>
      </param>
      <param>
        <type>int</type>
        <name>connectionFlags</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>8</arity>
  </method>
  <method name="getDeclaredInstances">
    <id>android.os.ServiceManagerProxy.getDeclaredInstances( String )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>iface</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAppTasks">
    <id>android.app.ActivityManager.getAppTasks( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="updateShortcuts">
    <id>android.content.pm.ShortcutManager.updateShortcuts( List )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>shortcutInfoList</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createSpecializedTypeReference">
    <id>android.hardware.camera2.utils.TypeReference.createSpecializedTypeReference( Class )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>klass</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getSplitClassLoader">
    <id>android.app.LoadedApk.getSplitClassLoader( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>splitName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onTaskProfileLocked">
    <id>android.app.TaskStackListener.onTaskProfileLocked( RunningTaskInfo int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>RunningTaskInfo</type>
        <name>taskInfo</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getServiceInfoOrThrow">
    <id>android.service.contentcapture.ContentCaptureServiceInfo.getServiceInfoOrThrow( ComponentName boolean int )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>comp</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isTemp</name>
      </param>
      <param>
        <type>int</type>
        <name>userId</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setPasswordExpirationTimeout">
    <id>android.app.admin.DevicePolicyManager.setPasswordExpirationTimeout( ComponentName long )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>long</type>
        <name>timeout</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="hasCaCertInstalled">
    <id>android.app.admin.DevicePolicyManager.hasCaCertInstalled( ComponentName byte[] )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>byte[]</type>
        <name>certBuffer</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="takePicture">
    <id>android.hardware.Camera.takePicture( ShutterCallback PictureCallback PictureCallback PictureCallback )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params>
      <param>
        <type>ShutterCallback</type>
        <name>shutter</name>
      </param>
      <param>
        <type>PictureCallback</type>
        <name>raw</name>
      </param>
      <param>
        <type>PictureCallback</type>
        <name>postview</name>
      </param>
      <param>
        <type>PictureCallback</type>
        <name>jpeg</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="read">
    <id>android.hardware.usb.AccessoryFilter.read( XmlPullParser )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createReliableSocketPair">
    <id>android.os.ParcelFileDescriptor.createReliableSocketPair( int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDelegatePackages">
    <id>android.app.admin.DevicePolicyManager.getDelegatePackages( ComponentName String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>delegationScope</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isAlwaysOnVpnLockdownEnabled">
    <id>android.app.admin.DevicePolicyManager.isAlwaysOnVpnLockdownEnabled( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="dumpHprofDataDdms">
    <id>android.os.Debug.dumpHprofDataDdms( )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setAccessibilityDataSensitive">
    <id>android.view.accessibility.AccessibilityEvent.setAccessibilityDataSensitive( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>accessibilityDataSensitive</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="loadFromPath">
    <id>android.content.res.ApkAssets.loadFromPath( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getKey">
    <id>android.security.keystore.recovery.RecoveryController.getKey( String )</id>
    <exceptions>
      <e>UnrecoverableKeyException</e>
      <e>InternalRecoveryServiceException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>alias</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openTypedAssetFileDescriptor">
    <id>android.content.ContentResolver.openTypedAssetFileDescriptor( Uri String Bundle CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeType</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>opts</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setPasswordHistoryLength">
    <id>android.app.admin.DevicePolicyManager.setPasswordHistoryLength( ComponentName int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>int</type>
        <name>length</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="finalizeOutputConfigurations">
    <id>android.hardware.camera2.impl.CameraCaptureSessionImpl.finalizeOutputConfigurations( List )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>outputConfigs</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getVerityRootHash">
    <id>android.util.apk.ApkSignatureVerifier.getVerityRootHash( String )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>apkPath</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="ListEnabledProvidersException">
    <id>android.credentials.ListEnabledProvidersException.ListEnabledProvidersException( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readInstallInfo">
    <id>android.content.pm.PackageInstaller.readInstallInfo( File int )</id>
    <exceptions>
      <e>PackageParsingException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>file</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isCurrentInputMethodSetByOwner">
    <id>android.app.admin.DevicePolicyManager.isCurrentInputMethodSetByOwner( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getFillEventHistory">
    <id>android.service.autofill.AutofillService.getFillEventHistory( )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="loadXmlDrawable">
    <id>android.content.res.ResourcesImpl.loadXmlDrawable( Resources TypedValue int int String )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>wrapper</name>
      </param>
      <param>
        <type>TypedValue</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>density</name>
      </param>
      <param>
        <type>String</type>
        <name>file</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="readHeader">
    <id>android.util.jar.StrictJarManifestReader.readHeader( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="verifyProviderPermission">
    <id>android.service.credentials.CredentialProviderInfoFactory.verifyProviderPermission( ServiceInfo )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ServiceInfo</type>
        <name>serviceInfo</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="queryExternalStatsForUser">
    <id>android.app.usage.StorageStatsManager.queryExternalStatsForUser( UUID UserHandle )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>UUID</type>
        <name>storageUuid</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getOutputStream">
    <id>android.net.LocalSocketImpl.getOutputStream( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="skipTo">
    <id>android.util.JsonReader.skipTo( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>toFind</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="delete">
    <id>android.content.ContentProviderClient.delete( Uri Bundle )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="openFile">
    <id>android.content.ContentInterface.openFile( Uri String CancellationSignal )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="unBind">
    <id>android.os.incremental.IncrementalStorage.unBind( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>targetPath</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getKeyChainSnapshot">
    <id>android.security.keystore.recovery.RecoveryController.getKeyChainSnapshot( )</id>
    <exceptions>
      <e>InternalRecoveryServiceException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="verifySourceStampSignature">
    <id>android.util.apk.SourceStampVerifier.verifySourceStampSignature( byte[] X509Certificate ByteBuffer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>data</name>
      </param>
      <param>
        <type>X509Certificate</type>
        <name>sourceStampCertificate</name>
      </param>
      <param>
        <type>ByteBuffer</type>
        <name>signatures</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getHistoricalOpsFromDiskRaw">
    <id>android.app.AppOpsManager.getHistoricalOpsFromDiskRaw( HistoricalOpsRequest Executor Consumer )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>HistoricalOpsRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>Consumer</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="read">
    <id>android.content.pm.LimitedLengthInputStream.read( byte[] )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>buffer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="throwIfCanceled">
    <id>android.os.CancellationSignal.throwIfCanceled( )</id>
    <exceptions>
      <e>OperationCanceledException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="set">
    <id>android.util.MemoryIntArray.set( int int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setDynamicShortcuts">
    <id>android.content.pm.ShortcutManager.setDynamicShortcuts( List )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>shortcutInfoList</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="registerVcnStatusCallback">
    <id>android.net.vcn.VcnManager.registerVcnStatusCallback( ParcelUuid Executor VcnStatusCallback )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>ParcelUuid</type>
        <name>subscriptionGroup</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>VcnStatusCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="map">
    <id>android.os.SharedMemory.map( int int int )</id>
    <exceptions>
      <e>ErrnoException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>prot</name>
      </param>
      <param>
        <type>int</type>
        <name>offset</name>
      </param>
      <param>
        <type>int</type>
        <name>length</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="writeXml">
    <id>android.app.NotificationChannelGroup.writeXml( TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>out</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="profile">
    <id>android.view.ViewDebug.profile( View OutputStream String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>View</type>
        <name>root</name>
      </param>
      <param>
        <type>OutputStream</type>
        <name>clientStream</name>
      </param>
      <param>
        <type>String</type>
        <name>parameter</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="copyToInt16Array">
    <id>android.os.HwBlob.copyToInt16Array( long short[] int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offset</name>
      </param>
      <param>
        <type>short[]</type>
        <name>array</name>
      </param>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setServerParams">
    <id>android.security.keystore.recovery.RecoveryController.setServerParams( byte[] )</id>
    <exceptions>
      <e>InternalRecoveryServiceException</e>
    </exceptions>
    <params>
      <param>
        <type>byte[]</type>
        <name>serverParams</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="updateState">
    <id>android.service.voice.HotwordDetector.updateState( PersistableBundle SharedMemory )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistableBundle</type>
        <name>options</name>
      </param>
      <param>
        <type>SharedMemory</type>
        <name>sharedMemory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="commitContent">
    <id>android.view.inputmethod.InputConnectionWrapper.commitContent( InputContentInfo int Bundle )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>InputContentInfo</type>
        <name>inputContentInfo</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>opts</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setResource">
    <id>android.app.DisabledWallpaperManager.setResource( int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>resid</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="checkClientTrusted">
    <id>android.security.net.config.NetworkSecurityTrustManager.checkClientTrusted( X509Certificate[] String Socket )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>X509Certificate[]</type>
        <name>certs</name>
      </param>
      <param>
        <type>String</type>
        <name>authType</name>
      </param>
      <param>
        <type>Socket</type>
        <name>socket</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setValue">
    <id>android.text.PackedIntVector.setValue( int int int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>row</name>
      </param>
      <param>
        <type>int</type>
        <name>column</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setRequestInitialAccessibilityFocus">
    <id>android.view.accessibility.AccessibilityNodeInfo.setRequestInitialAccessibilityFocus( boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>requestInitialAccessibilityFocus</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addVcnNetworkPolicyChangeListener">
    <id>android.net.vcn.VcnManager.addVcnNetworkPolicyChangeListener( Executor VcnNetworkPolicyChangeListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>VcnNetworkPolicyChangeListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="string">
    <id>android.util.JsonWriter.string( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAccount">
    <id>android.content.SyncRequest.getAccount( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="captureBurst">
    <id>android.hardware.camera2.CameraCaptureSession.captureBurst( List CaptureCallback Handler )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>requests</name>
      </param>
      <param>
        <type>CaptureCallback</type>
        <name>listener</name>
      </param>
      <param>
        <type>Handler</type>
        <name>handler</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="recycle">
    <id>android.view.accessibility.AccessibilityWindowInfo.recycle( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getApplicationRestrictions">
    <id>android.app.admin.DevicePolicyManager.getApplicationRestrictions( ComponentName String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getActivityInfo">
    <id>android.content.pm.PackageManager.getActivityInfo( ComponentName int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>component</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setRepeatingRequest">
    <id>android.hardware.camera2.impl.CameraExtensionSessionImpl.setRepeatingRequest( CaptureRequest Executor ExtensionCaptureCallback )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>CaptureRequest</type>
        <name>request</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>ExtensionCaptureCallback</type>
        <name>listener</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getApplicationLogo">
    <id>android.app.ApplicationPackageManager.getApplicationLogo( String )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getServiceOrThrow">
    <id>android.os.ServiceManager.getServiceOrThrow( String )</id>
    <exceptions>
      <e>ServiceNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="ofAnalogueSource">
    <id>android.hardware.hdmi.HdmiTimerRecordSources.ofAnalogueSource( TimerInfo AnalogueServiceSource )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>TimerInfo</type>
        <name>timerInfo</name>
      </param>
      <param>
        <type>AnalogueServiceSource</type>
        <name>source</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="checkServerTrusted">
    <id>android.security.net.config.RootTrustManager.checkServerTrusted( X509Certificate[] String String )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>X509Certificate[]</type>
        <name>certs</name>
      </param>
      <param>
        <type>String</type>
        <name>authType</name>
      </param>
      <param>
        <type>String</type>
        <name>hostname</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getFactoryResetProtectionPolicy">
    <id>android.app.admin.DevicePolicyManager.getFactoryResetProtectionPolicy( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createSocket">
    <id>android.net.SSLCertificateSocketFactory.createSocket( Socket String int boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Socket</type>
        <name>k</name>
      </param>
      <param>
        <type>String</type>
        <name>host</name>
      </param>
      <param>
        <type>int</type>
        <name>port</name>
      </param>
      <param>
        <type>boolean</type>
        <name>close</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="connect">
    <id>android.net.LocalSocketImpl.connect( LocalSocketAddress int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>LocalSocketAddress</type>
        <name>address</name>
      </param>
      <param>
        <type>int</type>
        <name>timeout</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setOnCompleteListener">
    <id>android.hardware.location.ContextHubTransaction.setOnCompleteListener( OnCompleteListener )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>OnCompleteListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addChannel">
    <id>android.companion.virtual.sensor.VirtualSensorDirectChannelWriter.addChannel( int SharedMemory )</id>
    <exceptions>
      <e>ErrnoException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>channelHandle</name>
      </param>
      <param>
        <type>SharedMemory</type>
        <name>sharedMemory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getParameters">
    <id>android.hardware.Camera.getParameters( )</id>
    <exceptions>
      <e>RuntimeException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="readOptionalString">
    <id>android.net.netstats.NetworkStatsDataMigrationUtils.readOptionalString( DataInput )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataInput</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getBoolean">
    <id>android.security.keymaster.KeyCharacteristics.getBoolean( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>tag</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAvailableKeyList">
    <id>android.hardware.camera2.CameraCharacteristics.getAvailableKeyList( Class Class int[] boolean )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>metadataClass</name>
      </param>
      <param>
        <type>Class</type>
        <name>keyClass</name>
      </param>
      <param>
        <type>int[]</type>
        <name>filterTags</name>
      </param>
      <param>
        <type>boolean</type>
        <name>includeSynthetic</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="createAnimatorFromXml">
    <id>android.animation.AnimatorInflater.createAnimatorFromXml( Resources Theme XmlPullParser AttributeSet AnimatorSet int float )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>res</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
      <param>
        <type>XmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>AttributeSet</type>
        <name>attrs</name>
      </param>
      <param>
        <type>AnimatorSet</type>
        <name>parent</name>
      </param>
      <param>
        <type>int</type>
        <name>sequenceOrdering</name>
      </param>
      <param>
        <type>float</type>
        <name>pixelSize</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="removeActiveAdmin">
    <id>android.app.admin.DevicePolicyManager.removeActiveAdmin( ComponentName )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onTaskMovedToFront">
    <id>android.app.TaskStackListener.onTaskMovedToFront( RunningTaskInfo )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>RunningTaskInfo</type>
        <name>taskInfo</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="installPackage">
    <id>android.os.RecoverySystem.installPackage( Context File )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>File</type>
        <name>packageFile</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="pinShortcuts">
    <id>android.content.pm.LauncherApps.pinShortcuts( String List UserHandle )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>List</type>
        <name>shortcutIds</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="stopRecognition">
    <id>android.service.voice.AlwaysOnHotwordDetector.stopRecognition( )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="writeXml">
    <id>android.os.BatteryUsageStats.writeXml( TypedXmlSerializer )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlSerializer</type>
        <name>serializer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="cancelStateRequest">
    <id>android.hardware.devicestate.DeviceStateManager.cancelStateRequest( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getAllocatableBytes">
    <id>android.os.storage.StorageManager.getAllocatableBytes( UUID int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>UUID</type>
        <name>storageUuid</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getLastResourceResolution">
    <id>android.content.res.ResourcesImpl.getLastResourceResolution( )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="linkToDeathNative">
    <id>android.os.BinderProxy.linkToDeathNative( DeathRecipient int )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>DeathRecipient</type>
        <name>recipient</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="removeSensorPixelModeUsed">
    <id>android.hardware.camera2.params.OutputConfiguration.removeSensorPixelModeUsed( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>sensorPixelModeUsed</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="verifySourceStampAttributes">
    <id>android.util.apk.SourceStampVerifier.verifySourceStampAttributes( ByteBuffer X509Certificate )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>ByteBuffer</type>
        <name>stampAttributeData</name>
      </param>
      <param>
        <type>X509Certificate</type>
        <name>sourceStampCertificate</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="mapGravity">
    <id>android.view.inspector.PropertyMapper.mapGravity( String int )</id>
    <exceptions>
      <e>PropertyConflictException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>attributeId</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getReceiverInfo">
    <id>android.app.ApplicationPackageManager.getReceiverInfo( ComponentName int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>className</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getWhitelistedRestrictedPermissions">
    <id>android.content.pm.PackageManager.getWhitelistedRestrictedPermissions( String int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>int</type>
        <name>whitelistFlag</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createReprocessCaptureRequest">
    <id>android.hardware.camera2.CameraDevice.createReprocessCaptureRequest( TotalCaptureResult )</id>
    <exceptions>
      <e>CameraAccessException</e>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>TotalCaptureResult</type>
        <name>inputResult</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="checkArgumentFormat">
    <id>android.hardware.camera2.params.StreamConfigurationMap.checkArgumentFormat( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>format</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="performContextMenuAction">
    <id>android.view.inputmethod.InputConnectionWrapper.performContextMenuAction( int )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openFile">
    <id>android.content.ContentProvider.openFile( Uri String )</id>
    <exceptions>
      <e>FileNotFoundException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setPermissionGrantState">
    <id>android.app.admin.DevicePolicyManager.setPermissionGrantState( ComponentName String String int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>String</type>
        <name>permission</name>
      </param>
      <param>
        <type>int</type>
        <name>grantState</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setItemCount">
    <id>android.view.accessibility.AccessibilityRecord.setItemCount( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>itemCount</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="RevocableFileDescriptor">
    <id>android.os.RevocableFileDescriptor.RevocableFileDescriptor( Context File )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>File</type>
        <name>file</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="cancelBaseStateOverride">
    <id>android.hardware.devicestate.DeviceStateManager.cancelBaseStateOverride( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createApplicationContext">
    <id>android.content.ContextWrapper.createApplicationContext( ApplicationInfo int )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ApplicationInfo</type>
        <name>application</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createUser">
    <id>android.os.UserManager.createUser( String int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="handleParseCommandLineArg">
    <id>android.app.timedetector.TimeSuggestionHelper.handleParseCommandLineArg( Class ShellCommand )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>helpedClass</name>
      </param>
      <param>
        <type>ShellCommand</type>
        <name>cmd</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getActivityIcon">
    <id>android.content.pm.PackageManager.getActivityIcon( Intent )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="allocateBytes">
    <id>android.os.storage.StorageManager.allocateBytes( FileDescriptor long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>fd</name>
      </param>
      <param>
        <type>long</type>
        <name>bytes</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getStreamTypes">
    <id>android.content.LoggingContentInterface.getStreamTypes( Uri String )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeTypeFilter</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="finalize">
    <id>android.window.WindowContext.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getColor">
    <id>android.content.res.Resources.getColor( int Theme )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
      <param>
        <type>Theme</type>
        <name>theme</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="add">
    <id>android.widget.ArrayAdapter.add( T )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>object</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readFixed64">
    <id>android.util.proto.ProtoInputStream.readFixed64( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getFloat">
    <id>android.content.res.Resources.getFloat( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="copy">
    <id>android.os.FileUtils.copy( FileDescriptor FileDescriptor CancellationSignal Executor ProgressListener )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>FileDescriptor</type>
        <name>in</name>
      </param>
      <param>
        <type>FileDescriptor</type>
        <name>out</name>
      </param>
      <param>
        <type>CancellationSignal</type>
        <name>signal</name>
      </param>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>ProgressListener</type>
        <name>listener</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="readTag">
    <id>android.util.proto.ProtoInputStream.readTag( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="startShortcut">
    <id>android.content.pm.LauncherApps.startShortcut( String String Rect Bundle UserHandle )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>ActivityNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>String</type>
        <name>shortcutId</name>
      </param>
      <param>
        <type>Rect</type>
        <name>sourceBounds</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>startActivityOptions</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="readFromParcel">
    <id>android.content.integrity.IntegrityFormula.readFromParcel( Parcel )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Parcel</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="stringToFile">
    <id>android.os.FileUtils.stringToFile( String String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>filename</name>
      </param>
      <param>
        <type>String</type>
        <name>string</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDefaultIcon">
    <id>android.view.PointerIcon.getDefaultIcon( Context )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createFromScanResult">
    <id>android.net.NetworkKey.createFromScanResult( ScanResult )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>ScanResult</type>
        <name>result</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="bind">
    <id>android.os.incremental.IncrementalStorage.bind( String String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sourcePath</name>
      </param>
      <param>
        <type>String</type>
        <name>targetPath</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="checkClientTrusted">
    <id>android.security.net.config.NetworkSecurityTrustManager.checkClientTrusted( X509Certificate[] String SSLEngine )</id>
    <exceptions>
      <e>CertificateException</e>
    </exceptions>
    <params>
      <param>
        <type>X509Certificate[]</type>
        <name>certs</name>
      </param>
      <param>
        <type>String</type>
        <name>authType</name>
      </param>
      <param>
        <type>SSLEngine</type>
        <name>engine</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getAppResourcesWithCallersConfiguration">
    <id>android.app.admin.ParcelableResource.getAppResourcesWithCallersConfiguration( Context )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="split">
    <id>android.text.TextUtils.split( String String )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
      <param>
        <type>String</type>
        <name>expression</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="registerOrganizer">
    <id>android.window.DisplayAreaOrganizer.registerOrganizer( int )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>displayAreaFeature</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="queryStatsForPackage">
    <id>android.app.usage.StorageStatsManager.queryStatsForPackage( UUID String UserHandle )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
      <e>NameNotFoundException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>UUID</type>
        <name>storageUuid</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getCharacterBounds">
    <id>android.view.inputmethod.TextBoundsInfo.getCharacterBounds( int RectF )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>RectF</type>
        <name>bounds</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readEvents">
    <id>android.app.admin.SecurityLog.readEvents( Collection )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Collection</type>
        <name>output</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="AttestationProfile">
    <id>android.security.attestationverification.AttestationProfile.AttestationProfile( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>attestationProfileId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getStreamTypes">
    <id>android.content.ContentInterface.getStreamTypes( Uri String )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>Uri</type>
        <name>uri</name>
      </param>
      <param>
        <type>String</type>
        <name>mimeTypeFilter</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="checkPosition">
    <id>android.database.AbstractCursor.checkPosition( )</id>
    <exceptions>
      <e>CursorIndexOutOfBoundsException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getGlobalAudioRestriction">
    <id>android.hardware.camera2.impl.ICameraDeviceUserWrapper.getGlobalAudioRestriction( )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getRunningTasks">
    <id>android.app.ActivityManager.getRunningTasks( int )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>maxNum</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setSecureSetting">
    <id>android.app.admin.DevicePolicyManager.setSecureSetting( ComponentName String String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>String</type>
        <name>setting</name>
      </param>
      <param>
        <type>String</type>
        <name>value</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="checkNativeTypeEquals">
    <id>android.hardware.camera2.marshal.MarshalHelpers.checkNativeTypeEquals( int int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>expectedNativeType</name>
      </param>
      <param>
        <type>int</type>
        <name>actualNativeType</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="finalize">
    <id>android.view.InputEventSender.finalize( )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="get">
    <id>android.hardware.camera2.CaptureRequest.get( Key )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Key</type>
        <name>key</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="fromIntent">
    <id>android.hardware.location.ContextHubIntentEvent.fromIntent( Intent )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Intent</type>
        <name>intent</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="queryCratesForUser">
    <id>android.app.usage.StorageStatsManager.queryCratesForUser( UUID UserHandle )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
      <e>NameNotFoundException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>UUID</type>
        <name>storageUuid</name>
      </param>
      <param>
        <type>UserHandle</type>
        <name>user</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getApplicationConfigForPackage">
    <id>android.security.NetworkSecurityPolicy.getApplicationConfigForPackage( Context String )</id>
    <exceptions>
      <e>PackageManager.NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>Context</type>
        <name>context</name>
      </param>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="updateOutputConfiguration">
    <id>android.hardware.camera2.impl.CameraOfflineSessionImpl.updateOutputConfiguration( OutputConfiguration )</id>
    <exceptions>
      <e>CameraAccessException</e>
    </exceptions>
    <params>
      <param>
        <type>OutputConfiguration</type>
        <name>config</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseXml">
    <id>android.os.PowerComponents.parseXml( TypedXmlPullParser Builder )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>TypedXmlPullParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>Builder</type>
        <name>builder</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setAutoTimeEnabled">
    <id>android.app.admin.DevicePolicyManager.setAutoTimeEnabled( ComponentName boolean )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
      <param>
        <type>boolean</type>
        <name>enabled</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="create">
    <id>android.os.SharedMemory.create( String int )</id>
    <exceptions>
      <e>ErrnoException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="refresh">
    <id>android.content.IContentProvider.refresh( AttributionSource Uri Bundle ICancellationSignal )</id>
    <exceptions>
      <e>RemoteException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributionSource</type>
        <name>attributionSource</name>
      </param>
      <param>
        <type>Uri</type>
        <name>url</name>
      </param>
      <param>
        <type>Bundle</type>
        <name>extras</name>
      </param>
      <param>
        <type>ICancellationSignal</type>
        <name>cancellationSignal</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="parseAdditionalCertificates">
    <id>android.content.pm.PackageParser.parseAdditionalCertificates( Resources XmlResourceParser String[] )</id>
    <exceptions>
      <e>XmlPullParserException</e>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Resources</type>
        <name>resources</name>
      </param>
      <param>
        <type>XmlResourceParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>String[]</type>
        <name>outError</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="waitForDeclaredService">
    <id>android.os.ServiceManager.waitForDeclaredService( String )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="reboot">
    <id>android.app.admin.DevicePolicyManager.reboot( ComponentName )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>admin</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getServiceInfo">
    <id>android.app.ApplicationPackageManager.getServiceInfo( ComponentName int )</id>
    <exceptions>
      <e>NameNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ComponentName</type>
        <name>className</name>
      </param>
      <param>
        <type>int</type>
        <name>flags</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="copyToFileOrThrow">
    <id>android.os.FileUtils.copyToFileOrThrow( InputStream File )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>in</name>
      </param>
      <param>
        <type>File</type>
        <name>destFile</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="requestWait">
    <id>android.hardware.usb.UsbDeviceConnection.requestWait( )</id>
    <exceptions>
      <e>BufferOverflowException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="registerAvailabilityCallback">
    <id>android.hardware.camera2.CameraManager.registerAvailabilityCallback( Executor AvailabilityCallback )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Executor</type>
        <name>executor</name>
      </param>
      <param>
        <type>AvailabilityCallback</type>
        <name>callback</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="requestLskf">
    <id>android.os.RecoverySystem.requestLskf( String IntentSender )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
      <param>
        <type>IntentSender</type>
        <name>sender</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="reportShortcutUsed">
    <id>android.content.pm.ShortcutManager.reportShortcutUsed( String )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>shortcutId</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openRawResourceFd">
    <id>android.content.res.Resources.openRawResourceFd( int )</id>
    <exceptions>
      <e>NotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nativeDefinesOverlayable">
    <id>android.content.res.ApkAssets.nativeDefinesOverlayable( long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>ptr</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
</methods>
