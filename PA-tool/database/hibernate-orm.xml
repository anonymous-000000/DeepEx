<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE methods SYSTEM "config.dtd">
<methods>
  <method name="toXMLString">
    <id>org.hibernate.type.MetaType.toXMLString( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onDelete">
    <id>org.hibernate.Interceptor.onDelete( Object Object Object[] String[] Type[] )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>entity</name>
      </param>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>state</name>
      </param>
      <param>
        <type>String[]</type>
        <name>propertyNames</name>
      </param>
      <param>
        <type>Type[]</type>
        <name>types</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="load">
    <id>org.hibernate.persister.entity.EntityPersister.load( Object Object LockOptions SharedSessionContractImplementor Boolean )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>Object</type>
        <name>optionalObject</name>
      </param>
      <param>
        <type>LockOptions</type>
        <name>lockOptions</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Boolean</type>
        <name>readOnly</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getPropertyValue">
    <id>org.hibernate.type.CompositeType.getPropertyValue( Object int SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>component</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="check">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.check( int Object int Expectation PreparedStatement String )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>rows</name>
      </param>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>int</type>
        <name>tableNumber</name>
      </param>
      <param>
        <type>Expectation</type>
        <name>expectation</name>
      </param>
      <param>
        <type>PreparedStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>String</type>
        <name>statementSQL</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="isEqual">
    <id>org.hibernate.type.UserComponentType.isEqual( Object Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>x</name>
      </param>
      <param>
        <type>Object</type>
        <name>y</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getSelectSequencePreviousValString">
    <id>org.hibernate.dialect.sequence.ANSISequenceSupport.getSelectSequencePreviousValString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isDirty">
    <id>org.hibernate.type.AbstractType.isDirty( Object Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>old</name>
      </param>
      <param>
        <type>Object</type>
        <name>current</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createJdbcValue">
    <id>org.hibernate.type.descriptor.jdbc.AggregateJdbcType.createJdbcValue( Object WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>domainValue</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseInto">
    <id>org.hibernate.graph.GraphParser.parseInto( EntityGraph CharSequence EntityManagerFactory )</id>
    <exceptions>
      <e>InvalidGraphException</e>
    </exceptions>
    <params>
      <param>
        <type>EntityGraph</type>
        <name>graph</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>graphText</name>
      </param>
      <param>
        <type>EntityManagerFactory</type>
        <name>entityManagerFactory</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getResultSet">
    <id>org.hibernate.dialect.PostgreSQLDialect.getResultSet( CallableStatement )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>ps</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="Component">
    <id>org.hibernate.mapping.Component.Component( MetadataBuildingContext Join )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>MetadataBuildingContext</type>
        <name>metadata</name>
      </param>
      <param>
        <type>Join</type>
        <name>join</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.type.SpecialOneToOneType.disassemble( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>sessionFactory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.domain.SqmIndexedCollectionAccessPath.treatAs( Class )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>treatJavaType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="assemble">
    <id>org.hibernate.usertype.BaseUserTypeSupport.assemble( Serializable Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Serializable</type>
        <name>cached</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="assemble">
    <id>org.hibernate.type.AnyType.assemble( Serializable SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Serializable</type>
        <name>cached</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="replacePropertyValues">
    <id>org.hibernate.type.ComponentType.replacePropertyValues( Object Object[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>component</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>values</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isDirty">
    <id>org.hibernate.type.ComponentType.isDirty( Object Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>x</name>
      </param>
      <param>
        <type>Object</type>
        <name>y</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parse">
    <id>org.hibernate.graph.GraphParser.parse( Class CharSequence EntityManager )</id>
    <exceptions>
      <e>InvalidGraphException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>rootType</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>graphText</name>
      </param>
      <param>
        <type>EntityManager</type>
        <name>entityManager</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="addInputStream">
    <id>org.hibernate.cfg.Configuration.addInputStream( InputStream )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>xmlInputStream</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addURL">
    <id>org.hibernate.cfg.Configuration.addURL( URL )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>URL</type>
        <name>url</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getVersion">
    <id>org.hibernate.persister.entity.EntityPersister.getVersion( Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="accept">
    <id>org.hibernate.jdbc.AbstractReturningWork.accept( WorkExecutor Connection )</id>
    <exceptions>
      <e>SQLException</e>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>WorkExecutor</type>
        <name>executor</name>
      </param>
      <param>
        <type>Connection</type>
        <name>connection</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createProxy">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.createProxy( Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.domain.SqmPluralValuedSimplePath.treatAs( Class )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>treatJavaType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="validate">
    <id>org.hibernate.mapping.PersistentClass.validate( Metadata )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Metadata</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.usertype.StaticUserTypeSupport.disassemble( T )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getElementType">
    <id>org.hibernate.type.CollectionType.getElementType( SessionFactoryImplementor )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getIdentitySelectString">
    <id>org.hibernate.dialect.identity.AbstractTransactSQLIdentityColumnSupport.getIdentitySelectString( String String int )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>table</name>
      </param>
      <param>
        <type>String</type>
        <name>column</name>
      </param>
      <param>
        <type>int</type>
        <name>type</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getStream">
    <id>org.hibernate.engine.jdbc.BlobProxy.getStream( )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getIdentifier">
    <id>org.hibernate.type.EntityType.getIdentifier( Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="ForUpdateFragment">
    <id>org.hibernate.sql.ForUpdateFragment.ForUpdateFragment( Dialect LockOptions Map )</id>
    <exceptions>
      <e>QueryException</e>
    </exceptions>
    <params>
      <param>
        <type>Dialect</type>
        <name>dialect</name>
      </param>
      <param>
        <type>LockOptions</type>
        <name>lockOptions</name>
      </param>
      <param>
        <type>Map</type>
        <name>keyColumnNames</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isEqual">
    <id>org.hibernate.type.CustomType.isEqual( Object Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>x</name>
      </param>
      <param>
        <type>Object</type>
        <name>y</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createForeignKey">
    <id>org.hibernate.mapping.SimpleValue.createForeignKey( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="extract">
    <id>org.hibernate.type.SerializableToBlobType.extract( CallableStatement String SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>String</type>
        <name>paramName</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="execute">
    <id>org.hibernate.jdbc.Work.execute( Connection )</id>
    <exceptions>
      <e>SQLException</e>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Connection</type>
        <name>connection</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="replaceElements">
    <id>org.hibernate.type.CustomCollectionType.replaceElements( Object Object Object Map SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>original</name>
      </param>
      <param>
        <type>Object</type>
        <name>target</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
      <param>
        <type>Map</type>
        <name>copyCache</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="doProcessQueuedOps">
    <id>org.hibernate.persister.collection.AbstractCollectionPersister.doProcessQueuedOps( PersistentCollection Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistentCollection</type>
        <name>collection</name>
      </param>
      <param>
        <type>Object</type>
        <name>key</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="buildIdentifierGenerator">
    <id>org.hibernate.mapping.Component.buildIdentifierGenerator( IdentifierGeneratorFactory Dialect RootClass )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>IdentifierGeneratorFactory</type>
        <name>identifierGeneratorFactory</name>
      </param>
      <param>
        <type>Dialect</type>
        <name>dialect</name>
      </param>
      <param>
        <type>RootClass</type>
        <name>rootClass</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.from.SqmDerivedJoin.treatAs( Class )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>treatJavaType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getResultSet">
    <id>org.hibernate.dialect.PostgreSQLDialect.getResultSet( CallableStatement String )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setTypeUsingReflection">
    <id>org.hibernate.mapping.Component.setTypeUsingReflection( String String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>className</name>
      </param>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getIdentitySelectString">
    <id>org.hibernate.dialect.identity.HANAIdentityColumnSupport.getIdentitySelectString( String String int )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>table</name>
      </param>
      <param>
        <type>String</type>
        <name>column</name>
      </param>
      <param>
        <type>int</type>
        <name>type</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isModified">
    <id>org.hibernate.type.Type.isModified( Object Object boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>dbState</name>
      </param>
      <param>
        <type>Object</type>
        <name>currentState</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>checkable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="configure">
    <id>org.hibernate.id.ForeignGenerator.configure( Type Properties ServiceRegistry )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Type</type>
        <name>type</name>
      </param>
      <param>
        <type>Properties</type>
        <name>parameters</name>
      </param>
      <param>
        <type>ServiceRegistry</type>
        <name>serviceRegistry</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getPropertyType">
    <id>org.hibernate.persister.entity.EntityPersister.getPropertyType( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getImplementation">
    <id>org.hibernate.proxy.AbstractLazyInitializer.getImplementation( SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>s</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="generate">
    <id>org.hibernate.id.GUIDGenerator.generate( SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>obj</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getType">
    <id>org.hibernate.mapping.ManyToOne.getType( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="isEqual">
    <id>org.hibernate.type.UserComponentType.isEqual( Object Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>x</name>
      </param>
      <param>
        <type>Object</type>
        <name>y</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="uniqueResultOptional">
    <id>org.hibernate.query.SelectionQuery.uniqueResultOptional( )</id>
    <exceptions>
      <e>NonUniqueResultException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="replace">
    <id>org.hibernate.type.EntityType.replace( Object Object SharedSessionContractImplementor Object Map )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>original</name>
      </param>
      <param>
        <type>Object</type>
        <name>target</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
      <param>
        <type>Map</type>
        <name>copyCache</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="accept">
    <id>org.hibernate.jdbc.WorkExecutorVisitable.accept( WorkExecutor Connection )</id>
    <exceptions>
      <e>SQLException</e>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>WorkExecutor</type>
        <name>executor</name>
      </param>
      <param>
        <type>Connection</type>
        <name>connection</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.metamodel.model.domain.DiscriminatorSqmPath.treatAs( Class )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>treatJavaType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="initialize">
    <id>org.hibernate.proxy.LazyInitializer.initialize( )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="replace">
    <id>org.hibernate.type.CollectionType.replace( Object Object SharedSessionContractImplementor Object Map )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>original</name>
      </param>
      <param>
        <type>Object</type>
        <name>target</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
      <param>
        <type>Map</type>
        <name>copyCache</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getIdentifierOrUniqueKeyPropertyName">
    <id>org.hibernate.type.EntityType.getIdentifierOrUniqueKeyPropertyName( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>factory</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.SerializableToBlobType.nullSafeSet( CallableStatement Object String WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="BasicCollectionPersister">
    <id>org.hibernate.persister.collection.BasicCollectionPersister.BasicCollectionPersister( Collection CollectionDataAccess RuntimeModelCreationContext )</id>
    <exceptions>
      <e>CacheException</e>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Collection</type>
        <name>collectionBinding</name>
      </param>
      <param>
        <type>CollectionDataAccess</type>
        <name>cacheAccessStrategy</name>
      </param>
      <param>
        <type>RuntimeModelCreationContext</type>
        <name>creationContext</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isReadOnly">
    <id>org.hibernate.proxy.LazyInitializer.isReadOnly( )</id>
    <exceptions>
      <e>TransientObjectException</e>
      <e>SessionException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="deepCopy">
    <id>org.hibernate.type.MetaType.deepCopy( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="AbstractEntityPersister">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.AbstractEntityPersister( PersistentClass EntityDataAccess NaturalIdDataAccess RuntimeModelCreationContext )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistentClass</type>
        <name>persistentClass</name>
      </param>
      <param>
        <type>EntityDataAccess</type>
        <name>cacheAccessStrategy</name>
      </param>
      <param>
        <type>NaturalIdDataAccess</type>
        <name>naturalIdRegionAccessStrategy</name>
      </param>
      <param>
        <type>RuntimeModelCreationContext</type>
        <name>creationContext</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="doExtract">
    <id>org.hibernate.type.descriptor.jdbc.BasicExtractor.doExtract( CallableStatement int WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="toType">
    <id>org.hibernate.persister.collection.AbstractCollectionPersister.toType( String )</id>
    <exceptions>
      <e>QueryException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="extract">
    <id>org.hibernate.persister.entity.DiscriminatorType.extract( CallableStatement String SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>String</type>
        <name>paramName</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getReferencedProperty">
    <id>org.hibernate.mapping.PersistentClass.getReferencedProperty( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyPath</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="deepCopy">
    <id>org.hibernate.persister.entity.DiscriminatorType.deepCopy( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isSame">
    <id>org.hibernate.type.AbstractType.isSame( Object Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>x</name>
      </param>
      <param>
        <type>Object</type>
        <name>y</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="initIdentifierPropertyPaths">
    <id>org.hibernate.persister.entity.AbstractPropertyMapping.initIdentifierPropertyPaths( String EntityType String[] String[] String[] Metadata )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
      <param>
        <type>EntityType</type>
        <name>etype</name>
      </param>
      <param>
        <type>String[]</type>
        <name>columns</name>
      </param>
      <param>
        <type>String[]</type>
        <name>columnReaders</name>
      </param>
      <param>
        <type>String[]</type>
        <name>columnReaderTemplates</name>
      </param>
      <param>
        <type>Metadata</type>
        <name>factory</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="enableFilter">
    <id>org.hibernate.SharedSessionContract.enableFilter( String )</id>
    <exceptions>
      <e>UnknownFilterException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>filterName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getColumnSpan">
    <id>org.hibernate.type.ComponentType.getColumnSpan( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nextValue">
    <id>org.hibernate.id.enhanced.TableGenerator.nextValue( Connection SqlStatementLogger SessionEventListenerManager SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Connection</type>
        <name>connection</name>
      </param>
      <param>
        <type>SqlStatementLogger</type>
        <name>logger</name>
      </param>
      <param>
        <type>SessionEventListenerManager</type>
        <name>listener</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getResultSet">
    <id>org.hibernate.dialect.Dialect.getResultSet( CallableStatement )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.usertype.BaseUserTypeSupport.nullSafeSet( PreparedStatement T int SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>T</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="postInstantiate">
    <id>org.hibernate.persister.entity.EntityPersister.postInstantiate( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="postConstruct">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.postConstruct( Metadata )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Metadata</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="assemble">
    <id>org.hibernate.type.Type.assemble( Serializable SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Serializable</type>
        <name>cached</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getDefaultCollectionType">
    <id>org.hibernate.mapping.Array.getDefaultCollectionType( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="isEqual">
    <id>org.hibernate.type.Type.isEqual( Object Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>x</name>
      </param>
      <param>
        <type>Object</type>
        <name>y</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="deepCopy">
    <id>org.hibernate.type.EnumType.deepCopy( T )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="bySimpleNaturalId">
    <id>org.hibernate.Session.bySimpleNaturalId( Class )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>entityClass</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createSelectionQuery">
    <id>org.hibernate.query.QueryProducer.createSelectionQuery( String )</id>
    <exceptions>
      <e>IllegalSelectQueryException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>hqlString</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="bindLimitParametersAtStartOfQuery">
    <id>org.hibernate.dialect.pagination.SQLServer2005LimitHandler.bindLimitParametersAtStartOfQuery( Limit PreparedStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Limit</type>
        <name>limit</name>
      </param>
      <param>
        <type>PreparedStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getPropertyValuesToInsert">
    <id>org.hibernate.metadata.ClassMetadata.getPropertyValuesToInsert( Object Map SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>entity</name>
      </param>
      <param>
        <type>Map</type>
        <name>mergeMap</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getIdentifierGenerator">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.getIdentifierGenerator( )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.type.AbstractType.disassemble( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>sessionFactory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.CustomType.nullSafeSet( PreparedStatement Object int SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="isDirty">
    <id>org.hibernate.Session.isDirty( )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getDropSequenceStrings">
    <id>org.hibernate.dialect.sequence.SequenceSupport.getDropSequenceStrings( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="replace">
    <id>org.hibernate.type.CustomType.replace( Object Object SharedSessionContractImplementor Object Map )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>original</name>
      </param>
      <param>
        <type>Object</type>
        <name>target</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
      <param>
        <type>Map</type>
        <name>copyCache</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="addPackage">
    <id>org.hibernate.cfg.Configuration.addPackage( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>packageName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="registerResultSetOutParameter">
    <id>org.hibernate.dialect.Dialect.registerResultSetOutParameter( CallableStatement String )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="assemble">
    <id>org.hibernate.type.CollectionType.assemble( Serializable SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Serializable</type>
        <name>cached</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="bind">
    <id>org.hibernate.type.descriptor.jdbc.BasicBinder.bind( PreparedStatement J int WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>J</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getOptimizerClass">
    <id>org.hibernate.id.enhanced.OptimizerDescriptor.getOptimizerClass( )</id>
    <exceptions>
      <e>ClassNotFoundException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getIdentityColumnString">
    <id>org.hibernate.dialect.identity.AbstractTransactSQLIdentityColumnSupport.getIdentityColumnString( int )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="bind">
    <id>org.hibernate.id.IntegralDataTypeHolder.bind( PreparedStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>preparedStatement</name>
      </param>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.domain.SqmTreatedSimplePath.treatAs( Class )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>treatJavaType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="instantiate">
    <id>org.hibernate.type.ArrayType.instantiate( SharedSessionContractImplementor CollectionPersister Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>CollectionPersister</type>
        <name>persister</name>
      </param>
      <param>
        <type>Object</type>
        <name>key</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="postInstantiate">
    <id>org.hibernate.proxy.ProxyFactory.postInstantiate( String Class Set Method Method CompositeType )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>entityName</name>
      </param>
      <param>
        <type>Class</type>
        <name>persistentClass</name>
      </param>
      <param>
        <type>Set</type>
        <name>interfaces</name>
      </param>
      <param>
        <type>Method</type>
        <name>getIdentifierMethod</name>
      </param>
      <param>
        <type>Method</type>
        <name>setIdentifierMethod</name>
      </param>
      <param>
        <type>CompositeType</type>
        <name>componentIdType</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="prepareStatement">
    <id>org.hibernate.id.enhanced.TableGenerator.prepareStatement( Connection String SqlStatementLogger SessionEventListenerManager SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Connection</type>
        <name>connection</name>
      </param>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>SqlStatementLogger</type>
        <name>logger</name>
      </param>
      <param>
        <type>SessionEventListenerManager</type>
        <name>listener</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="addFile">
    <id>org.hibernate.cfg.Configuration.addFile( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>xmlFile</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getHashCode">
    <id>org.hibernate.type.Type.getHashCode( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>x</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="initialize">
    <id>org.hibernate.persister.collection.CollectionPersister.initialize( Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>key</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="findDirty">
    <id>org.hibernate.Interceptor.findDirty( Object Object Object[] Object[] String[] Type[] )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>entity</name>
      </param>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>currentState</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>previousState</name>
      </param>
      <param>
        <type>String[]</type>
        <name>propertyNames</name>
      </param>
      <param>
        <type>Type[]</type>
        <name>types</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.from.SqmRoot.treatAs( EntityDomainType )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>EntityDomainType</type>
        <name>treatTarget</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="resolveTableReference">
    <id>org.hibernate.sql.ast.tree.from.ColumnReferenceQualifier.resolveTableReference( NavigablePath String )</id>
    <exceptions>
      <e>UnknownTableReferenceException</e>
    </exceptions>
    <params>
      <param>
        <type>NavigablePath</type>
        <name>navigablePath</name>
      </param>
      <param>
        <type>String</type>
        <name>tableExpression</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="initialize">
    <id>org.hibernate.proxy.AbstractLazyInitializer.initialize( )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="extract">
    <id>org.hibernate.type.SerializableToBlobType.extract( CallableStatement int SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>startIndex</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="fromString">
    <id>org.hibernate.type.descriptor.jdbc.OracleJsonBlobJdbcType.fromString( String JavaType WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>string</name>
      </param>
      <param>
        <type>JavaType</type>
        <name>javaType</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="addDirectory">
    <id>org.hibernate.boot.MetadataSources.addDirectory( File )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>dir</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="extractReturningValues">
    <id>org.hibernate.id.insert.AbstractSelectingDelegate.extractReturningValues( ResultSet SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>ResultSet</type>
        <name>resultSet</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="doExtract">
    <id>org.hibernate.dialect.DB2GetObjectExtractor.doExtract( CallableStatement int WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>paramIndex</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getPropertyValue">
    <id>org.hibernate.type.ComponentType.getPropertyValue( Object int SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>component</name>
      </param>
      <param>
        <type>int</type>
        <name>i</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="byMultipleNaturalId">
    <id>org.hibernate.Session.byMultipleNaturalId( Class )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>entityClass</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="invoke">
    <id>org.hibernate.engine.jdbc.SerializableBlobProxy.invoke( Object Method Object[] )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>proxy</name>
      </param>
      <param>
        <type>Method</type>
        <name>method</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>args</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="hashCode">
    <id>org.hibernate.usertype.BaseUserTypeSupport.hashCode( T )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>x</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="evict">
    <id>org.hibernate.Session.evict( Object )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setTypeUsingReflection">
    <id>org.hibernate.mapping.Any.setTypeUsingReflection( String String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>className</name>
      </param>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="areEqual">
    <id>org.hibernate.metamodel.model.domain.BasicDomainType.areEqual( J J )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>J</type>
        <name>x</name>
      </param>
      <param>
        <type>J</type>
        <name>y</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.EntityType.nullSafeSet( PreparedStatement Object int boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>settable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="setPropertyValue">
    <id>org.hibernate.metadata.ClassMetadata.setPropertyValue( Object String Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getPropertyValuesToInsert">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.getPropertyValuesToInsert( Object Map SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>entity</name>
      </param>
      <param>
        <type>Map</type>
        <name>mergeMap</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getOutputParameterValue">
    <id>org.hibernate.procedure.ProcedureOutputs.getOutputParameterValue( int )</id>
    <exceptions>
      <e>NoSuchParameterException</e>
      <e>ParameterStrategyException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="bindLimitParametersAtEndOfQuery">
    <id>org.hibernate.dialect.pagination.AbstractLimitHandler.bindLimitParametersAtEndOfQuery( Limit PreparedStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Limit</type>
        <name>limit</name>
      </param>
      <param>
        <type>PreparedStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.persister.entity.DiscriminatorType.nullSafeSet( PreparedStatement Object int boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>settable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="extract">
    <id>org.hibernate.type.descriptor.ValueExtractor.extract( CallableStatement int WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>paramIndex</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getImplementation">
    <id>org.hibernate.proxy.LazyInitializer.getImplementation( SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="byMultipleNaturalId">
    <id>org.hibernate.Session.byMultipleNaturalId( String )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>entityName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="unproxy">
    <id>org.hibernate.Hibernate.unproxy( Object )</id>
    <exceptions>
      <e>LazyInitializationException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>proxy</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toLoggableString">
    <id>org.hibernate.type.CollectionType.toLoggableString( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.EntityType.nullSafeSet( PreparedStatement Object int SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getProperty">
    <id>org.hibernate.mapping.PersistentClass.getProperty( String List )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
      <param>
        <type>List</type>
        <name>properties</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onCollectionRecreate">
    <id>org.hibernate.Interceptor.onCollectionRecreate( Object Serializable )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>collection</name>
      </param>
      <param>
        <type>Serializable</type>
        <name>key</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="buildIdentifierHelper">
    <id>org.hibernate.dialect.MariaDBDialect.buildIdentifierHelper( IdentifierHelperBuilder DatabaseMetaData )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>IdentifierHelperBuilder</type>
        <name>builder</name>
      </param>
      <param>
        <type>DatabaseMetaData</type>
        <name>dbMetaData</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="toType">
    <id>org.hibernate.persister.entity.PropertyMapping.toType( String )</id>
    <exceptions>
      <e>QueryException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onFlushDirty">
    <id>org.hibernate.Interceptor.onFlushDirty( Object Serializable Object[] Object[] String[] Type[] )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>entity</name>
      </param>
      <param>
        <type>Serializable</type>
        <name>id</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>currentState</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>previousState</name>
      </param>
      <param>
        <type>String[]</type>
        <name>propertyNames</name>
      </param>
      <param>
        <type>Type[]</type>
        <name>types</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="getColumnSpan">
    <id>org.hibernate.persister.entity.DiscriminatorType.getColumnSpan( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onCollectionUpdate">
    <id>org.hibernate.Interceptor.onCollectionUpdate( Object Serializable )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>collection</name>
      </param>
      <param>
        <type>Serializable</type>
        <name>key</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setReferencedTable">
    <id>org.hibernate.mapping.ForeignKey.setReferencedTable( Table )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Table</type>
        <name>referencedTable</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.from.SqmCteJoin.treatAs( Class )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>treatJavaType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isSame">
    <id>org.hibernate.type.ComponentType.isSame( Object Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>x</name>
      </param>
      <param>
        <type>Object</type>
        <name>y</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="assemble">
    <id>org.hibernate.type.SerializableToBlobType.assemble( Serializable SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Serializable</type>
        <name>cached</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getCreateSequenceStrings">
    <id>org.hibernate.dialect.sequence.NoSequenceSupport.getCreateSequenceStrings( String int int )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
      <param>
        <type>int</type>
        <name>initialValue</name>
      </param>
      <param>
        <type>int</type>
        <name>incrementSize</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isDirty">
    <id>org.hibernate.type.AnyType.isDirty( Object Object boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>old</name>
      </param>
      <param>
        <type>Object</type>
        <name>current</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>checkable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="toColumns">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.toColumns( String )</id>
    <exceptions>
      <e>QueryException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="bindParameterValue">
    <id>org.hibernate.sql.ast.tree.expression.JdbcLiteral.bindParameterValue( PreparedStatement int JdbcParameterBindings ExecutionContext )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>startPosition</name>
      </param>
      <param>
        <type>JdbcParameterBindings</type>
        <name>jdbcParameterBindings</name>
      </param>
      <param>
        <type>ExecutionContext</type>
        <name>executionContext</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="buildIdentifierHelper">
    <id>org.hibernate.dialect.OracleDialect.buildIdentifierHelper( IdentifierHelperBuilder DatabaseMetaData )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>IdentifierHelperBuilder</type>
        <name>builder</name>
      </param>
      <param>
        <type>DatabaseMetaData</type>
        <name>dbMetaData</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="OneToMany">
    <id>org.hibernate.mapping.OneToMany.OneToMany( MetadataBuildingContext PersistentClass )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>MetadataBuildingContext</type>
        <name>buildingContext</name>
      </param>
      <param>
        <type>PersistentClass</type>
        <name>owner</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createJdbcValue">
    <id>org.hibernate.dialect.StructJdbcType.createJdbcValue( Object WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>domainValue</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setMaxRows">
    <id>org.hibernate.dialect.pagination.AbstractLimitHandler.setMaxRows( Limit PreparedStatement )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Limit</type>
        <name>limit</name>
      </param>
      <param>
        <type>PreparedStatement</type>
        <name>statement</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="extract">
    <id>org.hibernate.type.AbstractStandardBasicType.extract( CallableStatement int SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>startIndex</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parseInto">
    <id>org.hibernate.graph.GraphParser.parseInto( Graph CharSequence EntityManager )</id>
    <exceptions>
      <e>InvalidGraphException</e>
    </exceptions>
    <params>
      <param>
        <type>Graph</type>
        <name>graph</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>graphText</name>
      </param>
      <param>
        <type>EntityManager</type>
        <name>entityManager</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="instantiate">
    <id>org.hibernate.type.IdentifierBagType.instantiate( SharedSessionContractImplementor CollectionPersister Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>CollectionPersister</type>
        <name>persister</name>
      </param>
      <param>
        <type>Object</type>
        <name>key</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="bindLimitParameters">
    <id>org.hibernate.dialect.pagination.AbstractLimitHandler.bindLimitParameters( Limit PreparedStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Limit</type>
        <name>limit</name>
      </param>
      <param>
        <type>PreparedStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getCreateSequenceString">
    <id>org.hibernate.dialect.sequence.NoSequenceSupport.getCreateSequenceString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="instantiate">
    <id>org.hibernate.Interceptor.instantiate( String EntityRepresentationStrategy Object )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>entityName</name>
      </param>
      <param>
        <type>EntityRepresentationStrategy</type>
        <name>representationStrategy</name>
      </param>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="addJar">
    <id>org.hibernate.cfg.Configuration.addJar( File )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>jar</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onDelete">
    <id>org.hibernate.classic.Lifecycle.onDelete( Session )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>Session</type>
        <name>s</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nullSafeGet">
    <id>org.hibernate.type.EnumType.nullSafeGet( ResultSet int SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>ResultSet</type>
        <name>rs</name>
      </param>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getDatabaseSnapshot">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.getDatabaseSnapshot( Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="postInstantiate">
    <id>org.hibernate.proxy.pojo.bytebuddy.ByteBuddyProxyFactory.postInstantiate( String Class Set Method Method CompositeType )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>entityName</name>
      </param>
      <param>
        <type>Class</type>
        <name>persistentClass</name>
      </param>
      <param>
        <type>Set</type>
        <name>interfaces</name>
      </param>
      <param>
        <type>Method</type>
        <name>getIdentifierMethod</name>
      </param>
      <param>
        <type>Method</type>
        <name>setIdentifierMethod</name>
      </param>
      <param>
        <type>CompositeType</type>
        <name>componentIdType</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="recreate">
    <id>org.hibernate.persister.collection.OneToManyPersister.recreate( PersistentCollection Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistentCollection</type>
        <name>collection</name>
      </param>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="configure">
    <id>org.hibernate.id.IdentifierGenerator.configure( Type Properties ServiceRegistry )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Type</type>
        <name>type</name>
      </param>
      <param>
        <type>Properties</type>
        <name>parameters</name>
      </param>
      <param>
        <type>ServiceRegistry</type>
        <name>serviceRegistry</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getDropSequenceString">
    <id>org.hibernate.dialect.sequence.NoSequenceSupport.getDropSequenceString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="validate">
    <id>org.hibernate.mapping.RootClass.validate( Metadata )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Metadata</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="configure">
    <id>org.hibernate.id.enhanced.SequenceStyleGenerator.configure( Type Properties ServiceRegistry )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Type</type>
        <name>type</name>
      </param>
      <param>
        <type>Properties</type>
        <name>parameters</name>
      </param>
      <param>
        <type>ServiceRegistry</type>
        <name>serviceRegistry</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="buildIdentifierHelper">
    <id>org.hibernate.dialect.AbstractHANADialect.buildIdentifierHelper( IdentifierHelperBuilder DatabaseMetaData )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>IdentifierHelperBuilder</type>
        <name>builder</name>
      </param>
      <param>
        <type>DatabaseMetaData</type>
        <name>dbMetaData</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createJdbcValue">
    <id>org.hibernate.dialect.AbstractPostgreSQLStructJdbcType.createJdbcValue( Object WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>domainValue</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.domain.SqmCteRoot.treatAs( EntityDomainType )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>EntityDomainType</type>
        <name>treatTarget</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="equals">
    <id>org.hibernate.usertype.BaseUserTypeSupport.equals( T T )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>x</name>
      </param>
      <param>
        <type>T</type>
        <name>y</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getRecursiveProperty">
    <id>org.hibernate.mapping.PersistentClass.getRecursiveProperty( String List )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyPath</name>
      </param>
      <param>
        <type>List</type>
        <name>properties</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isDirty">
    <id>org.hibernate.type.CollectionType.isDirty( Object Object boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>old</name>
      </param>
      <param>
        <type>Object</type>
        <name>current</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>checkable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="validate">
    <id>org.hibernate.mapping.Collection.validate( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="initPropertyPaths">
    <id>org.hibernate.persister.entity.AbstractPropertyMapping.initPropertyPaths( String Type String[] String[] String[] String[] Metadata )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
      <param>
        <type>Type</type>
        <name>type</name>
      </param>
      <param>
        <type>String[]</type>
        <name>columns</name>
      </param>
      <param>
        <type>String[]</type>
        <name>columnReaders</name>
      </param>
      <param>
        <type>String[]</type>
        <name>columnReaderTemplates</name>
      </param>
      <param>
        <type>String[]</type>
        <name>formulaTemplates</name>
      </param>
      <param>
        <type>Metadata</type>
        <name>factory</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="onUpdate">
    <id>org.hibernate.classic.Lifecycle.onUpdate( Session )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>Session</type>
        <name>s</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getSingleStatementDetails">
    <id>org.hibernate.engine.jdbc.mutation.group.PreparedStatementGroup.getSingleStatementDetails( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="isDirty">
    <id>org.hibernate.type.CustomType.isDirty( Object Object boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>old</name>
      </param>
      <param>
        <type>Object</type>
        <name>current</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>checkable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="createForeignKey">
    <id>org.hibernate.mapping.SimpleValue.createForeignKey( PersistentClass AnnotatedJoinColumns )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistentClass</type>
        <name>referencedEntity</name>
      </param>
      <param>
        <type>AnnotatedJoinColumns</type>
        <name>joinColumns</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isModified">
    <id>org.hibernate.type.AnyType.isModified( Object Object boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>old</name>
      </param>
      <param>
        <type>Object</type>
        <name>current</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>checkable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="validate">
    <id>org.hibernate.mapping.JoinedSubclass.validate( Metadata )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Metadata</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="OneToManyPersister">
    <id>org.hibernate.persister.collection.OneToManyPersister.OneToManyPersister( Collection CollectionDataAccess RuntimeModelCreationContext )</id>
    <exceptions>
      <e>CacheException</e>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Collection</type>
        <name>collectionBinding</name>
      </param>
      <param>
        <type>CollectionDataAccess</type>
        <name>cacheAccessStrategy</name>
      </param>
      <param>
        <type>RuntimeModelCreationContext</type>
        <name>creationContext</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="deepCopy">
    <id>org.hibernate.type.Type.deepCopy( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createJdbcValue">
    <id>org.hibernate.dialect.DB2StructJdbcType.createJdbcValue( Object WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getMappedClass">
    <id>org.hibernate.mapping.PersistentClass.getMappedClass( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="postInstantiate">
    <id>org.hibernate.persister.collection.CollectionPersister.postInstantiate( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="registerResultSetOutParameter">
    <id>org.hibernate.dialect.DB2Dialect.registerResultSetOutParameter( CallableStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>col</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.domain.AbstractSqmSpecificPluralPartPath.treatAs( Class )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>treatJavaType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getResultSet">
    <id>org.hibernate.dialect.MySQLDialect.getResultSet( CallableStatement )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>ps</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.AbstractSingleColumnStandardBasicType.nullSafeSet( PreparedStatement Object int boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>settable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="conflictOnConstraint">
    <id>org.hibernate.query.criteria.JpaConflictClause.conflictOnConstraint( String )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>constraintName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getSubclassProperty">
    <id>org.hibernate.mapping.PersistentClass.getSubclassProperty( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getIdentityColumnString">
    <id>org.hibernate.dialect.identity.IdentityColumnSupportImpl.getIdentityColumnString( int )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="configure">
    <id>org.hibernate.id.enhanced.TableGenerator.configure( Type Properties ServiceRegistry )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Type</type>
        <name>type</name>
      </param>
      <param>
        <type>Properties</type>
        <name>parameters</name>
      </param>
      <param>
        <type>ServiceRegistry</type>
        <name>serviceRegistry</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getVersion">
    <id>org.hibernate.metadata.ClassMetadata.getVersion( Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="lock">
    <id>org.hibernate.dialect.lock.LockingStrategy.lock( Object Object Object int EventSource )</id>
    <exceptions>
      <e>LockingStrategyException</e>
      <e>StaleObjectStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>Object</type>
        <name>version</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>int</type>
        <name>timeout</name>
      </param>
      <param>
        <type>EventSource</type>
        <name>session</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="dehydrate">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.dehydrate( Object Object[] Object boolean[] boolean[][] int PreparedStatement SharedSessionContractImplementor int boolean )</id>
    <exceptions>
      <e>SQLException</e>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>fields</name>
      </param>
      <param>
        <type>Object</type>
        <name>rowId</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>includeProperty</name>
      </param>
      <param>
        <type>boolean[][]</type>
        <name>includeColumns</name>
      </param>
      <param>
        <type>int</type>
        <name>j</name>
      </param>
      <param>
        <type>PreparedStatement</type>
        <name>ps</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>boolean</type>
        <name>isUpdate</name>
      </param>
    </params>
    <arity>10</arity>
  </method>
  <method name="executeWork">
    <id>org.hibernate.jdbc.WorkExecutor.executeWork( Work Connection )</id>
    <exceptions>
      <e>SQLException</e>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Work</type>
        <name>work</name>
      </param>
      <param>
        <type>Connection</type>
        <name>connection</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.from.SqmRoot.treatAs( Class )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>treatJavaType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAssociatedJoinable">
    <id>org.hibernate.type.AssociationType.getAssociatedJoinable( SessionFactoryImplementor )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="doLoad">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.doLoad( Object Object LockOptions Boolean SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>Object</type>
        <name>optionalObject</name>
      </param>
      <param>
        <type>LockOptions</type>
        <name>lockOptions</name>
      </param>
      <param>
        <type>Boolean</type>
        <name>readOnly</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getSequenceNextValString">
    <id>org.hibernate.dialect.sequence.NoSequenceSupport.getSequenceNextValString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="bind">
    <id>org.hibernate.type.descriptor.ValueBinder.bind( PreparedStatement X int WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>X</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.type.SpecialOneToOneType.disassemble( Object SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isValid">
    <id>org.hibernate.mapping.Property.isValid( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isValid">
    <id>org.hibernate.mapping.SimpleValue.isValid( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="extractJdbcValues">
    <id>org.hibernate.type.descriptor.jdbc.OracleJsonBlobJdbcType.extractJdbcValues( Object WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>rawJdbcValue</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getColumnSpan">
    <id>org.hibernate.type.SpecialOneToOneType.getColumnSpan( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="load">
    <id>org.hibernate.persister.entity.EntityPersister.load( Object Object LockMode SharedSessionContractImplementor Boolean )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>Object</type>
        <name>optionalObject</name>
      </param>
      <param>
        <type>LockMode</type>
        <name>lockMode</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Boolean</type>
        <name>readOnly</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getSetter">
    <id>org.hibernate.mapping.Property.getSetter( Class )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>clazz</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getEntity">
    <id>org.hibernate.Interceptor.getEntity( String Serializable )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>entityName</name>
      </param>
      <param>
        <type>Serializable</type>
        <name>id</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.CustomType.nullSafeSet( PreparedStatement Object int boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>settable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="toLoggableString">
    <id>org.hibernate.type.Type.toLoggableString( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getSequencePreviousValString">
    <id>org.hibernate.dialect.sequence.DB2iSequenceSupport.getSequencePreviousValString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getBytes">
    <id>org.hibernate.engine.jdbc.BlobProxy.getBytes( long int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>length</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="extract">
    <id>org.hibernate.type.descriptor.jdbc.BasicExtractor.extract( ResultSet int WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>ResultSet</type>
        <name>rs</name>
      </param>
      <param>
        <type>int</type>
        <name>paramIndex</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getBinaryStream">
    <id>org.hibernate.engine.jdbc.BlobProxy.getBinaryStream( long long )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>start</name>
      </param>
      <param>
        <type>long</type>
        <name>length</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="registerParameter">
    <id>org.hibernate.procedure.ProcedureCall.registerParameter( String BasicTypeReference ParameterMode )</id>
    <exceptions>
      <e>NamedParametersNotSupportedException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>parameterName</name>
      </param>
      <param>
        <type>BasicTypeReference</type>
        <name>type</name>
      </param>
      <param>
        <type>ParameterMode</type>
        <name>mode</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="registerResultSetOutParameter">
    <id>org.hibernate.dialect.AbstractTransactSQLDialect.registerResultSetOutParameter( CallableStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>col</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="buildIdentifierHelper">
    <id>org.hibernate.dialect.PostgreSQLDialect.buildIdentifierHelper( IdentifierHelperBuilder DatabaseMetaData )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>IdentifierHelperBuilder</type>
        <name>builder</name>
      </param>
      <param>
        <type>DatabaseMetaData</type>
        <name>dbMetaData</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="checkVersion">
    <id>org.hibernate.sql.results.graph.entity.AbstractEntityInitializer.checkVersion( EntityEntry RowProcessingState )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>EntityEntry</type>
        <name>entry</name>
      </param>
      <param>
        <type>RowProcessingState</type>
        <name>rowProcessingState</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getSqlTypeCodes">
    <id>org.hibernate.type.AnyType.getSqlTypeCodes( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createNamedSelectionQuery">
    <id>org.hibernate.query.QueryProducer.createNamedSelectionQuery( String Class )</id>
    <exceptions>
      <e>IllegalSelectQueryException</e>
      <e>UnknownNamedQueryException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>Class</type>
        <name>resultType</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="toColumns">
    <id>org.hibernate.persister.entity.PropertyMapping.toColumns( String )</id>
    <exceptions>
      <e>QueryException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getFilterDefinition">
    <id>org.hibernate.SessionFactory.getFilterDefinition( String )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>filterName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="registerOutParameter">
    <id>org.hibernate.type.descriptor.jdbc.JdbcType.registerOutParameter( CallableStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>callableStatement</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="replace">
    <id>org.hibernate.type.Type.replace( Object Object SharedSessionContractImplementor Object Map ForeignKeyDirection )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>original</name>
      </param>
      <param>
        <type>Object</type>
        <name>target</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
      <param>
        <type>Map</type>
        <name>copyCache</name>
      </param>
      <param>
        <type>ForeignKeyDirection</type>
        <name>foreignKeyDirection</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="verifyOutcome">
    <id>org.hibernate.jdbc.Expectation.verifyOutcome( int PreparedStatement int String )</id>
    <exceptions>
      <e>SQLException</e>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>rowCount</name>
      </param>
      <param>
        <type>PreparedStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>batchPosition</name>
      </param>
      <param>
        <type>String</type>
        <name>statementSQL</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="addSynchronizedEntityName">
    <id>org.hibernate.procedure.ProcedureCall.addSynchronizedEntityName( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>entityName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="fromString">
    <id>org.hibernate.dialect.JsonHelper.fromString( JdbcMapping String int int boolean boolean WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>JdbcMapping</type>
        <name>jdbcMapping</name>
      </param>
      <param>
        <type>String</type>
        <name>string</name>
      </param>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>end</name>
      </param>
      <param>
        <type>boolean</type>
        <name>hasEscape</name>
      </param>
      <param>
        <type>boolean</type>
        <name>returnEmbeddable</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.from.SqmCteJoin.treatAs( EntityDomainType )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>EntityDomainType</type>
        <name>treatTarget</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.MetaType.nullSafeSet( PreparedStatement Object int SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="assemble">
    <id>org.hibernate.type.SpecialOneToOneType.assemble( Serializable SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Serializable</type>
        <name>oid</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="throwIfNull">
    <id>org.hibernate.UnresolvableObjectException.throwIfNull( Object Object String )</id>
    <exceptions>
      <e>UnresolvableObjectException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>entity</name>
      </param>
      <param>
        <type>Object</type>
        <name>identifier</name>
      </param>
      <param>
        <type>String</type>
        <name>entityName</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="replaceElements">
    <id>org.hibernate.usertype.UserCollectionType.replaceElements( Object Object CollectionPersister Object Map SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>original</name>
      </param>
      <param>
        <type>Object</type>
        <name>target</name>
      </param>
      <param>
        <type>CollectionPersister</type>
        <name>persister</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
      <param>
        <type>Map</type>
        <name>copyCache</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="getResultSet">
    <id>org.hibernate.dialect.DialectDelegateWrapper.getResultSet( CallableStatement String )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addSynchronizedEntityClass">
    <id>org.hibernate.query.NativeQuery.addSynchronizedEntityClass( Class )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>entityClass</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="assemble">
    <id>org.hibernate.type.AbstractStandardBasicType.assemble( Serializable SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Serializable</type>
        <name>cached</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="lock">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.lock( Object Object Object LockOptions EventSource )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>Object</type>
        <name>version</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>LockOptions</type>
        <name>lockOptions</name>
      </param>
      <param>
        <type>EventSource</type>
        <name>session</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="AbstractCollectionPersister">
    <id>org.hibernate.persister.collection.AbstractCollectionPersister.AbstractCollectionPersister( Collection CollectionDataAccess RuntimeModelCreationContext )</id>
    <exceptions>
      <e>CacheException</e>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Collection</type>
        <name>collectionBootDescriptor</name>
      </param>
      <param>
        <type>CollectionDataAccess</type>
        <name>cacheAccessStrategy</name>
      </param>
      <param>
        <type>RuntimeModelCreationContext</type>
        <name>creationContext</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getHashCode">
    <id>org.hibernate.type.Type.getHashCode( Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>x</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.SerializableToBlobType.nullSafeSet( CallableStatement T String SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>T</type>
        <name>value</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="fromString">
    <id>org.hibernate.dialect.JsonHelper.fromString( EmbeddableMappingType String boolean WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>EmbeddableMappingType</type>
        <name>embeddableMappingType</name>
      </param>
      <param>
        <type>String</type>
        <name>string</name>
      </param>
      <param>
        <type>boolean</type>
        <name>returnEmbeddable</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="registerResultSetOutParameter">
    <id>org.hibernate.dialect.AbstractHANADialect.registerResultSetOutParameter( CallableStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="extractJdbcValues">
    <id>org.hibernate.type.descriptor.jdbc.AggregateJdbcType.extractJdbcValues( Object WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>rawJdbcValue</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addKeySubGraph">
    <id>org.hibernate.graph.Graph.addKeySubGraph( String )</id>
    <exceptions>
      <e>CannotContainSubGraphException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>attributeName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getType">
    <id>org.hibernate.mapping.BasicValue.getType( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.type.ComponentType.disassemble( Object SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getGeneratedIdentity">
    <id>org.hibernate.id.IdentifierGeneratorHelper.getGeneratedIdentity( String ResultSet PostInsertIdentityPersister WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
      <param>
        <type>ResultSet</type>
        <name>resultSet</name>
      </param>
      <param>
        <type>PostInsertIdentityPersister</type>
        <name>persister</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>wrapperOptions</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="addKeySubGraph">
    <id>org.hibernate.graph.Graph.addKeySubGraph( PersistentAttribute )</id>
    <exceptions>
      <e>CannotContainSubGraphException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistentAttribute</type>
        <name>attribute</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getEntityDescriptor">
    <id>org.hibernate.metamodel.MappingMetamodel.getEntityDescriptor( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>entityName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.AbstractStandardBasicType.nullSafeSet( CallableStatement Object String WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="isValid">
    <id>org.hibernate.mapping.Value.isValid( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="resolveIdentifier">
    <id>org.hibernate.type.EntityType.resolveIdentifier( Object SharedSessionContractImplementor Boolean )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Boolean</type>
        <name>overridingEager</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="configure">
    <id>org.hibernate.id.UUIDGenerator.configure( Type Properties ServiceRegistry )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Type</type>
        <name>type</name>
      </param>
      <param>
        <type>Properties</type>
        <name>parameters</name>
      </param>
      <param>
        <type>ServiceRegistry</type>
        <name>serviceRegistry</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="forceVersionIncrement">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.forceVersionIncrement( Object Object boolean SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>Object</type>
        <name>currentVersion</name>
      </param>
      <param>
        <type>boolean</type>
        <name>batching</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="extract">
    <id>org.hibernate.type.ComponentType.extract( CallableStatement int SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>startIndex</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="loadByUniqueKey">
    <id>org.hibernate.type.EntityType.loadByUniqueKey( String String Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>entityName</name>
      </param>
      <param>
        <type>String</type>
        <name>uniqueKeyPropertyName</name>
      </param>
      <param>
        <type>Object</type>
        <name>key</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="close">
    <id>org.hibernate.SharedSessionContract.close( )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="initOrdinaryPropertyPaths">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.initOrdinaryPropertyPaths( Metadata )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Metadata</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.type.OneToOneType.disassemble( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>sessionFactory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isValid">
    <id>org.hibernate.mapping.OneToMany.isValid( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addSynchronizedEntityName">
    <id>org.hibernate.query.NativeQuery.addSynchronizedEntityName( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>entityName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="buildIdentifierHelper">
    <id>org.hibernate.dialect.SQLServerDialect.buildIdentifierHelper( IdentifierHelperBuilder DatabaseMetaData )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>IdentifierHelperBuilder</type>
        <name>builder</name>
      </param>
      <param>
        <type>DatabaseMetaData</type>
        <name>dbMetaData</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getJdbcValues">
    <id>org.hibernate.dialect.StructHelper.getJdbcValues( EmbeddableMappingType int[] Object[] WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>EmbeddableMappingType</type>
        <name>embeddableMappingType</name>
      </param>
      <param>
        <type>int[]</type>
        <name>orderMapping</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>attributeValues</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="resetIfNeeded">
    <id>org.hibernate.engine.jdbc.BlobProxy.resetIfNeeded( )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="addSynchronizedEntityName">
    <id>org.hibernate.query.SynchronizeableQuery.addSynchronizedEntityName( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>entityName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="cancelQuery">
    <id>org.hibernate.Session.cancelQuery( )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="invoke">
    <id>org.hibernate.engine.jdbc.ClobProxy.invoke( Object Method Object[] )</id>
    <exceptions>
      <e>Throwable</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>proxy</name>
      </param>
      <param>
        <type>Method</type>
        <name>method</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>args</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getIdentifier">
    <id>org.hibernate.type.EntityType.getIdentifier( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>sessionFactory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="findSubPathSource">
    <id>org.hibernate.query.sqm.SqmPathSource.findSubPathSource( String JpaMetamodelImplementor )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>JpaMetamodelImplementor</type>
        <name>metamodel</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getIdentifierIfNotUnsaved">
    <id>org.hibernate.metamodel.mapping.EntityIdentifierMapping.getIdentifierIfNotUnsaved( Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>TransientObjectException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>entity</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="assemble">
    <id>org.hibernate.type.UserComponentType.assemble( Serializable SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Serializable</type>
        <name>object</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getPropertyValue">
    <id>org.hibernate.type.AnyType.getPropertyValue( Object int SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>component</name>
      </param>
      <param>
        <type>int</type>
        <name>i</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getCriteriaBuilder">
    <id>org.hibernate.SharedSessionContract.getCriteriaBuilder( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="isSame">
    <id>org.hibernate.type.AnyType.isSame( Object Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>x</name>
      </param>
      <param>
        <type>Object</type>
        <name>y</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="buildIdentifierHelper">
    <id>org.hibernate.dialect.SybaseDialect.buildIdentifierHelper( IdentifierHelperBuilder DatabaseMetaData )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>IdentifierHelperBuilder</type>
        <name>builder</name>
      </param>
      <param>
        <type>DatabaseMetaData</type>
        <name>dbMetaData</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setMaxRows">
    <id>org.hibernate.dialect.pagination.LimitHandler.setMaxRows( Limit PreparedStatement )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Limit</type>
        <name>limit</name>
      </param>
      <param>
        <type>PreparedStatement</type>
        <name>statement</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getSelectSequencePreviousValString">
    <id>org.hibernate.dialect.sequence.PostgreSQLSequenceSupport.getSelectSequencePreviousValString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDefaultCollectionType">
    <id>org.hibernate.mapping.List.getDefaultCollectionType( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="close">
    <id>org.hibernate.SessionFactory.close( )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="loadByUniqueKey">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.loadByUniqueKey( String Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
      <param>
        <type>Object</type>
        <name>uniqueKey</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="JoinedSubclassEntityPersister">
    <id>org.hibernate.persister.entity.JoinedSubclassEntityPersister.JoinedSubclassEntityPersister( PersistentClass EntityDataAccess NaturalIdDataAccess RuntimeModelCreationContext )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistentClass</type>
        <name>persistentClass</name>
      </param>
      <param>
        <type>EntityDataAccess</type>
        <name>cacheAccessStrategy</name>
      </param>
      <param>
        <type>NaturalIdDataAccess</type>
        <name>naturalIdRegionAccessStrategy</name>
      </param>
      <param>
        <type>RuntimeModelCreationContext</type>
        <name>creationContext</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="isEqual">
    <id>org.hibernate.type.Type.isEqual( Object Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>x</name>
      </param>
      <param>
        <type>Object</type>
        <name>y</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.domain.SqmBasicValuedSimplePath.treatAs( Class )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>treatJavaType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setTypeUsingReflection">
    <id>org.hibernate.mapping.SimpleValue.setTypeUsingReflection( String String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>className</name>
      </param>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="buildIdentifierHelper">
    <id>org.hibernate.dialect.DialectDelegateWrapper.buildIdentifierHelper( IdentifierHelperBuilder DatabaseMetaData )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>IdentifierHelperBuilder</type>
        <name>builder</name>
      </param>
      <param>
        <type>DatabaseMetaData</type>
        <name>dbMetaData</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="fromString">
    <id>org.hibernate.dialect.JsonHelper.fromString( EmbeddableMappingType String int int Object[] boolean WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>EmbeddableMappingType</type>
        <name>embeddableMappingType</name>
      </param>
      <param>
        <type>String</type>
        <name>string</name>
      </param>
      <param>
        <type>int</type>
        <name>begin</name>
      </param>
      <param>
        <type>int</type>
        <name>end</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>values</name>
      </param>
      <param>
        <type>boolean</type>
        <name>returnEmbeddable</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="getSelectSequencePreviousValString">
    <id>org.hibernate.dialect.sequence.DerbySequenceSupport.getSelectSequencePreviousValString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.from.SqmDerivedJoin.treatAs( EntityDomainType )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>EntityDomainType</type>
        <name>treatTarget</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPropertyValue">
    <id>org.hibernate.persister.entity.EntityPersister.getPropertyValue( Object int )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>int</type>
        <name>i</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getSelectSequenceNextValString">
    <id>org.hibernate.dialect.sequence.SequenceSupport.getSelectSequenceNextValString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="doBindNull">
    <id>org.hibernate.type.descriptor.jdbc.BasicBinder.doBindNull( PreparedStatement int WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="load">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.load( Object Object LockOptions SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>Object</type>
        <name>optionalObject</name>
      </param>
      <param>
        <type>LockOptions</type>
        <name>lockOptions</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.domain.SqmEntityValuedSimplePath.treatAs( Class )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>treatJavaType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createJdbcValue">
    <id>org.hibernate.type.descriptor.jdbc.XmlJdbcType.createJdbcValue( Object WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>domainValue</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="enableFetchProfile">
    <id>org.hibernate.Session.enableFetchProfile( String )</id>
    <exceptions>
      <e>UnknownProfileException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeReplace">
    <id>org.hibernate.metamodel.model.domain.AbstractManagedType.writeReplace( )</id>
    <exceptions>
      <e>ObjectStreamException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.Type.nullSafeSet( PreparedStatement Object int boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>settable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="postFlush">
    <id>org.hibernate.Interceptor.postFlush( Iterator )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>Iterator</type>
        <name>entities</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="prepareStatement">
    <id>org.hibernate.id.enhanced.TableStructure.prepareStatement( Connection String SqlStatementLogger SessionEventListenerManager SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Connection</type>
        <name>connection</name>
      </param>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>SqlStatementLogger</type>
        <name>statementLogger</name>
      </param>
      <param>
        <type>SessionEventListenerManager</type>
        <name>statsCollector</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="accept">
    <id>org.hibernate.jdbc.AbstractWork.accept( WorkExecutor Connection )</id>
    <exceptions>
      <e>SQLException</e>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>WorkExecutor</type>
        <name>executor</name>
      </param>
      <param>
        <type>Connection</type>
        <name>connection</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addSubclass">
    <id>org.hibernate.mapping.PersistentClass.addSubclass( Subclass )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Subclass</type>
        <name>subclass</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getSubPathSource">
    <id>org.hibernate.query.sqm.SqmPathSource.getSubPathSource( String JpaMetamodelImplementor )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>JpaMetamodelImplementor</type>
        <name>metamodel</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.usertype.UserType.nullSafeSet( PreparedStatement J int SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>J</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="equals">
    <id>org.hibernate.type.EnumType.equals( T T )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>x</name>
      </param>
      <param>
        <type>T</type>
        <name>y</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getResultSet">
    <id>org.hibernate.dialect.Dialect.getResultSet( CallableStatement String )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getSqlTypeCodes">
    <id>org.hibernate.type.CollectionType.getSqlTypeCodes( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>session</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getCreateSequenceString">
    <id>org.hibernate.dialect.sequence.SequenceSupport.getCreateSequenceString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addDirectory">
    <id>org.hibernate.cfg.Configuration.addDirectory( File )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>dir</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getCreateSequenceString">
    <id>org.hibernate.dialect.sequence.MariaDBSequenceSupport.getCreateSequenceString( String int int )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
      <param>
        <type>int</type>
        <name>initialValue</name>
      </param>
      <param>
        <type>int</type>
        <name>incrementSize</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="doProcessQueuedOps">
    <id>org.hibernate.persister.collection.OneToManyPersister.doProcessQueuedOps( PersistentCollection Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistentCollection</type>
        <name>collection</name>
      </param>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="sqlAlterStrings">
    <id>org.hibernate.mapping.Table.sqlAlterStrings( Dialect Metadata TableInformation SqlStringGenerationContext )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Dialect</type>
        <name>dialect</name>
      </param>
      <param>
        <type>Metadata</type>
        <name>metadata</name>
      </param>
      <param>
        <type>TableInformation</type>
        <name>tableInfo</name>
      </param>
      <param>
        <type>SqlStringGenerationContext</type>
        <name>sqlStringGenerationContext</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="initialize">
    <id>org.hibernate.tuple.AnnotationValueGeneration.initialize( A Class )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>A</type>
        <name>annotation</name>
      </param>
      <param>
        <type>Class</type>
        <name>propertyType</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getCascadeStyle">
    <id>org.hibernate.mapping.Property.getCascadeStyle( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.type.CollectionType.disassemble( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>sessionFactory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="interpret">
    <id>org.hibernate.tool.schema.SourceType.interpret( Object SourceType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SourceType</type>
        <name>defaultValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getEntityDescriptor">
    <id>org.hibernate.metamodel.MappingMetamodel.getEntityDescriptor( NavigableRole )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>NavigableRole</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="byMultipleIds">
    <id>org.hibernate.Session.byMultipleIds( String )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>entityName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="extract">
    <id>org.hibernate.type.descriptor.jdbc.BasicExtractor.extract( CallableStatement int WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>paramIndex</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="postInstantiate">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.postInstantiate( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="determineConcreteEntityDescriptor">
    <id>org.hibernate.sql.results.graph.entity.AbstractEntityInitializer.determineConcreteEntityDescriptor( RowProcessingState )</id>
    <exceptions>
      <e>WrongClassException</e>
    </exceptions>
    <params>
      <param>
        <type>RowProcessingState</type>
        <name>rowProcessingState</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.type.SerializableToBlobType.disassemble( Object SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.domain.SqmEmbeddedValuedSimplePath.treatAs( Class )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>treatJavaType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getCreateSequenceString">
    <id>org.hibernate.dialect.sequence.MariaDBSequenceSupport.getCreateSequenceString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getSelectSequenceNextValString">
    <id>org.hibernate.dialect.sequence.NoSequenceSupport.getSelectSequenceNextValString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getSelectableType">
    <id>org.hibernate.mapping.Value.getSelectableType( Mapping int )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>factory</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.type.CollectionType.disassemble( Object SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getDropSequenceString">
    <id>org.hibernate.dialect.sequence.SequenceSupport.getDropSequenceString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="extractGeneratedValues">
    <id>org.hibernate.id.insert.AbstractSelectingDelegate.extractGeneratedValues( ResultSet SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>ResultSet</type>
        <name>resultSet</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.MetaType.nullSafeSet( PreparedStatement Object int boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>settable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="doExtract">
    <id>org.hibernate.dialect.DB2GetObjectExtractor.doExtract( CallableStatement String WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getPropertyType">
    <id>org.hibernate.metadata.ClassMetadata.getPropertyType( String )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.SerializableToBlobType.nullSafeSet( PreparedStatement Object int SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="remove">
    <id>org.hibernate.persister.collection.AbstractCollectionPersister.remove( Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getResultSet">
    <id>org.hibernate.dialect.OracleDialect.getResultSet( CallableStatement String )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getGetter">
    <id>org.hibernate.mapping.Property.getGetter( Class )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>clazz</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getColumnSpan">
    <id>org.hibernate.type.MetaType.getColumnSpan( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.domain.SqmEntityValuedSimplePath.treatAs( EntityDomainType )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>EntityDomainType</type>
        <name>treatTarget</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="bySimpleNaturalId">
    <id>org.hibernate.Session.bySimpleNaturalId( String )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>entityName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="hashCode">
    <id>org.hibernate.type.EnumType.hashCode( T )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>x</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAssociatedEntityName">
    <id>org.hibernate.type.CollectionType.getAssociatedEntityName( SessionFactoryImplementor )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openSession">
    <id>org.hibernate.SessionFactory.openSession( )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getSqlTypeCode">
    <id>org.hibernate.mapping.Column.getSqlTypeCode( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAttributeValues">
    <id>org.hibernate.dialect.StructHelper.getAttributeValues( EmbeddableMappingType Object[] WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>EmbeddableMappingType</type>
        <name>embeddableMappingType</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>rawJdbcValues</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="findDirty">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.findDirty( Object[] Object[] Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object[]</type>
        <name>currentState</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>previousState</name>
      </param>
      <param>
        <type>Object</type>
        <name>entity</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getSqlTypeCodes">
    <id>org.hibernate.type.OneToOneType.getSqlTypeCodes( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>session</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isValid">
    <id>org.hibernate.mapping.Any.isValid( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="registerParameter">
    <id>org.hibernate.procedure.ProcedureCall.registerParameter( String Class ParameterMode )</id>
    <exceptions>
      <e>NamedParametersNotSupportedException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>parameterName</name>
      </param>
      <param>
        <type>Class</type>
        <name>type</name>
      </param>
      <param>
        <type>ParameterMode</type>
        <name>mode</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="registerOutParameter">
    <id>org.hibernate.dialect.StructJdbcType.registerOutParameter( CallableStatement String )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>callableStatement</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="toString">
    <id>org.hibernate.usertype.EnhancedUserType.toString( J )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>J</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getLockMode">
    <id>org.hibernate.query.NativeQuery.getLockMode( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getSingleResultOrNull">
    <id>org.hibernate.query.SelectionQuery.getSingleResultOrNull( )</id>
    <exceptions>
      <e>NonUniqueResultException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getAssociatedJoinable">
    <id>org.hibernate.type.CollectionType.getAssociatedJoinable( SessionFactoryImplementor )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.type.ManyToOneType.disassemble( Object SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="resolveIdentifier">
    <id>org.hibernate.type.EntityType.resolveIdentifier( Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setTypeUsingReflection">
    <id>org.hibernate.mapping.ToOne.setTypeUsingReflection( String String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>className</name>
      </param>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onCollectionRecreate">
    <id>org.hibernate.Interceptor.onCollectionRecreate( Object Object )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>collection</name>
      </param>
      <param>
        <type>Object</type>
        <name>key</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="replace">
    <id>org.hibernate.type.AbstractType.replace( Object Object SharedSessionContractImplementor Object Map ForeignKeyDirection )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>original</name>
      </param>
      <param>
        <type>Object</type>
        <name>target</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
      <param>
        <type>Map</type>
        <name>copyCache</name>
      </param>
      <param>
        <type>ForeignKeyDirection</type>
        <name>foreignKeyDirection</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="setPropertyValues">
    <id>org.hibernate.type.CompositeType.setPropertyValues( Object Object[] )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>component</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>values</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="bindLimitParametersAtEndOfQuery">
    <id>org.hibernate.dialect.pagination.SQLServer2005LimitHandler.bindLimitParametersAtEndOfQuery( Limit PreparedStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Limit</type>
        <name>limit</name>
      </param>
      <param>
        <type>PreparedStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="interpretHbm2ddlSetting">
    <id>org.hibernate.tool.schema.Action.interpretHbm2ddlSetting( Object )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addSubGraph">
    <id>org.hibernate.graph.Graph.addSubGraph( PersistentAttribute Class )</id>
    <exceptions>
      <e>CannotContainSubGraphException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistentAttribute</type>
        <name>attribute</name>
      </param>
      <param>
        <type>Class</type>
        <name>type</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="uniqueResult">
    <id>org.hibernate.query.Query.uniqueResult( )</id>
    <exceptions>
      <e>NonUniqueResultException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.SerializableToBlobType.nullSafeSet( PreparedStatement T int WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>T</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getSequencePreviousValString">
    <id>org.hibernate.dialect.sequence.SQLServerSequenceSupport.getSequencePreviousValString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getProxy">
    <id>org.hibernate.proxy.pojo.bytebuddy.ByteBuddyProxyFactory.getProxy( Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addCacheableFile">
    <id>org.hibernate.cfg.Configuration.addCacheableFile( File )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>xmlFile</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nullSafeGet">
    <id>org.hibernate.usertype.UserType.nullSafeGet( ResultSet int SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>ResultSet</type>
        <name>rs</name>
      </param>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="dehydrateId">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.dehydrateId( Object Object PreparedStatement SharedSessionContractImplementor int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>Object</type>
        <name>rowId</name>
      </param>
      <param>
        <type>PreparedStatement</type>
        <name>ps</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="extractJdbcValues">
    <id>org.hibernate.type.descriptor.jdbc.XmlJdbcType.extractJdbcValues( Object WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>rawJdbcValue</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="validate">
    <id>org.hibernate.mapping.IdentifierCollection.validate( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.type.AbstractType.disassemble( Object SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.domain.AbstractSqmSpecificPluralPartPath.treatAs( EntityDomainType )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>EntityDomainType</type>
        <name>treatTarget</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getQueryParameter">
    <id>org.hibernate.query.ParameterMetadata.getQueryParameter( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>positionLabel</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="fromString">
    <id>org.hibernate.type.descriptor.jdbc.JsonJdbcType.fromString( String JavaType WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>string</name>
      </param>
      <param>
        <type>JavaType</type>
        <name>javaType</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="addResource">
    <id>org.hibernate.cfg.Configuration.addResource( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>resourceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="load">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.load( Object Object LockOptions SharedSessionContractImplementor Boolean )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>Object</type>
        <name>optionalObject</name>
      </param>
      <param>
        <type>LockOptions</type>
        <name>lockOptions</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Boolean</type>
        <name>readOnly</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="insertRows">
    <id>org.hibernate.persister.collection.OneToManyPersister.insertRows( PersistentCollection Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistentCollection</type>
        <name>collection</name>
      </param>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getEntity">
    <id>org.hibernate.Interceptor.getEntity( String Object )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>entityName</name>
      </param>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setSession">
    <id>org.hibernate.proxy.AbstractLazyInitializer.setSession( SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>s</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="validate">
    <id>org.hibernate.mapping.IndexedCollection.validate( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addFile">
    <id>org.hibernate.cfg.Configuration.addFile( File )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>xmlFile</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onSave">
    <id>org.hibernate.classic.Lifecycle.onSave( Session )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>Session</type>
        <name>s</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="extract">
    <id>org.hibernate.type.CustomType.extract( CallableStatement String SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>String</type>
        <name>paramName</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="SingleTableEntityPersister">
    <id>org.hibernate.persister.entity.SingleTableEntityPersister.SingleTableEntityPersister( PersistentClass EntityDataAccess NaturalIdDataAccess PersisterCreationContext )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistentClass</type>
        <name>persistentClass</name>
      </param>
      <param>
        <type>EntityDataAccess</type>
        <name>cacheAccessStrategy</name>
      </param>
      <param>
        <type>NaturalIdDataAccess</type>
        <name>naturalIdRegionAccessStrategy</name>
      </param>
      <param>
        <type>PersisterCreationContext</type>
        <name>creationContext</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="isDirty">
    <id>org.hibernate.persister.entity.DiscriminatorType.isDirty( Object Object boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>old</name>
      </param>
      <param>
        <type>Object</type>
        <name>current</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>checkable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getSqlTypeCodes">
    <id>org.hibernate.type.AbstractStandardBasicType.getSqlTypeCodes( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="checkPropertyColumnDuplication">
    <id>org.hibernate.mapping.MappingHelper.checkPropertyColumnDuplication( Set List String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Set</type>
        <name>distinctColumns</name>
      </param>
      <param>
        <type>List</type>
        <name>properties</name>
      </param>
      <param>
        <type>String</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="buildIdentifierHelper">
    <id>org.hibernate.dialect.MySQLDialect.buildIdentifierHelper( IdentifierHelperBuilder DatabaseMetaData )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>IdentifierHelperBuilder</type>
        <name>builder</name>
      </param>
      <param>
        <type>DatabaseMetaData</type>
        <name>dbMetaData</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getResourceRegistry">
    <id>org.hibernate.resource.jdbc.LogicalConnection.getResourceRegistry( )</id>
    <exceptions>
      <e>ResourceClosedException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getIdentifierOrUniqueKeyType">
    <id>org.hibernate.type.EntityType.getIdentifierOrUniqueKeyType( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>factory</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createEntityGraph">
    <id>org.hibernate.SharedSessionContract.createEntityGraph( Class String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>rootType</name>
      </param>
      <param>
        <type>String</type>
        <name>graphName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="extractJdbcValues">
    <id>org.hibernate.dialect.DB2StructJdbcType.extractJdbcValues( Object WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>rawJdbcValue</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="byNaturalId">
    <id>org.hibernate.Session.byNaturalId( Class )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>entityClass</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="configure">
    <id>org.hibernate.cfg.Configuration.configure( File )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>configFile</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="forceVersionIncrement">
    <id>org.hibernate.persister.entity.EntityPersister.forceVersionIncrement( Object Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>Object</type>
        <name>currentVersion</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="executeReturningWork">
    <id>org.hibernate.jdbc.WorkExecutor.executeReturningWork( ReturningWork Connection )</id>
    <exceptions>
      <e>SQLException</e>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>ReturningWork</type>
        <name>work</name>
      </param>
      <param>
        <type>Connection</type>
        <name>connection</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.domain.SqmIndexedCollectionAccessPath.treatAs( EntityDomainType )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>EntityDomainType</type>
        <name>treatTarget</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isModified">
    <id>org.hibernate.type.ManyToOneType.isModified( Object Object boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>old</name>
      </param>
      <param>
        <type>Object</type>
        <name>current</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>checkable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="registerResultSetOutParameter">
    <id>org.hibernate.dialect.H2Dialect.registerResultSetOutParameter( CallableStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="toType">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.toType( String )</id>
    <exceptions>
      <e>QueryException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="fromXMLString">
    <id>org.hibernate.type.MetaType.fromXMLString( String Mapping )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>xml</name>
      </param>
      <param>
        <type>Mapping</type>
        <name>factory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="insertRows">
    <id>org.hibernate.persister.collection.BasicCollectionPersister.insertRows( PersistentCollection Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistentCollection</type>
        <name>collection</name>
      </param>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="AbstractEntityPersister">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.AbstractEntityPersister( PersistentClass EntityDataAccess NaturalIdDataAccess PersisterCreationContext )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistentClass</type>
        <name>persistentClass</name>
      </param>
      <param>
        <type>EntityDataAccess</type>
        <name>cacheAccessStrategy</name>
      </param>
      <param>
        <type>NaturalIdDataAccess</type>
        <name>naturalIdRegionAccessStrategy</name>
      </param>
      <param>
        <type>PersisterCreationContext</type>
        <name>creationContext</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="uniqueResult">
    <id>org.hibernate.query.SelectionQuery.uniqueResult( )</id>
    <exceptions>
      <e>NonUniqueResultException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="interpretExternalSetting">
    <id>org.hibernate.CacheMode.interpretExternalSetting( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>setting</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPropertyAccessStrategy">
    <id>org.hibernate.mapping.Property.getPropertyAccessStrategy( Class )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>clazz</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="bind">
    <id>org.hibernate.type.descriptor.ValueBinder.bind( CallableStatement X String WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>X</type>
        <name>value</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="checkPropertyDuplication">
    <id>org.hibernate.mapping.PersistentClass.checkPropertyDuplication( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="unproxy">
    <id>org.hibernate.Hibernate.unproxy( T Class )</id>
    <exceptions>
      <e>LazyInitializationException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>proxy</name>
      </param>
      <param>
        <type>Class</type>
        <name>entityClass</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="consumeExponential">
    <id>org.hibernate.dialect.JsonHelper.consumeExponential( String int int Object[] EmbeddableMappingType int boolean WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>string</name>
      </param>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>eIndex</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>values</name>
      </param>
      <param>
        <type>EmbeddableMappingType</type>
        <name>embeddableMappingType</name>
      </param>
      <param>
        <type>int</type>
        <name>selectableIndex</name>
      </param>
      <param>
        <type>boolean</type>
        <name>returnEmbeddable</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>8</arity>
  </method>
  <method name="CustomType">
    <id>org.hibernate.type.CustomType.CustomType( UserType String[] TypeConfiguration )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>UserType</type>
        <name>userType</name>
      </param>
      <param>
        <type>String[]</type>
        <name>registrationKeys</name>
      </param>
      <param>
        <type>TypeConfiguration</type>
        <name>typeConfiguration</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getAttributeValues">
    <id>org.hibernate.dialect.AbstractPostgreSQLStructJdbcType.getAttributeValues( EmbeddableMappingType int[] Object[] WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>EmbeddableMappingType</type>
        <name>embeddableMappingType</name>
      </param>
      <param>
        <type>int[]</type>
        <name>orderMapping</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>rawJdbcValues</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getResultSet">
    <id>org.hibernate.dialect.Dialect.getResultSet( CallableStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="executeQuery">
    <id>org.hibernate.id.enhanced.TableGenerator.executeQuery( PreparedStatement SessionEventListenerManager String SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>ps</name>
      </param>
      <param>
        <type>SessionEventListenerManager</type>
        <name>listener</name>
      </param>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="createJdbcValue">
    <id>org.hibernate.type.descriptor.jdbc.JsonJdbcType.createJdbcValue( Object WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>domainValue</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.from.SqmEntityJoin.treatAs( EntityDomainType )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>EntityDomainType</type>
        <name>treatTarget</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toLoggableString">
    <id>org.hibernate.persister.entity.DiscriminatorType.toLoggableString( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="extract">
    <id>org.hibernate.type.descriptor.ValueExtractor.extract( CallableStatement String WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>String</type>
        <name>paramName</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="initialize">
    <id>org.hibernate.Hibernate.initialize( Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>proxy</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="assemble">
    <id>org.hibernate.type.OneToOneType.assemble( Serializable SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Serializable</type>
        <name>oid</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="fromStringValue">
    <id>org.hibernate.usertype.EnhancedUserType.fromStringValue( CharSequence )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>CharSequence</type>
        <name>sequence</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="lock">
    <id>org.hibernate.dialect.lock.SelectLockingStrategy.lock( Object Object Object int EventSource )</id>
    <exceptions>
      <e>JDBCException</e>
      <e>StaleObjectStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>Object</type>
        <name>version</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>int</type>
        <name>timeout</name>
      </param>
      <param>
        <type>EventSource</type>
        <name>session</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="bindLimitParametersAtEndOfQuery">
    <id>org.hibernate.dialect.pagination.LimitHandler.bindLimitParametersAtEndOfQuery( Limit PreparedStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Limit</type>
        <name>limit</name>
      </param>
      <param>
        <type>PreparedStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="extract">
    <id>org.hibernate.persister.entity.DiscriminatorType.extract( CallableStatement int SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>paramIndex</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isDirty">
    <id>org.hibernate.type.ManyToOneType.isDirty( Object Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>old</name>
      </param>
      <param>
        <type>Object</type>
        <name>current</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getType">
    <id>org.hibernate.mapping.Any.getType( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="configure">
    <id>org.hibernate.cfg.Configuration.configure( URL )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>URL</type>
        <name>url</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isSame">
    <id>org.hibernate.type.Type.isSame( Object Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>x</name>
      </param>
      <param>
        <type>Object</type>
        <name>y</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getQueryParameter">
    <id>org.hibernate.query.ParameterMetadata.getQueryParameter( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="buildIdentifierHelper">
    <id>org.hibernate.dialect.Dialect.buildIdentifierHelper( IdentifierHelperBuilder DatabaseMetaData )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>IdentifierHelperBuilder</type>
        <name>builder</name>
      </param>
      <param>
        <type>DatabaseMetaData</type>
        <name>dbMetaData</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="requireService">
    <id>org.hibernate.service.ServiceRegistry.requireService( Class )</id>
    <exceptions>
      <e>NullServiceException</e>
      <e>UnknownServiceException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>serviceRole</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.type.ComponentType.disassemble( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>sessionFactory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="configure">
    <id>org.hibernate.id.IncrementGenerator.configure( Type Properties ServiceRegistry )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Type</type>
        <name>type</name>
      </param>
      <param>
        <type>Properties</type>
        <name>parameters</name>
      </param>
      <param>
        <type>ServiceRegistry</type>
        <name>serviceRegistry</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.type.AnyType.disassemble( Object SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.Type.nullSafeSet( PreparedStatement Object int SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="addKeySubGraph">
    <id>org.hibernate.graph.Graph.addKeySubGraph( String Class )</id>
    <exceptions>
      <e>CannotContainSubGraphException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>attributeName</name>
      </param>
      <param>
        <type>Class</type>
        <name>type</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.metamodel.model.domain.DiscriminatorSqmPath.treatAs( EntityDomainType )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>EntityDomainType</type>
        <name>treatTarget</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createForeignKeys">
    <id>org.hibernate.mapping.Collection.createForeignKeys( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="postInstantiate">
    <id>org.hibernate.persister.collection.AbstractCollectionPersister.postInstantiate( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="doExtract">
    <id>org.hibernate.type.descriptor.jdbc.BasicExtractor.doExtract( CallableStatement String WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isValid">
    <id>org.hibernate.mapping.Component.isValid( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getColumnSpan">
    <id>org.hibernate.type.CollectionType.getColumnSpan( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>session</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addSubclass">
    <id>org.hibernate.mapping.RootClass.addSubclass( Subclass )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Subclass</type>
        <name>subclass</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="equals">
    <id>org.hibernate.usertype.StaticUserTypeSupport.equals( T T )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>x</name>
      </param>
      <param>
        <type>T</type>
        <name>y</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="fromString">
    <id>org.hibernate.dialect.XmlHelper.fromString( EmbeddableMappingType String boolean WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>EmbeddableMappingType</type>
        <name>embeddableMappingType</name>
      </param>
      <param>
        <type>String</type>
        <name>string</name>
      </param>
      <param>
        <type>boolean</type>
        <name>returnEmbeddable</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getPropertyAccessStrategy">
    <id>org.hibernate.mapping.IndexBackref.getPropertyAccessStrategy( Class )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>clazz</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.from.SqmCrossJoin.treatAs( Class )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>treatJavaType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toType">
    <id>org.hibernate.persister.entity.AbstractPropertyMapping.toType( String )</id>
    <exceptions>
      <e>QueryException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toLoggableString">
    <id>org.hibernate.type.ComponentType.toLoggableString( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="bindValues">
    <id>org.hibernate.id.insert.Binder.bindValues( PreparedStatement )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>ps</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onLoad">
    <id>org.hibernate.Interceptor.onLoad( Object Serializable Object[] String[] Type[] )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>entity</name>
      </param>
      <param>
        <type>Serializable</type>
        <name>id</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>state</name>
      </param>
      <param>
        <type>String[]</type>
        <name>propertyNames</name>
      </param>
      <param>
        <type>Type[]</type>
        <name>types</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.CollectionType.nullSafeSet( PreparedStatement Object int boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>settable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="onCollectionRemove">
    <id>org.hibernate.Interceptor.onCollectionRemove( Object Serializable )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>collection</name>
      </param>
      <param>
        <type>Serializable</type>
        <name>key</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="assemble">
    <id>org.hibernate.type.ComponentType.assemble( Serializable SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Serializable</type>
        <name>object</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="registerResultSetOutParameter">
    <id>org.hibernate.dialect.AbstractHANADialect.registerResultSetOutParameter( CallableStatement String )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="extractJdbcValues">
    <id>org.hibernate.dialect.AbstractPostgreSQLStructJdbcType.extractJdbcValues( Object WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>rawJdbcValue</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getSqlTypeCodes">
    <id>org.hibernate.type.ManyToOneType.getSqlTypeCodes( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="extract">
    <id>org.hibernate.type.AbstractStandardBasicType.extract( CallableStatement String SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>String</type>
        <name>paramName</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getCreateSequenceStrings">
    <id>org.hibernate.dialect.sequence.SequenceSupport.getCreateSequenceStrings( String int int )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
      <param>
        <type>int</type>
        <name>initialValue</name>
      </param>
      <param>
        <type>int</type>
        <name>incrementSize</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createSelectionQuery">
    <id>org.hibernate.query.QueryProducer.createSelectionQuery( String Class )</id>
    <exceptions>
      <e>IllegalSelectQueryException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>hqlString</name>
      </param>
      <param>
        <type>Class</type>
        <name>resultType</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isEqual">
    <id>org.hibernate.type.ComponentType.isEqual( Object Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>x</name>
      </param>
      <param>
        <type>Object</type>
        <name>y</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="registerResultSetOutParameter">
    <id>org.hibernate.dialect.PostgresPlusDialect.registerResultSetOutParameter( CallableStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>col</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isDirty">
    <id>org.hibernate.type.MetaType.isDirty( Object Object boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>old</name>
      </param>
      <param>
        <type>Object</type>
        <name>current</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>checkable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getSequenceNextValString">
    <id>org.hibernate.dialect.sequence.SequenceSupport.getSequenceNextValString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="BasicCollectionPersister">
    <id>org.hibernate.persister.collection.BasicCollectionPersister.BasicCollectionPersister( Collection CollectionDataAccess PersisterCreationContext )</id>
    <exceptions>
      <e>CacheException</e>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Collection</type>
        <name>collectionBinding</name>
      </param>
      <param>
        <type>CollectionDataAccess</type>
        <name>cacheAccessStrategy</name>
      </param>
      <param>
        <type>PersisterCreationContext</type>
        <name>creationContext</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.from.SqmCrossJoin.treatAs( EntityDomainType )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>EntityDomainType</type>
        <name>treatTarget</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="disableFetchProfile">
    <id>org.hibernate.query.SelectionQuery.disableFetchProfile( String )</id>
    <exceptions>
      <e>UnknownProfileException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>profileName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.type.EnumType.disassemble( T )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="supportsNamedParameters">
    <id>org.hibernate.dialect.Dialect.supportsNamedParameters( DatabaseMetaData )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>DatabaseMetaData</type>
        <name>databaseMetaData</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="invoke">
    <id>org.hibernate.engine.jdbc.SerializableClobProxy.invoke( Object Method Object[] )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>proxy</name>
      </param>
      <param>
        <type>Method</type>
        <name>method</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>args</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="onSave">
    <id>org.hibernate.Interceptor.onSave( Object Serializable Object[] String[] Type[] )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>entity</name>
      </param>
      <param>
        <type>Serializable</type>
        <name>id</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>state</name>
      </param>
      <param>
        <type>String[]</type>
        <name>propertyNames</name>
      </param>
      <param>
        <type>Type[]</type>
        <name>types</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="isDirty">
    <id>org.hibernate.type.CollectionType.isDirty( Object Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>old</name>
      </param>
      <param>
        <type>Object</type>
        <name>current</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="initialize">
    <id>org.hibernate.id.IntegralDataTypeHolder.initialize( ResultSet long )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>ResultSet</type>
        <name>resultSet</name>
      </param>
      <param>
        <type>long</type>
        <name>defaultValue</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="initIdentifierPropertyPaths">
    <id>org.hibernate.persister.entity.AbstractPropertyMapping.initIdentifierPropertyPaths( String EntityType String[] String[] String[] String[] Metadata )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
      <param>
        <type>EntityType</type>
        <name>etype</name>
      </param>
      <param>
        <type>String[]</type>
        <name>columns</name>
      </param>
      <param>
        <type>String[]</type>
        <name>columnReaders</name>
      </param>
      <param>
        <type>String[]</type>
        <name>columnReaderTemplates</name>
      </param>
      <param>
        <type>String[]</type>
        <name>formulaTemplates</name>
      </param>
      <param>
        <type>Metadata</type>
        <name>factory</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="getColumnSpan">
    <id>org.hibernate.type.Type.getColumnSpan( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAttributeValues">
    <id>org.hibernate.dialect.StructJdbcType.getAttributeValues( EmbeddableMappingType int[] Object[] WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>EmbeddableMappingType</type>
        <name>embeddableMappingType</name>
      </param>
      <param>
        <type>int[]</type>
        <name>orderMapping</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>rawJdbcValues</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getIdentitySelectString">
    <id>org.hibernate.dialect.identity.IdentityColumnSupport.getIdentitySelectString( String String int )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>table</name>
      </param>
      <param>
        <type>String</type>
        <name>column</name>
      </param>
      <param>
        <type>int</type>
        <name>type</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getAsciiStream">
    <id>org.hibernate.engine.jdbc.ClobProxy.getAsciiStream( )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.CustomType.nullSafeSet( CallableStatement J String SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>J</type>
        <name>value</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="onLoad">
    <id>org.hibernate.Interceptor.onLoad( Object Object Object[] String[] Type[] )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>entity</name>
      </param>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>state</name>
      </param>
      <param>
        <type>String[]</type>
        <name>propertyNames</name>
      </param>
      <param>
        <type>Type[]</type>
        <name>types</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.domain.SqmAnyValuedSimplePath.treatAs( Class )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>treatJavaType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="replace">
    <id>org.hibernate.type.Type.replace( Object Object SharedSessionContractImplementor Object Map )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>original</name>
      </param>
      <param>
        <type>Object</type>
        <name>target</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
      <param>
        <type>Map</type>
        <name>copyCache</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.domain.SqmPluralValuedSimplePath.treatAs( EntityDomainType )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>EntityDomainType</type>
        <name>treatTarget</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getParameterRegistration">
    <id>org.hibernate.procedure.ProcedureCall.getParameterRegistration( int )</id>
    <exceptions>
      <e>NoSuchParameterException</e>
      <e>ParameterStrategyException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.SerializableToBlobType.nullSafeSet( PreparedStatement Object int boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>settable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getCreateSequenceString">
    <id>org.hibernate.dialect.sequence.TiDBSequenceSupport.getCreateSequenceString( String int int )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
      <param>
        <type>int</type>
        <name>initialValue</name>
      </param>
      <param>
        <type>int</type>
        <name>incrementSize</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getCurrentVersion">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.getCurrentVersion( Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="doReturningWork">
    <id>org.hibernate.SharedSessionContract.doReturningWork( ReturningWork )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>ReturningWork</type>
        <name>work</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseInto">
    <id>org.hibernate.graph.GraphParser.parseInto( Subgraph CharSequence EntityManagerFactory )</id>
    <exceptions>
      <e>InvalidGraphException</e>
    </exceptions>
    <params>
      <param>
        <type>Subgraph</type>
        <name>graph</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>graphText</name>
      </param>
      <param>
        <type>EntityManagerFactory</type>
        <name>entityManagerFactory</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="assemble">
    <id>org.hibernate.usertype.StaticUserTypeSupport.assemble( Serializable Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Serializable</type>
        <name>cached</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getSingleResult">
    <id>org.hibernate.query.Query.getSingleResult( )</id>
    <exceptions>
      <e>NonUniqueResultException</e>
      <e>NoResultException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createAllKeys">
    <id>org.hibernate.mapping.Collection.createAllKeys( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="injectAttributeValue">
    <id>org.hibernate.dialect.StructHelper.injectAttributeValue( AttributeMapping Object[] int Object[] int WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributeMapping</type>
        <name>attributeMapping</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>attributeValues</name>
      </param>
      <param>
        <type>int</type>
        <name>attributeIndex</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>rawJdbcValues</name>
      </param>
      <param>
        <type>int</type>
        <name>jdbcIndex</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="getUnderlyingStream">
    <id>org.hibernate.engine.jdbc.BlobImplementer.getUnderlyingStream( )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getSelectSequencePreviousValString">
    <id>org.hibernate.dialect.sequence.H2V1SequenceSupport.getSelectSequencePreviousValString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getResultSet">
    <id>org.hibernate.dialect.DialectDelegateWrapper.getResultSet( CallableStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getSqlTypeCodes">
    <id>org.hibernate.type.ComponentType.getSqlTypeCodes( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="buildIdentifierHelper">
    <id>org.hibernate.dialect.DerbyDialect.buildIdentifierHelper( IdentifierHelperBuilder DatabaseMetaData )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>IdentifierHelperBuilder</type>
        <name>builder</name>
      </param>
      <param>
        <type>DatabaseMetaData</type>
        <name>dbMetaData</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getResultSet">
    <id>org.hibernate.dialect.OracleDialect.getResultSet( CallableStatement )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>ps</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.domain.SqmBasicValuedSimplePath.treatAs( EntityDomainType )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>EntityDomainType</type>
        <name>treatTarget</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addSubGraph">
    <id>org.hibernate.graph.Graph.addSubGraph( String Class )</id>
    <exceptions>
      <e>CannotContainSubGraphException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>attributeName</name>
      </param>
      <param>
        <type>Class</type>
        <name>type</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="configure">
    <id>org.hibernate.id.Assigned.configure( Type Properties ServiceRegistry )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Type</type>
        <name>type</name>
      </param>
      <param>
        <type>Properties</type>
        <name>parameters</name>
      </param>
      <param>
        <type>ServiceRegistry</type>
        <name>serviceRegistry</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createMarshaller">
    <id>org.hibernate.type.format.jaxb.JaxbXmlFormatMapper.createMarshaller( JAXBContext )</id>
    <exceptions>
      <e>JAXBException</e>
    </exceptions>
    <params>
      <param>
        <type>JAXBContext</type>
        <name>context</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="generate">
    <id>org.hibernate.id.IncrementGenerator.generate( SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="flush">
    <id>org.hibernate.Session.flush( )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getSqlTypeCodes">
    <id>org.hibernate.type.SpecialOneToOneType.getSqlTypeCodes( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onSave">
    <id>org.hibernate.Interceptor.onSave( Object Object Object[] String[] Type[] )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>entity</name>
      </param>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>state</name>
      </param>
      <param>
        <type>String[]</type>
        <name>propertyNames</name>
      </param>
      <param>
        <type>Type[]</type>
        <name>types</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getProperty">
    <id>org.hibernate.mapping.Component.getProperty( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAssociatedJoinable">
    <id>org.hibernate.type.EntityType.getAssociatedJoinable( SessionFactoryImplementor )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="scheduleBatchLoadIfNeeded">
    <id>org.hibernate.type.ManyToOneType.scheduleBatchLoadIfNeeded( Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getResultSet">
    <id>org.hibernate.dialect.PostgreSQLDialect.getResultSet( CallableStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getColumnSpan">
    <id>org.hibernate.type.ManyToOneType.getColumnSpan( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="deepCopy">
    <id>org.hibernate.type.CustomType.deepCopy( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="resolve">
    <id>org.hibernate.type.ComponentType.resolve( Object[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object[]</type>
        <name>value</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="toColumns">
    <id>org.hibernate.persister.entity.AbstractPropertyMapping.toColumns( String )</id>
    <exceptions>
      <e>QueryException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getSingleResult">
    <id>org.hibernate.query.SelectionQuery.getSingleResult( )</id>
    <exceptions>
      <e>NonUniqueResultException</e>
      <e>NoResultException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="buildIdentifierHelper">
    <id>org.hibernate.dialect.HSQLDialect.buildIdentifierHelper( IdentifierHelperBuilder DatabaseMetaData )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>IdentifierHelperBuilder</type>
        <name>builder</name>
      </param>
      <param>
        <type>DatabaseMetaData</type>
        <name>dbMetaData</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="configure">
    <id>org.hibernate.id.Configurable.configure( Type Properties ServiceRegistry )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Type</type>
        <name>type</name>
      </param>
      <param>
        <type>Properties</type>
        <name>params</name>
      </param>
      <param>
        <type>ServiceRegistry</type>
        <name>serviceRegistry</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createNamedMutationQuery">
    <id>org.hibernate.query.QueryProducer.createNamedMutationQuery( String )</id>
    <exceptions>
      <e>IllegalMutationQueryException</e>
      <e>UnknownNamedQueryException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getIdentifier">
    <id>org.hibernate.type.AnyType.getIdentifier( Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="UnionSubclassEntityPersister">
    <id>org.hibernate.persister.entity.UnionSubclassEntityPersister.UnionSubclassEntityPersister( PersistentClass EntityDataAccess NaturalIdDataAccess PersisterCreationContext )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistentClass</type>
        <name>persistentClass</name>
      </param>
      <param>
        <type>EntityDataAccess</type>
        <name>cacheAccessStrategy</name>
      </param>
      <param>
        <type>NaturalIdDataAccess</type>
        <name>naturalIdRegionAccessStrategy</name>
      </param>
      <param>
        <type>PersisterCreationContext</type>
        <name>creationContext</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="doBind">
    <id>org.hibernate.type.descriptor.jdbc.BasicBinder.doBind( PreparedStatement J int WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>J</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="executeQuery">
    <id>org.hibernate.id.enhanced.TableStructure.executeQuery( PreparedStatement SessionEventListenerManager String SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>ps</name>
      </param>
      <param>
        <type>SessionEventListenerManager</type>
        <name>statsCollector</name>
      </param>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="configure">
    <id>org.hibernate.cfg.Configuration.configure( String )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>resource</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="configure">
    <id>org.hibernate.cfg.Configuration.configure( )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setSession">
    <id>org.hibernate.proxy.LazyInitializer.setSession( SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="buildIdentifierHelper">
    <id>org.hibernate.dialect.DB2Dialect.buildIdentifierHelper( IdentifierHelperBuilder DatabaseMetaData )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>IdentifierHelperBuilder</type>
        <name>builder</name>
      </param>
      <param>
        <type>DatabaseMetaData</type>
        <name>dbMetaData</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getIdentifier">
    <id>org.hibernate.metadata.ClassMetadata.getIdentifier( Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getProxy">
    <id>org.hibernate.proxy.ProxyFactory.getProxy( Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readObject">
    <id>org.hibernate.tuple.PojoInstantiator.readObject( ObjectInputStream )</id>
    <exceptions>
      <e>IOException</e>
      <e>ClassNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ObjectInputStream</type>
        <name>stream</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isDirty">
    <id>org.hibernate.type.ComponentType.isDirty( Object Object boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>x</name>
      </param>
      <param>
        <type>Object</type>
        <name>y</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>checkable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getOptimizerClass">
    <id>org.hibernate.id.enhanced.CustomOptimizerDescriptor.getOptimizerClass( )</id>
    <exceptions>
      <e>ClassNotFoundException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="initialize">
    <id>org.hibernate.persister.collection.AbstractCollectionPersister.initialize( Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>key</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setLockMode">
    <id>org.hibernate.query.NativeQuery.setLockMode( LockModeType )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>LockModeType</type>
        <name>lockMode</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.domain.SqmEmbeddedValuedSimplePath.treatAs( EntityDomainType )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>EntityDomainType</type>
        <name>treatTarget</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="bind">
    <id>org.hibernate.type.descriptor.jdbc.BasicBinder.bind( CallableStatement J String WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>J</type>
        <name>value</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="Component">
    <id>org.hibernate.mapping.Component.Component( MetadataBuildingContext Component )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>MetadataBuildingContext</type>
        <name>metadata</name>
      </param>
      <param>
        <type>Component</type>
        <name>component</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="registerSynchronization">
    <id>org.hibernate.Transaction.registerSynchronization( Synchronization )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Synchronization</type>
        <name>synchronization</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="length">
    <id>org.hibernate.engine.jdbc.BlobProxy.length( )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="doExtract">
    <id>org.hibernate.type.descriptor.jdbc.BasicExtractor.doExtract( ResultSet int WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>ResultSet</type>
        <name>rs</name>
      </param>
      <param>
        <type>int</type>
        <name>paramIndex</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getSequencePreviousValString">
    <id>org.hibernate.dialect.sequence.LegacyDB2SequenceSupport.getSequencePreviousValString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createJdbcValue">
    <id>org.hibernate.type.descriptor.jdbc.OracleJsonBlobJdbcType.createJdbcValue( Object WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>domainValue</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.ProcedureParameterNamedBinder.nullSafeSet( CallableStatement J String SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>J</type>
        <name>value</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="doBindNull">
    <id>org.hibernate.type.descriptor.jdbc.BasicBinder.doBindNull( CallableStatement String WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="extract">
    <id>org.hibernate.query.OutputableType.extract( CallableStatement String SharedSessionContractImplementor )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>String</type>
        <name>paramName</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="extract">
    <id>org.hibernate.query.OutputableType.extract( CallableStatement int SharedSessionContractImplementor )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>paramIndex</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="interpretJpaSetting">
    <id>org.hibernate.tool.schema.Action.interpretJpaSetting( Object )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="extract">
    <id>org.hibernate.type.descriptor.ValueExtractor.extract( ResultSet int WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>ResultSet</type>
        <name>rs</name>
      </param>
      <param>
        <type>int</type>
        <name>paramIndex</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="byNaturalId">
    <id>org.hibernate.Session.byNaturalId( String )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>entityName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="findModified">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.findModified( Object[] Object[] Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object[]</type>
        <name>old</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>current</name>
      </param>
      <param>
        <type>Object</type>
        <name>entity</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.type.Type.disassemble( Object SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="locateEntityDescriptor">
    <id>org.hibernate.metamodel.MappingMetamodel.locateEntityDescriptor( Class )</id>
    <exceptions>
      <e>UnknownEntityTypeException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>byClass</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPropertyAccessStrategy">
    <id>org.hibernate.mapping.Backref.getPropertyAccessStrategy( Class )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>clazz</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getSqlTypeCodes">
    <id>org.hibernate.type.SerializableToBlobType.getSqlTypeCodes( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="registerResultSetOutParameter">
    <id>org.hibernate.dialect.PostgreSQLDialect.registerResultSetOutParameter( CallableStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>col</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getIdentityColumnString">
    <id>org.hibernate.dialect.identity.IdentityColumnSupport.getIdentityColumnString( int )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setTypeUsingReflection">
    <id>org.hibernate.mapping.Value.setTypeUsingReflection( String String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>className</name>
      </param>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="assemble">
    <id>org.hibernate.type.ManyToOneType.assemble( Serializable SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Serializable</type>
        <name>oid</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getSqlTypeCodes">
    <id>org.hibernate.type.Type.getSqlTypeCodes( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addCacheableFileStrictly">
    <id>org.hibernate.cfg.Configuration.addCacheableFileStrictly( File )</id>
    <exceptions>
      <e>SerializationException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>xmlFile</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isDirty">
    <id>org.hibernate.type.Type.isDirty( Object Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>old</name>
      </param>
      <param>
        <type>Object</type>
        <name>current</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getEmbeddableValuedModelPart">
    <id>org.hibernate.metamodel.MappingMetamodel.getEmbeddableValuedModelPart( NavigableRole )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>NavigableRole</type>
        <name>role</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="validate">
    <id>org.hibernate.mapping.SingleTableSubclass.validate( Metadata )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Metadata</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createNamedQuery">
    <id>org.hibernate.query.QueryProducer.createNamedQuery( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="checkColumnDuplication">
    <id>org.hibernate.mapping.Collection.checkColumnDuplication( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="registerOutParameter">
    <id>org.hibernate.dialect.StructJdbcType.registerOutParameter( CallableStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>callableStatement</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isDirty">
    <id>org.hibernate.type.Type.isDirty( Object Object boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>oldState</name>
      </param>
      <param>
        <type>Object</type>
        <name>currentState</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>checkable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="byId">
    <id>org.hibernate.Session.byId( String )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>entityName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addCacheableFileStrictly">
    <id>org.hibernate.boot.MetadataSources.addCacheableFileStrictly( File )</id>
    <exceptions>
      <e>MappingNotFoundException</e>
      <e>SerializationException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>file</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.type.OneToOneType.disassemble( Object SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="doBind">
    <id>org.hibernate.type.descriptor.jdbc.BasicBinder.doBind( CallableStatement J String WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>J</type>
        <name>value</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.ComponentType.nullSafeSet( PreparedStatement Object int SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>begin</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.AbstractStandardBasicType.nullSafeSet( PreparedStatement Object int boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>settable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="fromString">
    <id>org.hibernate.dialect.AbstractPostgreSQLStructJdbcType.fromString( String JavaType WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>string</name>
      </param>
      <param>
        <type>JavaType</type>
        <name>javaType</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="toType">
    <id>org.hibernate.persister.collection.ElementPropertyMapping.toType( String )</id>
    <exceptions>
      <e>QueryException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getSelectSequencePreviousValString">
    <id>org.hibernate.dialect.sequence.DB2iSequenceSupport.getSelectSequencePreviousValString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="onCollectionUpdate">
    <id>org.hibernate.Interceptor.onCollectionUpdate( Object Object )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>collection</name>
      </param>
      <param>
        <type>Object</type>
        <name>key</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isTransient">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.isTransient( Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>entity</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addSynchronizedEntityClass">
    <id>org.hibernate.procedure.ProcedureCall.addSynchronizedEntityClass( Class )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>entityClass</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toLoggableString">
    <id>org.hibernate.type.AnyType.toLoggableString( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="preFlush">
    <id>org.hibernate.Interceptor.preFlush( Iterator )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>Iterator</type>
        <name>entities</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getSelectSequencePreviousValString">
    <id>org.hibernate.dialect.sequence.LegacyDB2SequenceSupport.getSelectSequencePreviousValString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="execute">
    <id>org.hibernate.jdbc.ReturningWork.execute( Connection )</id>
    <exceptions>
      <e>SQLException</e>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Connection</type>
        <name>connection</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getType">
    <id>org.hibernate.mapping.DependantValue.getType( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="OneToManyPersister">
    <id>org.hibernate.persister.collection.OneToManyPersister.OneToManyPersister( Collection CollectionDataAccess PersisterCreationContext )</id>
    <exceptions>
      <e>CacheException</e>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Collection</type>
        <name>collectionBinding</name>
      </param>
      <param>
        <type>CollectionDataAccess</type>
        <name>cacheAccessStrategy</name>
      </param>
      <param>
        <type>PersisterCreationContext</type>
        <name>creationContext</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getType">
    <id>org.hibernate.mapping.Collection.getType( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.AbstractStandardBasicType.nullSafeSet( PreparedStatement T int WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>T</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="createNamedQuery">
    <id>org.hibernate.query.QueryProducer.createNamedQuery( String Class )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>Class</type>
        <name>resultClass</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="determineLengthForBufferSizing">
    <id>org.hibernate.type.descriptor.java.LobStreamDataHelper.determineLengthForBufferSizing( Clob )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Clob</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isModified">
    <id>org.hibernate.type.ComponentType.isModified( Object Object boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>old</name>
      </param>
      <param>
        <type>Object</type>
        <name>current</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>checkable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="registerResultSetOutParameter">
    <id>org.hibernate.dialect.DialectDelegateWrapper.registerResultSetOutParameter( CallableStatement String )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="upsert">
    <id>org.hibernate.StatelessSession.upsert( Object )</id>
    <exceptions>
      <e>TransientObjectException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>entity</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="configure">
    <id>org.hibernate.id.UUIDHexGenerator.configure( Type Properties ServiceRegistry )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Type</type>
        <name>type</name>
      </param>
      <param>
        <type>Properties</type>
        <name>parameters</name>
      </param>
      <param>
        <type>ServiceRegistry</type>
        <name>serviceRegistry</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getElementClass">
    <id>org.hibernate.mapping.Array.getElementClass( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.type.AbstractStandardBasicType.disassemble( Object SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parseInto">
    <id>org.hibernate.graph.GraphParser.parseInto( GraphImplementor CharSequence SessionFactoryImplementor )</id>
    <exceptions>
      <e>InvalidGraphException</e>
    </exceptions>
    <params>
      <param>
        <type>GraphImplementor</type>
        <name>graph</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>graphText</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>sessionFactory</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="validate">
    <id>org.hibernate.Filter.validate( )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getSqlTypeCodes">
    <id>org.hibernate.persister.entity.DiscriminatorType.getSqlTypeCodes( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="OneToOne">
    <id>org.hibernate.mapping.OneToOne.OneToOne( MetadataBuildingContext Table PersistentClass )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>MetadataBuildingContext</type>
        <name>buildingContext</name>
      </param>
      <param>
        <type>Table</type>
        <name>table</name>
      </param>
      <param>
        <type>PersistentClass</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="assemble">
    <id>org.hibernate.type.EnumType.assemble( Serializable Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Serializable</type>
        <name>cached</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="initSubclassPropertyAliasesMap">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.initSubclassPropertyAliasesMap( PersistentClass )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistentClass</type>
        <name>model</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="JoinedSubclassEntityPersister">
    <id>org.hibernate.persister.entity.JoinedSubclassEntityPersister.JoinedSubclassEntityPersister( PersistentClass EntityDataAccess NaturalIdDataAccess PersisterCreationContext )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistentClass</type>
        <name>persistentClass</name>
      </param>
      <param>
        <type>EntityDataAccess</type>
        <name>cacheAccessStrategy</name>
      </param>
      <param>
        <type>NaturalIdDataAccess</type>
        <name>naturalIdRegionAccessStrategy</name>
      </param>
      <param>
        <type>PersisterCreationContext</type>
        <name>creationContext</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="fromString">
    <id>org.hibernate.dialect.XmlHelper.fromString( EmbeddableMappingType String boolean WrapperOptions Object[] int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>EmbeddableMappingType</type>
        <name>embeddableMappingType</name>
      </param>
      <param>
        <type>String</type>
        <name>string</name>
      </param>
      <param>
        <type>boolean</type>
        <name>returnEmbeddable</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>values</name>
      </param>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="bindParameters">
    <id>org.hibernate.id.insert.AbstractSelectingDelegate.bindParameters( Object PreparedStatement SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>entity</name>
      </param>
      <param>
        <type>PreparedStatement</type>
        <name>ps</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="byId">
    <id>org.hibernate.Session.byId( Class )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>entityClass</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getEntityName">
    <id>org.hibernate.Interceptor.getEntityName( Object )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="registerOutParameter">
    <id>org.hibernate.type.descriptor.jdbc.JdbcType.registerOutParameter( CallableStatement String )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>callableStatement</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="replace">
    <id>org.hibernate.type.EnumType.replace( T T Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>original</name>
      </param>
      <param>
        <type>T</type>
        <name>target</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="addSynchronizedEntityClass">
    <id>org.hibernate.query.SynchronizeableQuery.addSynchronizedEntityClass( Class )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>entityClass</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="generate">
    <id>org.hibernate.id.enhanced.SequenceStyleGenerator.generate( SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="loadByUniqueKey">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.loadByUniqueKey( String Object Boolean SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
      <param>
        <type>Object</type>
        <name>uniqueKey</name>
      </param>
      <param>
        <type>Boolean</type>
        <name>readOnly</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getResultSet">
    <id>org.hibernate.dialect.AbstractTransactSQLDialect.getResultSet( CallableStatement )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>ps</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getUnderlyingStream">
    <id>org.hibernate.engine.jdbc.BlobProxy.getUnderlyingStream( )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setTypeUsingReflection">
    <id>org.hibernate.mapping.BasicValue.setTypeUsingReflection( String String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>className</name>
      </param>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getSelectSequencePreviousValString">
    <id>org.hibernate.dialect.sequence.TiDBSequenceSupport.getSelectSequencePreviousValString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createNamedSelectionQuery">
    <id>org.hibernate.query.QueryProducer.createNamedSelectionQuery( String )</id>
    <exceptions>
      <e>IllegalSelectQueryException</e>
      <e>UnknownNamedQueryException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="registerResultSetOutParameter">
    <id>org.hibernate.dialect.MySQLDialect.registerResultSetOutParameter( CallableStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>col</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.domain.SqmDerivedRoot.treatAs( EntityDomainType )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>EntityDomainType</type>
        <name>treatTarget</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getOutputParameterValue">
    <id>org.hibernate.procedure.ProcedureOutputs.getOutputParameterValue( String )</id>
    <exceptions>
      <e>NoSuchParameterException</e>
      <e>ParameterStrategyException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isModified">
    <id>org.hibernate.type.AbstractType.isModified( Object Object boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>old</name>
      </param>
      <param>
        <type>Object</type>
        <name>current</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>checkable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="Component">
    <id>org.hibernate.mapping.Component.Component( MetadataBuildingContext PersistentClass )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>MetadataBuildingContext</type>
        <name>metadata</name>
      </param>
      <param>
        <type>PersistentClass</type>
        <name>owner</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getResultSet">
    <id>org.hibernate.dialect.DB2Dialect.getResultSet( CallableStatement )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>ps</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getService">
    <id>org.hibernate.service.ServiceRegistry.getService( Class )</id>
    <exceptions>
      <e>UnknownServiceException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>serviceRole</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getCreateSequenceString">
    <id>org.hibernate.dialect.sequence.SequenceSupport.getCreateSequenceString( String int int )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
      <param>
        <type>int</type>
        <name>initialValue</name>
      </param>
      <param>
        <type>int</type>
        <name>incrementSize</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="bindLimitParametersAtStartOfQuery">
    <id>org.hibernate.dialect.pagination.AbstractLimitHandler.bindLimitParametersAtStartOfQuery( Limit PreparedStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Limit</type>
        <name>limit</name>
      </param>
      <param>
        <type>PreparedStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="generate">
    <id>org.hibernate.id.CompositeNestedGeneratedValueGenerator.generate( SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="bindParameters">
    <id>org.hibernate.id.insert.UniqueKeySelectingDelegate.bindParameters( Object PreparedStatement SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>entity</name>
      </param>
      <param>
        <type>PreparedStatement</type>
        <name>ps</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.domain.SqmCteRoot.treatAs( Class )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>treatJavaType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getParameterRegistration">
    <id>org.hibernate.procedure.ProcedureCall.getParameterRegistration( String )</id>
    <exceptions>
      <e>NoSuchParameterException</e>
      <e>ParameterStrategyException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPropertyValues">
    <id>org.hibernate.metadata.ClassMetadata.setPropertyValues( Object Object[] )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>values</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.type.Type.disassemble( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>sessionFactory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getColumnSpan">
    <id>org.hibernate.type.SerializableToBlobType.getColumnSpan( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getNamedQuery">
    <id>org.hibernate.query.QueryProducer.getNamedQuery( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>queryName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getType">
    <id>org.hibernate.mapping.Value.getType( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="findDirty">
    <id>org.hibernate.Interceptor.findDirty( Object Serializable Object[] Object[] String[] Type[] )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>entity</name>
      </param>
      <param>
        <type>Serializable</type>
        <name>id</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>currentState</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>previousState</name>
      </param>
      <param>
        <type>String[]</type>
        <name>propertyNames</name>
      </param>
      <param>
        <type>Type[]</type>
        <name>types</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="addSubGraph">
    <id>org.hibernate.graph.Graph.addSubGraph( PersistentAttribute )</id>
    <exceptions>
      <e>CannotContainSubGraphException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistentAttribute</type>
        <name>attribute</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="replaceElements">
    <id>org.hibernate.type.ArrayType.replaceElements( Object Object Object Map SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>original</name>
      </param>
      <param>
        <type>Object</type>
        <name>target</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
      <param>
        <type>Map</type>
        <name>copyCache</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getCurrentSession">
    <id>org.hibernate.SessionFactory.getCurrentSession( )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="deserializeStruct">
    <id>org.hibernate.dialect.AbstractPostgreSQLStructJdbcType.deserializeStruct( String int int Object[] boolean WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>string</name>
      </param>
      <param>
        <type>int</type>
        <name>begin</name>
      </param>
      <param>
        <type>int</type>
        <name>quoteLevel</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>values</name>
      </param>
      <param>
        <type>boolean</type>
        <name>returnEmbeddable</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="read">
    <id>org.hibernate.engine.jdbc.ReaderInputStream.read( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="addSubGraph">
    <id>org.hibernate.graph.Graph.addSubGraph( String )</id>
    <exceptions>
      <e>CannotContainSubGraphException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>attributeName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="consumeFractional">
    <id>org.hibernate.dialect.JsonHelper.consumeFractional( String int int Object[] EmbeddableMappingType int boolean WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>string</name>
      </param>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>dotIndex</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>values</name>
      </param>
      <param>
        <type>EmbeddableMappingType</type>
        <name>embeddableMappingType</name>
      </param>
      <param>
        <type>int</type>
        <name>selectableIndex</name>
      </param>
      <param>
        <type>boolean</type>
        <name>returnEmbeddable</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>8</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.type.AnyType.disassemble( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>sessionFactory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getProperty">
    <id>org.hibernate.mapping.PersistentClass.getProperty( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="interpretOldCode">
    <id>org.hibernate.engine.OptimisticLockStyle.interpretOldCode( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>oldCode</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.AnyType.nullSafeSet( PreparedStatement Object int boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>settable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getIdentifier">
    <id>org.hibernate.Session.getIdentifier( Object )</id>
    <exceptions>
      <e>TransientObjectException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getSelectSequencePreviousValString">
    <id>org.hibernate.dialect.sequence.SequenceSupport.getSelectSequencePreviousValString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getComponentClass">
    <id>org.hibernate.mapping.Component.getComponentClass( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="makeRootGraph">
    <id>org.hibernate.graph.Graph.makeRootGraph( String boolean )</id>
    <exceptions>
      <e>CannotBecomeEntityGraphException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>boolean</type>
        <name>mutable</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="Component">
    <id>org.hibernate.mapping.Component.Component( MetadataBuildingContext Table PersistentClass )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>MetadataBuildingContext</type>
        <name>metadata</name>
      </param>
      <param>
        <type>Table</type>
        <name>table</name>
      </param>
      <param>
        <type>PersistentClass</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="locateEntityPersister">
    <id>org.hibernate.metamodel.MappingMetamodel.locateEntityPersister( String )</id>
    <exceptions>
      <e>UnknownEntityTypeException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>byName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createAllKeys">
    <id>org.hibernate.mapping.Map.createAllKeys( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="invoke">
    <id>org.hibernate.proxy.pojo.BasicLazyInitializer.invoke( Method Object[] Object )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params>
      <param>
        <type>Method</type>
        <name>method</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>args</name>
      </param>
      <param>
        <type>Object</type>
        <name>proxy</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parseInto">
    <id>org.hibernate.graph.GraphParser.parseInto( Subgraph CharSequence EntityManager )</id>
    <exceptions>
      <e>InvalidGraphException</e>
    </exceptions>
    <params>
      <param>
        <type>Subgraph</type>
        <name>graph</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>graphText</name>
      </param>
      <param>
        <type>EntityManager</type>
        <name>entityManager</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="CustomType">
    <id>org.hibernate.type.CustomType.CustomType( UserType TypeConfiguration )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>UserType</type>
        <name>userType</name>
      </param>
      <param>
        <type>TypeConfiguration</type>
        <name>typeConfiguration</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="findSubPathSource">
    <id>org.hibernate.query.sqm.SqmPathSource.findSubPathSource( String )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="instantiate">
    <id>org.hibernate.Interceptor.instantiate( String RepresentationMode Object )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>entityName</name>
      </param>
      <param>
        <type>RepresentationMode</type>
        <name>representationMode</name>
      </param>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getResultSet">
    <id>org.hibernate.dialect.OracleDialect.getResultSet( CallableStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setLockMode">
    <id>org.hibernate.query.NativeQuery.setLockMode( String LockMode )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>alias</name>
      </param>
      <param>
        <type>LockMode</type>
        <name>lockMode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="replace">
    <id>org.hibernate.type.AnyType.replace( Object Object SharedSessionContractImplementor Object Map )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>original</name>
      </param>
      <param>
        <type>Object</type>
        <name>target</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
      <param>
        <type>Map</type>
        <name>copyCache</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="generate">
    <id>org.hibernate.id.IdentifierGenerator.generate( SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createGenerator">
    <id>org.hibernate.mapping.SimpleValue.createGenerator( IdentifierGeneratorFactory Dialect RootClass )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>IdentifierGeneratorFactory</type>
        <name>identifierGeneratorFactory</name>
      </param>
      <param>
        <type>Dialect</type>
        <name>dialect</name>
      </param>
      <param>
        <type>RootClass</type>
        <name>rootClass</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.domain.NonAggregatedCompositeSimplePath.treatAs( EntityDomainType )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>EntityDomainType</type>
        <name>treatTarget</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDatabaseSnapshot">
    <id>org.hibernate.persister.entity.EntityPersister.getDatabaseSnapshot( Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="fromString">
    <id>org.hibernate.type.descriptor.jdbc.XmlJdbcType.fromString( String JavaType WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>string</name>
      </param>
      <param>
        <type>JavaType</type>
        <name>javaType</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="toColumns">
    <id>org.hibernate.persister.collection.AbstractCollectionPersister.toColumns( String )</id>
    <exceptions>
      <e>QueryException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.domain.SqmDerivedRoot.treatAs( Class )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>treatJavaType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAssociatedEntityName">
    <id>org.hibernate.type.AssociationType.getAssociatedEntityName( SessionFactoryImplementor )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="createMutationQuery">
    <id>org.hibernate.query.QueryProducer.createMutationQuery( String )</id>
    <exceptions>
      <e>IllegalMutationQueryException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>hqlString</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getCurrentVersion">
    <id>org.hibernate.persister.entity.EntityPersister.getCurrentVersion( Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDefaultCollectionType">
    <id>org.hibernate.mapping.Collection.getDefaultCollectionType( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="Component">
    <id>org.hibernate.mapping.Component.Component( MetadataBuildingContext Collection )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>MetadataBuildingContext</type>
        <name>metadata</name>
      </param>
      <param>
        <type>Collection</type>
        <name>collection</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseInto">
    <id>org.hibernate.graph.GraphParser.parseInto( Graph CharSequence EntityManagerFactory )</id>
    <exceptions>
      <e>InvalidGraphException</e>
    </exceptions>
    <params>
      <param>
        <type>Graph</type>
        <name>graph</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>graphText</name>
      </param>
      <param>
        <type>EntityManagerFactory</type>
        <name>entityManagerFactory</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.persister.entity.DiscriminatorType.nullSafeSet( PreparedStatement Object int SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.ComponentType.nullSafeSet( PreparedStatement Object int boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>begin</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>settable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getSequenceNextValString">
    <id>org.hibernate.dialect.sequence.NoSequenceSupport.getSequenceNextValString( String int )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
      <param>
        <type>int</type>
        <name>increment</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getType">
    <id>org.hibernate.mapping.OneToOne.getType( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getSelectSequencePreviousValString">
    <id>org.hibernate.dialect.sequence.MariaDBSequenceSupport.getSelectSequencePreviousValString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPropertyType">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.getPropertyType( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getHibernateProxyInternal">
    <id>org.hibernate.proxy.pojo.bytebuddy.ByteBuddyProxyFactory.getHibernateProxyInternal( )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="toLoggableString">
    <id>org.hibernate.type.EntityType.toLoggableString( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onFlushDirty">
    <id>org.hibernate.Interceptor.onFlushDirty( Object Object Object[] Object[] String[] Type[] )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>entity</name>
      </param>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>currentState</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>previousState</name>
      </param>
      <param>
        <type>String[]</type>
        <name>propertyNames</name>
      </param>
      <param>
        <type>Type[]</type>
        <name>types</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="toLoggableString">
    <id>org.hibernate.type.ArrayType.toLoggableString( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="onCollectionRemove">
    <id>org.hibernate.Interceptor.onCollectionRemove( Object Object )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>collection</name>
      </param>
      <param>
        <type>Object</type>
        <name>key</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addCacheableFileStrictly">
    <id>org.hibernate.boot.MetadataSources.addCacheableFileStrictly( File File )</id>
    <exceptions>
      <e>MappingNotFoundException</e>
      <e>SerializationException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>file</name>
      </param>
      <param>
        <type>File</type>
        <name>cacheDir</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getSubclassEntityPersister">
    <id>org.hibernate.persister.entity.EntityPersister.getSubclassEntityPersister( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instance</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="injectAttributeValue">
    <id>org.hibernate.dialect.AbstractPostgreSQLStructJdbcType.injectAttributeValue( AttributeMapping Object[] int Object[] int WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributeMapping</type>
        <name>attributeMapping</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>attributeValues</name>
      </param>
      <param>
        <type>int</type>
        <name>attributeIndex</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>rawJdbcValues</name>
      </param>
      <param>
        <type>int</type>
        <name>jdbcIndex</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="doExtract">
    <id>org.hibernate.dialect.DB2GetObjectExtractor.doExtract( ResultSet int WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>ResultSet</type>
        <name>rs</name>
      </param>
      <param>
        <type>int</type>
        <name>paramIndex</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="executeUpdate">
    <id>org.hibernate.id.enhanced.TableGenerator.executeUpdate( PreparedStatement SessionEventListenerManager String SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>ps</name>
      </param>
      <param>
        <type>SessionEventListenerManager</type>
        <name>listener</name>
      </param>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="prepare">
    <id>org.hibernate.jdbc.Expectation.prepare( PreparedStatement )</id>
    <exceptions>
      <e>SQLException</e>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>statement</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="UnionSubclassEntityPersister">
    <id>org.hibernate.persister.entity.UnionSubclassEntityPersister.UnionSubclassEntityPersister( PersistentClass EntityDataAccess NaturalIdDataAccess RuntimeModelCreationContext )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistentClass</type>
        <name>persistentClass</name>
      </param>
      <param>
        <type>EntityDataAccess</type>
        <name>cacheAccessStrategy</name>
      </param>
      <param>
        <type>NaturalIdDataAccess</type>
        <name>naturalIdRegionAccessStrategy</name>
      </param>
      <param>
        <type>RuntimeModelCreationContext</type>
        <name>creationContext</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.AnyType.nullSafeSet( PreparedStatement Object int SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getSequencePreviousValString">
    <id>org.hibernate.dialect.sequence.SequenceSupport.getSequencePreviousValString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPropertyValues">
    <id>org.hibernate.type.CompositeType.getPropertyValues( Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>component</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="hashCode">
    <id>org.hibernate.usertype.StaticUserTypeSupport.hashCode( T )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>x</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nullSafeGet">
    <id>org.hibernate.usertype.StaticUserTypeSupport.nullSafeGet( ResultSet int SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>ResultSet</type>
        <name>rs</name>
      </param>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="isFetchProfileEnabled">
    <id>org.hibernate.Session.isFetchProfileEnabled( String )</id>
    <exceptions>
      <e>UnknownProfileException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setMaxRows">
    <id>org.hibernate.dialect.pagination.NoopLimitHandler.setMaxRows( Limit PreparedStatement )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Limit</type>
        <name>limit</name>
      </param>
      <param>
        <type>PreparedStatement</type>
        <name>statement</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="fromString">
    <id>org.hibernate.dialect.JsonHelper.fromString( JdbcMapping String int int boolean WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>JdbcMapping</type>
        <name>jdbcMapping</name>
      </param>
      <param>
        <type>String</type>
        <name>string</name>
      </param>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>end</name>
      </param>
      <param>
        <type>boolean</type>
        <name>returnEmbeddable</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="onDelete">
    <id>org.hibernate.Interceptor.onDelete( Object Serializable Object[] String[] Type[] )</id>
    <exceptions>
      <e>CallbackException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>entity</name>
      </param>
      <param>
        <type>Serializable</type>
        <name>id</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>state</name>
      </param>
      <param>
        <type>String[]</type>
        <name>propertyNames</name>
      </param>
      <param>
        <type>Type[]</type>
        <name>types</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="uniqueResultOptional">
    <id>org.hibernate.query.Query.uniqueResultOptional( )</id>
    <exceptions>
      <e>NonUniqueResultException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="enableFetchProfile">
    <id>org.hibernate.query.SelectionQuery.enableFetchProfile( String )</id>
    <exceptions>
      <e>UnknownProfileException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>profileName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="buildIdentifierHelper">
    <id>org.hibernate.dialect.CockroachDialect.buildIdentifierHelper( IdentifierHelperBuilder DatabaseMetaData )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>IdentifierHelperBuilder</type>
        <name>builder</name>
      </param>
      <param>
        <type>DatabaseMetaData</type>
        <name>dbMetaData</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="renderLoggableString">
    <id>org.hibernate.type.CustomCollectionType.renderLoggableString( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDomainDataRegionStatistics">
    <id>org.hibernate.stat.Statistics.getDomainDataRegionStatistics( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>regionName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="supportsNamedParameters">
    <id>org.hibernate.dialect.DialectDelegateWrapper.supportsNamedParameters( DatabaseMetaData )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>DatabaseMetaData</type>
        <name>databaseMetaData</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getCharacterStream">
    <id>org.hibernate.engine.jdbc.ClobProxy.getCharacterStream( )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.EnumType.nullSafeSet( PreparedStatement T int SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>T</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="addKeySubGraph">
    <id>org.hibernate.graph.Graph.addKeySubGraph( PersistentAttribute Class )</id>
    <exceptions>
      <e>CannotContainSubGraphException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistentAttribute</type>
        <name>attribute</name>
      </param>
      <param>
        <type>Class</type>
        <name>type</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="extract">
    <id>org.hibernate.type.CustomType.extract( CallableStatement int SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>startIndex</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getSubPathSource">
    <id>org.hibernate.query.sqm.SqmPathSource.getSubPathSource( String )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="deepCopy">
    <id>org.hibernate.usertype.BaseUserTypeSupport.deepCopy( T )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.type.CustomType.disassemble( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>sessionFactory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="extractColumnAlias">
    <id>org.hibernate.dialect.ColumnAliasExtractor.extractColumnAlias( ResultSetMetaData int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>ResultSetMetaData</type>
        <name>metaData</name>
      </param>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addClass">
    <id>org.hibernate.cfg.Configuration.addClass( Class )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>entityClass</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPropertyValue">
    <id>org.hibernate.usertype.CompositeUserType.getPropertyValue( J int )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>J</type>
        <name>component</name>
      </param>
      <param>
        <type>int</type>
        <name>property</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getSqlTypeCodes">
    <id>org.hibernate.type.MetaType.getSqlTypeCodes( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="forceVersionIncrement">
    <id>org.hibernate.persister.entity.EntityPersister.forceVersionIncrement( Object Object boolean SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>Object</type>
        <name>currentVersion</name>
      </param>
      <param>
        <type>boolean</type>
        <name>batching</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getSequenceNextValString">
    <id>org.hibernate.dialect.sequence.SequenceSupport.getSequenceNextValString( String int )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
      <param>
        <type>int</type>
        <name>increment</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="bindLimitParametersAtStartOfQuery">
    <id>org.hibernate.dialect.pagination.LimitHandler.bindLimitParametersAtStartOfQuery( Limit PreparedStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Limit</type>
        <name>limit</name>
      </param>
      <param>
        <type>PreparedStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="assemble">
    <id>org.hibernate.type.AbstractType.assemble( Serializable SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Serializable</type>
        <name>cached</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parseInto">
    <id>org.hibernate.graph.GraphParser.parseInto( EntityGraph CharSequence EntityManager )</id>
    <exceptions>
      <e>InvalidGraphException</e>
    </exceptions>
    <params>
      <param>
        <type>EntityGraph</type>
        <name>graph</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>graphText</name>
      </param>
      <param>
        <type>EntityManager</type>
        <name>entityManager</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.type.UserComponentType.disassemble( Object SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getPropertyValuesToInsert">
    <id>org.hibernate.metadata.ClassMetadata.getPropertyValuesToInsert( Object Map SessionImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>entity</name>
      </param>
      <param>
        <type>Map</type>
        <name>mergeMap</name>
      </param>
      <param>
        <type>SessionImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isEqual">
    <id>org.hibernate.type.ComponentType.isEqual( Object Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>x</name>
      </param>
      <param>
        <type>Object</type>
        <name>y</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="buildSessionFactory">
    <id>org.hibernate.cfg.Configuration.buildSessionFactory( )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="registerResultSetOutParameter">
    <id>org.hibernate.dialect.OracleDialect.registerResultSetOutParameter( CallableStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>col</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.AbstractStandardBasicType.nullSafeSet( PreparedStatement Object int SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="isDirty">
    <id>org.hibernate.type.ManyToOneType.isDirty( Object Object boolean[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>old</name>
      </param>
      <param>
        <type>Object</type>
        <name>current</name>
      </param>
      <param>
        <type>boolean[]</type>
        <name>checkable</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getResultSet">
    <id>org.hibernate.dialect.DialectDelegateWrapper.getResultSet( CallableStatement )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="checkResult">
    <id>org.hibernate.engine.jdbc.mutation.OperationResultChecker.checkResult( PreparedStatementDetails int int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatementDetails</type>
        <name>statementDetails</name>
      </param>
      <param>
        <type>int</type>
        <name>affectedRowCount</name>
      </param>
      <param>
        <type>int</type>
        <name>batchPosition</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="injectJdbcValue">
    <id>org.hibernate.dialect.StructHelper.injectJdbcValue( AttributeMapping Object[] int Object[] int WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributeMapping</type>
        <name>attributeMapping</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>attributeValues</name>
      </param>
      <param>
        <type>int</type>
        <name>attributeIndex</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>jdbcValues</name>
      </param>
      <param>
        <type>int</type>
        <name>jdbcIndex</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="registerResultSetOutParameter">
    <id>org.hibernate.dialect.OracleDialect.registerResultSetOutParameter( CallableStatement String )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="renderLoggableString">
    <id>org.hibernate.type.CollectionType.renderLoggableString( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isReadOnlyBeforeAttachedToSession">
    <id>org.hibernate.proxy.AbstractLazyInitializer.isReadOnlyBeforeAttachedToSession( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="extract">
    <id>org.hibernate.type.descriptor.jdbc.BasicExtractor.extract( CallableStatement String WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>String</type>
        <name>paramName</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="initialize">
    <id>org.hibernate.generator.AnnotationBasedGenerator.initialize( A Member GeneratorCreationContext )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>A</type>
        <name>annotation</name>
      </param>
      <param>
        <type>Member</type>
        <name>member</name>
      </param>
      <param>
        <type>GeneratorCreationContext</type>
        <name>context</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="replacePropertyValues">
    <id>org.hibernate.type.UserComponentType.replacePropertyValues( Object Object[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>component</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>values</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="addCacheableFile">
    <id>org.hibernate.cfg.Configuration.addCacheableFile( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>xmlFile</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="initIdentifierPropertyPaths">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.initIdentifierPropertyPaths( Metadata )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Metadata</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="lock">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.lock( Object Object Object LockMode EventSource )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>Object</type>
        <name>version</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>LockMode</type>
        <name>lockMode</name>
      </param>
      <param>
        <type>EventSource</type>
        <name>session</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="extractJdbcValues">
    <id>org.hibernate.type.descriptor.jdbc.JsonJdbcType.extractJdbcValues( Object WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>rawJdbcValue</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.CollectionType.nullSafeSet( PreparedStatement Object int SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="extract">
    <id>org.hibernate.type.ComponentType.extract( CallableStatement String SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>String</type>
        <name>paramName</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="instantiate">
    <id>org.hibernate.type.CustomCollectionType.instantiate( SharedSessionContractImplementor CollectionPersister Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>CollectionPersister</type>
        <name>persister</name>
      </param>
      <param>
        <type>Object</type>
        <name>key</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getBinaryStream">
    <id>org.hibernate.engine.jdbc.BlobProxy.getBinaryStream( )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="createGenerator">
    <id>org.hibernate.mapping.Component.createGenerator( IdentifierGeneratorFactory Dialect RootClass )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>IdentifierGeneratorFactory</type>
        <name>identifierGeneratorFactory</name>
      </param>
      <param>
        <type>Dialect</type>
        <name>dialect</name>
      </param>
      <param>
        <type>RootClass</type>
        <name>rootClass</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.usertype.BaseUserTypeSupport.disassemble( T )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="executeUpdate">
    <id>org.hibernate.id.enhanced.TableStructure.executeUpdate( PreparedStatement SessionEventListenerManager String SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>ps</name>
      </param>
      <param>
        <type>SessionEventListenerManager</type>
        <name>statsCollector</name>
      </param>
      <param>
        <type>String</type>
        <name>sql</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="registerResultSetOutParameter">
    <id>org.hibernate.dialect.DialectDelegateWrapper.registerResultSetOutParameter( CallableStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPropertyValue">
    <id>org.hibernate.metadata.ClassMetadata.getPropertyValue( Object String )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="SingleTableEntityPersister">
    <id>org.hibernate.persister.entity.SingleTableEntityPersister.SingleTableEntityPersister( PersistentClass EntityDataAccess NaturalIdDataAccess RuntimeModelCreationContext )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>PersistentClass</type>
        <name>persistentClass</name>
      </param>
      <param>
        <type>EntityDataAccess</type>
        <name>cacheAccessStrategy</name>
      </param>
      <param>
        <type>NaturalIdDataAccess</type>
        <name>naturalIdRegionAccessStrategy</name>
      </param>
      <param>
        <type>RuntimeModelCreationContext</type>
        <name>creationContext</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="consumeLiteral">
    <id>org.hibernate.dialect.JsonHelper.consumeLiteral( String int Object[] EmbeddableMappingType int boolean WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>string</name>
      </param>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>values</name>
      </param>
      <param>
        <type>EmbeddableMappingType</type>
        <name>embeddableMappingType</name>
      </param>
      <param>
        <type>int</type>
        <name>selectableIndex</name>
      </param>
      <param>
        <type>boolean</type>
        <name>returnEmbeddable</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="intercept">
    <id>org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor.intercept( Object Method Object[] )</id>
    <exceptions>
      <e>Throwable</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>proxy</name>
      </param>
      <param>
        <type>Method</type>
        <name>thisMethod</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>args</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getColumnSpan">
    <id>org.hibernate.type.OneToOneType.getColumnSpan( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>session</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="initPropertyPaths">
    <id>org.hibernate.persister.entity.AbstractEntityPersister.initPropertyPaths( Metadata )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Metadata</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.usertype.StaticUserTypeSupport.nullSafeSet( PreparedStatement T int SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>T</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="extractJdbcValues">
    <id>org.hibernate.dialect.StructJdbcType.extractJdbcValues( Object WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>rawJdbcValue</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="toLoggableString">
    <id>org.hibernate.type.MetaType.toLoggableString( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>factory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="doWork">
    <id>org.hibernate.SharedSessionContract.doWork( Work )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Work</type>
        <name>work</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="disableFetchProfile">
    <id>org.hibernate.Session.disableFetchProfile( String )</id>
    <exceptions>
      <e>UnknownProfileException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="bindParameterValue">
    <id>org.hibernate.sql.ast.tree.expression.QueryLiteral.bindParameterValue( PreparedStatement int JdbcParameterBindings ExecutionContext )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>startPosition</name>
      </param>
      <param>
        <type>JdbcParameterBindings</type>
        <name>jdbcParameterBindings</name>
      </param>
      <param>
        <type>ExecutionContext</type>
        <name>executionContext</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="instantiate">
    <id>org.hibernate.usertype.UserCollectionType.instantiate( SharedSessionContractImplementor CollectionPersister )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>CollectionPersister</type>
        <name>persister</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDropSequenceStrings">
    <id>org.hibernate.dialect.sequence.NoSequenceSupport.getDropSequenceStrings( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="instantiate">
    <id>org.hibernate.type.BagType.instantiate( SharedSessionContractImplementor CollectionPersister Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>CollectionPersister</type>
        <name>persister</name>
      </param>
      <param>
        <type>Object</type>
        <name>key</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="replacePropertyValues">
    <id>org.hibernate.type.CompositeType.replacePropertyValues( Object Object[] SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>component</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>values</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="determineLengthForBufferSizing">
    <id>org.hibernate.type.descriptor.java.DataHelper.determineLengthForBufferSizing( Clob )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>Clob</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="wrapRawJdbcValues">
    <id>org.hibernate.dialect.StructJdbcType.wrapRawJdbcValues( EmbeddableMappingType int[] int[] Object[] int WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>EmbeddableMappingType</type>
        <name>embeddableMappingType</name>
      </param>
      <param>
        <type>int[]</type>
        <name>orderMapping</name>
      </param>
      <param>
        <type>int[]</type>
        <name>inverseOrderMapping</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>jdbcValues</name>
      </param>
      <param>
        <type>int</type>
        <name>jdbcIndex</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="getDropSequenceString">
    <id>org.hibernate.dialect.sequence.SQLServer16SequenceSupport.getDropSequenceString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getRecursiveProperty">
    <id>org.hibernate.mapping.PersistentClass.getRecursiveProperty( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyPath</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="nullSafeGet">
    <id>org.hibernate.usertype.BaseUserTypeSupport.nullSafeGet( ResultSet int SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>ResultSet</type>
        <name>rs</name>
      </param>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="replace">
    <id>org.hibernate.persister.entity.DiscriminatorType.replace( Object Object SharedSessionContractImplementor Object Map )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>original</name>
      </param>
      <param>
        <type>Object</type>
        <name>target</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
      <param>
        <type>Map</type>
        <name>copyCache</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="bindParameterValue">
    <id>org.hibernate.sql.ast.tree.expression.UnparsedNumericLiteral.bindParameterValue( PreparedStatement int JdbcParameterBindings ExecutionContext )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>PreparedStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>startPosition</name>
      </param>
      <param>
        <type>JdbcParameterBindings</type>
        <name>jdbcParameterBindings</name>
      </param>
      <param>
        <type>ExecutionContext</type>
        <name>executionContext</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="injectAttributeValue">
    <id>org.hibernate.dialect.StructJdbcType.injectAttributeValue( AttributeMapping Object[] int Object[] int WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>AttributeMapping</type>
        <name>attributeMapping</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>attributeValues</name>
      </param>
      <param>
        <type>int</type>
        <name>attributeIndex</name>
      </param>
      <param>
        <type>Object[]</type>
        <name>rawJdbcValues</name>
      </param>
      <param>
        <type>int</type>
        <name>jdbcIndex</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="resetIfNeeded">
    <id>org.hibernate.engine.jdbc.ClobProxy.resetIfNeeded( )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getType">
    <id>org.hibernate.mapping.Property.getType( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.domain.SqmAnyValuedSimplePath.treatAs( EntityDomainType )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>EntityDomainType</type>
        <name>treatTarget</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="conflictOnConstraintPaths">
    <id>org.hibernate.query.criteria.JpaConflictClause.conflictOnConstraintPaths( List )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>List</type>
        <name>paths</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="generate">
    <id>org.hibernate.id.Assigned.generate( SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>obj</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="registerResultSetOutParameter">
    <id>org.hibernate.dialect.Dialect.registerResultSetOutParameter( CallableStatement int )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>statement</name>
      </param>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="byMultipleIds">
    <id>org.hibernate.Session.byMultipleIds( Class )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>entityClass</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="afterDeserialization">
    <id>org.hibernate.proxy.AbstractLazyInitializer.afterDeserialization( Boolean String String boolean )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Boolean</type>
        <name>readOnlyBeforeAttachedToSession</name>
      </param>
      <param>
        <type>String</type>
        <name>sessionFactoryUuid</name>
      </param>
      <param>
        <type>String</type>
        <name>sessionFactoryName</name>
      </param>
      <param>
        <type>boolean</type>
        <name>allowLoadOutsideTransaction</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="supportsNamedParameters">
    <id>org.hibernate.dialect.SybaseDialect.supportsNamedParameters( DatabaseMetaData )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>DatabaseMetaData</type>
        <name>databaseMetaData</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPropertyValues">
    <id>org.hibernate.metadata.ClassMetadata.getPropertyValues( Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>entity</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getUnderlyingStream">
    <id>org.hibernate.engine.jdbc.ClobProxy.getUnderlyingStream( )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getSelectSequencePreviousValString">
    <id>org.hibernate.dialect.sequence.DB2SequenceSupport.getSelectSequencePreviousValString( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getEntityDescriptor">
    <id>org.hibernate.metamodel.MappingMetamodel.getEntityDescriptor( Class )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>entityJavaType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getCollectionDescriptor">
    <id>org.hibernate.metamodel.MappingMetamodel.getCollectionDescriptor( NavigableRole )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>NavigableRole</type>
        <name>role</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.type.UserComponentType.disassemble( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>sessionFactory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="CompositeElementPropertyMapping">
    <id>org.hibernate.persister.collection.CompositeElementPropertyMapping.CompositeElementPropertyMapping( String[] String[] String[] String[] CompositeType Metadata )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String[]</type>
        <name>elementColumns</name>
      </param>
      <param>
        <type>String[]</type>
        <name>elementColumnReaders</name>
      </param>
      <param>
        <type>String[]</type>
        <name>elementColumnReaderTemplates</name>
      </param>
      <param>
        <type>String[]</type>
        <name>elementFormulaTemplates</name>
      </param>
      <param>
        <type>CompositeType</type>
        <name>compositeType</name>
      </param>
      <param>
        <type>Metadata</type>
        <name>factory</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="disassemble">
    <id>org.hibernate.type.ManyToOneType.disassemble( Object SessionFactoryImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>value</name>
      </param>
      <param>
        <type>SessionFactoryImplementor</type>
        <name>sessionFactory</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="deepCopy">
    <id>org.hibernate.usertype.StaticUserTypeSupport.deepCopy( T )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>T</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isValid">
    <id>org.hibernate.mapping.ToOne.isValid( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPropertyValues">
    <id>org.hibernate.type.CompositeType.getPropertyValues( Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>component</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getCollectionDescriptor">
    <id>org.hibernate.metamodel.MappingMetamodel.getCollectionDescriptor( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>role</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="validate">
    <id>org.hibernate.mapping.Set.validate( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="replaceElements">
    <id>org.hibernate.type.MapType.replaceElements( Object Object Object Map SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>original</name>
      </param>
      <param>
        <type>Object</type>
        <name>target</name>
      </param>
      <param>
        <type>Object</type>
        <name>owner</name>
      </param>
      <param>
        <type>Map</type>
        <name>copyCache</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getProperty">
    <id>org.hibernate.mapping.Component.getProperty( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="treatAs">
    <id>org.hibernate.query.sqm.tree.from.SqmEntityJoin.treatAs( Class )</id>
    <exceptions>
      <e>PathException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>treatJavaType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getIdentitySelectString">
    <id>org.hibernate.dialect.identity.IdentityColumnSupportImpl.getIdentitySelectString( String String int )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>table</name>
      </param>
      <param>
        <type>String</type>
        <name>column</name>
      </param>
      <param>
        <type>int</type>
        <name>type</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="initComponentPropertyPaths">
    <id>org.hibernate.persister.entity.AbstractPropertyMapping.initComponentPropertyPaths( String CompositeType String[] String[] String[] String[] Metadata )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>path</name>
      </param>
      <param>
        <type>CompositeType</type>
        <name>type</name>
      </param>
      <param>
        <type>String[]</type>
        <name>columns</name>
      </param>
      <param>
        <type>String[]</type>
        <name>columnReaders</name>
      </param>
      <param>
        <type>String[]</type>
        <name>columnReaderTemplates</name>
      </param>
      <param>
        <type>String[]</type>
        <name>formulaTemplates</name>
      </param>
      <param>
        <type>Metadata</type>
        <name>factory</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="getPropertyValues">
    <id>org.hibernate.type.AnyType.getPropertyValues( Object SharedSessionContractImplementor )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>component</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="fromString">
    <id>org.hibernate.dialect.JsonHelper.fromString( EmbeddableMappingType int String int int boolean WrapperOptions )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>EmbeddableMappingType</type>
        <name>embeddableMappingType</name>
      </param>
      <param>
        <type>int</type>
        <name>selectableIndex</name>
      </param>
      <param>
        <type>String</type>
        <name>string</name>
      </param>
      <param>
        <type>int</type>
        <name>start</name>
      </param>
      <param>
        <type>int</type>
        <name>end</name>
      </param>
      <param>
        <type>boolean</type>
        <name>returnEmbeddable</name>
      </param>
      <param>
        <type>WrapperOptions</type>
        <name>options</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="nullSafeSet">
    <id>org.hibernate.type.AbstractStandardBasicType.nullSafeSet( CallableStatement T String SharedSessionContractImplementor )</id>
    <exceptions>
      <e>SQLException</e>
    </exceptions>
    <params>
      <param>
        <type>CallableStatement</type>
        <name>st</name>
      </param>
      <param>
        <type>T</type>
        <name>value</name>
      </param>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="interpretExternalSetting">
    <id>org.hibernate.FlushMode.interpretExternalSetting( String )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>externalName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getType">
    <id>org.hibernate.mapping.Component.getType( )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="propertyException">
    <id>org.hibernate.persister.entity.AbstractPropertyMapping.propertyException( String )</id>
    <exceptions>
      <e>QueryException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>propertyName</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="buildSessionFactory">
    <id>org.hibernate.cfg.Configuration.buildSessionFactory( ServiceRegistry )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>ServiceRegistry</type>
        <name>serviceRegistry</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="lock">
    <id>org.hibernate.dialect.lock.UpdateLockingStrategy.lock( Object Object Object int EventSource )</id>
    <exceptions>
      <e>JDBCException</e>
      <e>StaleObjectStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>id</name>
      </param>
      <param>
        <type>Object</type>
        <name>version</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>int</type>
        <name>timeout</name>
      </param>
      <param>
        <type>EventSource</type>
        <name>session</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="generate">
    <id>org.hibernate.id.UUIDGenerator.generate( SharedSessionContractImplementor Object )</id>
    <exceptions>
      <e>HibernateException</e>
    </exceptions>
    <params>
      <param>
        <type>SharedSessionContractImplementor</type>
        <name>session</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getCreateSequenceString">
    <id>org.hibernate.dialect.sequence.NoSequenceSupport.getCreateSequenceString( String int int )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>sequenceName</name>
      </param>
      <param>
        <type>int</type>
        <name>initialValue</name>
      </param>
      <param>
        <type>int</type>
        <name>incrementSize</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setReadOnly">
    <id>org.hibernate.proxy.LazyInitializer.setReadOnly( boolean )</id>
    <exceptions>
      <e>TransientObjectException</e>
      <e>SessionException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>readOnly</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="upsert">
    <id>org.hibernate.StatelessSession.upsert( String Object )</id>
    <exceptions>
      <e>TransientObjectException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>entityName</name>
      </param>
      <param>
        <type>Object</type>
        <name>entity</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="AbstractCollectionPersister">
    <id>org.hibernate.persister.collection.AbstractCollectionPersister.AbstractCollectionPersister( Collection CollectionDataAccess PersisterCreationContext )</id>
    <exceptions>
      <e>CacheException</e>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Collection</type>
        <name>collectionBootDescriptor</name>
      </param>
      <param>
        <type>CollectionDataAccess</type>
        <name>cacheAccessStrategy</name>
      </param>
      <param>
        <type>PersisterCreationContext</type>
        <name>creationContext</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getColumnSpan">
    <id>org.hibernate.type.AbstractStandardBasicType.getColumnSpan( Mapping )</id>
    <exceptions>
      <e>MappingException</e>
    </exceptions>
    <params>
      <param>
        <type>Mapping</type>
        <name>mapping</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
</methods>
