<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE methods SYSTEM "config.dtd">
<methods>
  <method name="multipliedBy">
    <id>org.joda.time.Days.multipliedBy( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="indexOfSupported">
    <id>org.joda.time.base.AbstractPartial.indexOfSupported( DateTimeFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="forTimeZone">
    <id>org.joda.time.DateTimeZone.forTimeZone( TimeZone )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>TimeZone</type>
        <name>zone</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="Interval">
    <id>org.joda.time.Interval.Interval( Object Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>interval</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chronology</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="toStandardSeconds">
    <id>org.joda.time.Duration.toStandardSeconds( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setSecondOfMinute">
    <id>org.joda.time.MutableDateTime.setSecondOfMinute( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>secondOfMinute</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="printTo">
    <id>org.joda.time.format.DateTimeFormatter.printTo( Appendable long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Appendable</type>
        <name>appendable</name>
      </param>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addDurationConverter">
    <id>org.joda.time.convert.ConverterManager.addDurationConverter( DurationConverter )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationConverter</type>
        <name>converter</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="appendLiteral">
    <id>org.joda.time.format.PeriodFormatterBuilder.appendLiteral( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.Months.plus( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>months</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withDayOfYear">
    <id>org.joda.time.LocalDateTime.withDayOfYear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>dayOfYear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addMillis">
    <id>org.joda.time.ReadWritablePeriod.addMillis( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="appendSeparatorIfFieldsBefore">
    <id>org.joda.time.format.PeriodFormatterBuilder.appendSeparatorIfFieldsBefore( String )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toString">
    <id>org.joda.time.YearMonth.toString( String Locale )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>pattern</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="printTo">
    <id>org.joda.time.format.InternalPrinterDateTimePrinter.printTo( Appendable long Chronology int DateTimeZone Locale )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Appendable</type>
        <name>appendable</name>
      </param>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
      <param>
        <type>int</type>
        <name>displayOffset</name>
      </param>
      <param>
        <type>DateTimeZone</type>
        <name>displayZone</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="MutablePeriod">
    <id>org.joda.time.MutablePeriod.MutablePeriod( int int int int int int int int PeriodType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>years</name>
      </param>
      <param>
        <type>int</type>
        <name>months</name>
      </param>
      <param>
        <type>int</type>
        <name>weeks</name>
      </param>
      <param>
        <type>int</type>
        <name>days</name>
      </param>
      <param>
        <type>int</type>
        <name>hours</name>
      </param>
      <param>
        <type>int</type>
        <name>minutes</name>
      </param>
      <param>
        <type>int</type>
        <name>seconds</name>
      </param>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
      <param>
        <type>PeriodType</type>
        <name>type</name>
      </param>
    </params>
    <arity>9</arity>
  </method>
  <method name="toDurationFrom">
    <id>org.joda.time.base.BasePeriod.toDurationFrom( ReadableInstant )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>startInstant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="Interval">
    <id>org.joda.time.Interval.Interval( long long Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>startInstant</name>
      </param>
      <param>
        <type>long</type>
        <name>endInstant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chronology</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="fromDateFields">
    <id>org.joda.time.LocalTime.fromDateFields( Date )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Date</type>
        <name>date</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setDays">
    <id>org.joda.time.ReadWritablePeriod.setDays( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>days</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="set">
    <id>org.joda.time.field.PreciseDurationDateTimeField.set( long int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="Duration">
    <id>org.joda.time.Duration.Duration( ReadableInstant ReadableInstant )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="set">
    <id>org.joda.time.chrono.BasicMonthOfYearDateTimeField.set( long int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>month</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="dividedBy">
    <id>org.joda.time.Months.dividedBy( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>divisor</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPartialValues">
    <id>org.joda.time.convert.StringConverter.getPartialValues( ReadablePartial Object Chronology DateTimeFormatter )</id>
    <exceptions>
      <e>ClassCastException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>fieldSource</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
      <param>
        <type>DateTimeFormatter</type>
        <name>parser</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="BasePartial">
    <id>org.joda.time.base.BasePartial.BasePartial( int[] Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chronology</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="BaseInterval">
    <id>org.joda.time.base.BaseInterval.BaseInterval( ReadableInstant ReadableDuration )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setWeekyear">
    <id>org.joda.time.MutableDateTime.setWeekyear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weekyear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setWeekOfWeekyear">
    <id>org.joda.time.ReadWritableDateTime.setWeekOfWeekyear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weekOfWeekyear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="appendSuffix">
    <id>org.joda.time.format.PeriodFormatterBuilder.appendSuffix( PeriodFieldAffix )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>PeriodFieldAffix</type>
        <name>suffix</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withFields">
    <id>org.joda.time.LocalDate.withFields( ReadablePartial )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setMillis">
    <id>org.joda.time.MutablePeriod.setMillis( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setDurationBeforeEnd">
    <id>org.joda.time.MutableInterval.setDurationBeforeEnd( long )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="Partial">
    <id>org.joda.time.Partial.Partial( DateTimeFieldType[] int[] Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType[]</type>
        <name>types</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chronology</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="MutablePeriod">
    <id>org.joda.time.MutablePeriod.MutablePeriod( Object )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toString">
    <id>org.joda.time.base.AbstractDateTime.toString( String Locale )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>pattern</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="Partial">
    <id>org.joda.time.Partial.Partial( Partial int[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Partial</type>
        <name>partial</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDifference">
    <id>org.joda.time.field.UnsupportedDateTimeField.getDifference( long long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>minuendInstant</name>
      </param>
      <param>
        <type>long</type>
        <name>subtrahendInstant</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="get">
    <id>org.joda.time.LocalTime.get( DateTimeFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setYear">
    <id>org.joda.time.MutableDateTime.setYear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="appendSeparator">
    <id>org.joda.time.format.PeriodFormatterBuilder.appendSeparator( String String )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
      <param>
        <type>String</type>
        <name>finalText</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withYearOfEra">
    <id>org.joda.time.LocalDate.withYearOfEra( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>yearOfEra</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPeriodBeforeEnd">
    <id>org.joda.time.ReadWritableInterval.setPeriodBeforeEnd( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="appendSeparator">
    <id>org.joda.time.format.PeriodFormatterBuilder.appendSeparator( String String String[] )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
      <param>
        <type>String</type>
        <name>finalText</name>
      </param>
      <param>
        <type>String[]</type>
        <name>variants</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setPeriod">
    <id>org.joda.time.MutablePeriod.setPeriod( long long Chronology )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>startInstant</name>
      </param>
      <param>
        <type>long</type>
        <name>endInstant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="safeNegate">
    <id>org.joda.time.field.FieldUtils.safeNegate( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minusMillis">
    <id>org.joda.time.Period.minusMillis( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addWrapPartial">
    <id>org.joda.time.field.BaseDateTimeField.addWrapPartial( ReadablePartial int int[] int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>fieldIndex</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
      <param>
        <type>int</type>
        <name>valueToAdd</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getAsShortText">
    <id>org.joda.time.field.UnsupportedDateTimeField.getAsShortText( ReadablePartial int Locale )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
      <param>
        <type>int</type>
        <name>fieldValue</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="addMonths">
    <id>org.joda.time.MutablePeriod.addMonths( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>months</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minusWeeks">
    <id>org.joda.time.Period.minusWeeks( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weeks</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="set">
    <id>org.joda.time.DateTimeField.set( ReadablePartial int int[] String Locale )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>fieldIndex</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="withDurationAfterStart">
    <id>org.joda.time.Interval.withDurationAfterStart( ReadableDuration )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="set">
    <id>org.joda.time.field.BaseDateTimeField.set( long String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withMonths">
    <id>org.joda.time.Period.withMonths( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>months</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="roundHalfEven">
    <id>org.joda.time.field.UnsupportedDateTimeField.roundHalfEven( long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addWeeks">
    <id>org.joda.time.ReadWritablePeriod.addWeeks( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weeks</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toString">
    <id>org.joda.time.LocalTime.toString( String Locale )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>pattern</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="convertLocalToUTC">
    <id>org.joda.time.DateTimeZone.convertLocalToUTC( long boolean long )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instantLocal</name>
      </param>
      <param>
        <type>boolean</type>
        <name>strict</name>
      </param>
      <param>
        <type>long</type>
        <name>originalInstantUTC</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="standardWeeksIn">
    <id>org.joda.time.Weeks.standardWeeksIn( ReadablePeriod )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="with">
    <id>org.joda.time.Partial.with( DateTimeFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getMaximumValue">
    <id>org.joda.time.field.UnsupportedDateTimeField.getMaximumValue( long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseLocalDateTime">
    <id>org.joda.time.format.DateTimeFormatter.parseLocalDateTime( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeReplace">
    <id>org.joda.time.DateTimeZone.writeReplace( )</id>
    <exceptions>
      <e>ObjectStreamException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getDateTimeMillis">
    <id>org.joda.time.chrono.AssembledChronology.getDateTimeMillis( int int int int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
      <param>
        <type>int</type>
        <name>hourOfDay</name>
      </param>
      <param>
        <type>int</type>
        <name>minuteOfHour</name>
      </param>
      <param>
        <type>int</type>
        <name>secondOfMinute</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfSecond</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="getPartialConverter">
    <id>org.joda.time.convert.ConverterManager.getPartialConverter( Object )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="compareTo">
    <id>org.joda.time.LocalDateTime.compareTo( ReadablePartial )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="BaseInterval">
    <id>org.joda.time.base.BaseInterval.BaseInterval( long long Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>startInstant</name>
      </param>
      <param>
        <type>long</type>
        <name>endInstant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.Seconds.minus( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>seconds</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPartialValues">
    <id>org.joda.time.convert.PartialConverter.getPartialValues( ReadablePartial Object Chronology DateTimeFormatter )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>fieldSource</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
      <param>
        <type>DateTimeFormatter</type>
        <name>parser</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="dividedBy">
    <id>org.joda.time.Years.dividedBy( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>divisor</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="get">
    <id>org.joda.time.ReadablePartial.get( DateTimeFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>field</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setInto">
    <id>org.joda.time.convert.PeriodConverter.setInto( ReadWritablePeriod Object Chronology )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadWritablePeriod</type>
        <name>period</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setInto">
    <id>org.joda.time.convert.IntervalConverter.setInto( ReadWritableInterval Object Chronology )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadWritableInterval</type>
        <name>writableInterval</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="withYearOfCentury">
    <id>org.joda.time.LocalDateTime.withYearOfCentury( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>yearOfCentury</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPeriod">
    <id>org.joda.time.MutablePeriod.setPeriod( long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPeriodAfterStart">
    <id>org.joda.time.MutableInterval.setPeriodAfterStart( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="select">
    <id>org.joda.time.convert.ConverterSet.select( Class )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>Class</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withStartMillis">
    <id>org.joda.time.Interval.withStartMillis( long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>startInstant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="LocalDateTime">
    <id>org.joda.time.LocalDateTime.LocalDateTime( Object DateTimeZone )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
      <param>
        <type>DateTimeZone</type>
        <name>zone</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="writePaddedInteger">
    <id>org.joda.time.format.FormatUtils.writePaddedInteger( Writer int int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Writer</type>
        <name>out</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="withField">
    <id>org.joda.time.MonthDay.withField( DateTimeFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getInstance">
    <id>org.joda.time.chrono.StrictChronology.getInstance( Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Chronology</type>
        <name>base</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.Weeks.plus( Weeks )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>Weeks</type>
        <name>weeks</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="add">
    <id>org.joda.time.MutableDateTime.add( ReadableDuration )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="Duration">
    <id>org.joda.time.Duration.Duration( long long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>startInstant</name>
      </param>
      <param>
        <type>long</type>
        <name>endInstant</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="writeZoneInfoMap">
    <id>org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap( DataOutputStream Map )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataOutputStream</type>
        <name>dout</name>
      </param>
      <param>
        <type>Map</type>
        <name>zimap</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDifferenceAsLong">
    <id>org.joda.time.field.UnsupportedDateTimeField.getDifferenceAsLong( long long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>minuendInstant</name>
      </param>
      <param>
        <type>long</type>
        <name>subtrahendInstant</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withPeriodAdded">
    <id>org.joda.time.TimeOfDay.withPeriodAdded( ReadablePeriod int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="removePeriodConverter">
    <id>org.joda.time.convert.ConverterManager.removePeriodConverter( PeriodConverter )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>PeriodConverter</type>
        <name>converter</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="set">
    <id>org.joda.time.field.BaseDateTimeField.set( long String Locale )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="withField">
    <id>org.joda.time.LocalDateTime.withField( DateTimeFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withChronologyRetainFields">
    <id>org.joda.time.MonthDay.withChronologyRetainFields( Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Chronology</type>
        <name>newChronology</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="property">
    <id>org.joda.time.YearMonth.property( DateTimeFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="appendFixedDecimal">
    <id>org.joda.time.format.DateTimeFormatterBuilder.appendFixedDecimal( DateTimeFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>numDigits</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withFieldAdded">
    <id>org.joda.time.LocalTime.withFieldAdded( DurationFieldType int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>amount</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="toDateTime">
    <id>org.joda.time.LocalDate.toDateTime( LocalTime )</id>
    <exceptions>
      <e>IllegalInstantException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>LocalTime</type>
        <name>time</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getChronology">
    <id>org.joda.time.convert.InstantConverter.getChronology( Object DateTimeZone )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>DateTimeZone</type>
        <name>zone</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseInto">
    <id>org.joda.time.format.DateTimeParser.parseInto( DateTimeParserBucket String int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeParserBucket</type>
        <name>bucket</name>
      </param>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getFieldType">
    <id>org.joda.time.base.AbstractPartial.getFieldType( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.Years.minus( Years )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>Years</type>
        <name>years</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getField">
    <id>org.joda.time.base.AbstractPartial.getField( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.Months.plus( Months )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>Months</type>
        <name>months</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addMinutes">
    <id>org.joda.time.MutablePeriod.addMinutes( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>minutes</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addPeriodConverter">
    <id>org.joda.time.convert.ConverterManager.addPeriodConverter( PeriodConverter )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>PeriodConverter</type>
        <name>converter</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toStandardHours">
    <id>org.joda.time.Weeks.toStandardHours( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="parseMonths">
    <id>org.joda.time.Months.parseMonths( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>periodStr</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="ofEpochSecond">
    <id>org.joda.time.Instant.ofEpochSecond( long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>epochSecond</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addDays">
    <id>org.joda.time.MutablePeriod.addDays( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>days</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="property">
    <id>org.joda.time.LocalDateTime.property( DateTimeFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readZoneInfoMap">
    <id>org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap( DataInputStream Map )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataInputStream</type>
        <name>din</name>
      </param>
      <param>
        <type>Map</type>
        <name>zimap</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setDateTime">
    <id>org.joda.time.ReadWritableDateTime.setDateTime( int int int int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
      <param>
        <type>int</type>
        <name>hourOfDay</name>
      </param>
      <param>
        <type>int</type>
        <name>minuteOfHour</name>
      </param>
      <param>
        <type>int</type>
        <name>secondOfMinute</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfSecond</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="withMonthOfYear">
    <id>org.joda.time.YearMonthDay.withMonthOfYear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.Months.minus( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>months</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setRounding">
    <id>org.joda.time.MutableDateTime.setRounding( DateTimeField int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeField</type>
        <name>field</name>
      </param>
      <param>
        <type>int</type>
        <name>mode</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="add">
    <id>org.joda.time.MutablePeriod.add( long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withDayOfYear">
    <id>org.joda.time.DateTime.withDayOfYear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>dayOfYear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.YearMonthDay.plus( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDifference">
    <id>org.joda.time.field.UnsupportedDurationField.getDifference( long long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>minuendInstant</name>
      </param>
      <param>
        <type>long</type>
        <name>subtrahendInstant</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="BaseDateTime">
    <id>org.joda.time.base.BaseDateTime.BaseDateTime( Object DateTimeZone )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
      <param>
        <type>DateTimeZone</type>
        <name>zone</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withFields">
    <id>org.joda.time.DateMidnight.withFields( ReadablePartial )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setEndMillis">
    <id>org.joda.time.ReadWritableInterval.setEndMillis( long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>millisInstant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDateTimeMillis">
    <id>org.joda.time.chrono.GJChronology.getDateTimeMillis( int int int int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
      <param>
        <type>int</type>
        <name>hourOfDay</name>
      </param>
      <param>
        <type>int</type>
        <name>minuteOfHour</name>
      </param>
      <param>
        <type>int</type>
        <name>secondOfMinute</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfSecond</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="checkParser">
    <id>org.joda.time.format.PeriodFormatter.checkParser( )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="set">
    <id>org.joda.time.MutablePeriod.set( DurationFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationFieldType</type>
        <name>field</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDateTimeMillis">
    <id>org.joda.time.chrono.BasicChronology.getDateTimeMillis( int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfDay</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="standardHours">
    <id>org.joda.time.Duration.standardHours( long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>hours</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="add">
    <id>org.joda.time.ReadWritableInstant.add( DurationFieldType int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationFieldType</type>
        <name>type</name>
      </param>
      <param>
        <type>int</type>
        <name>amount</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setSecondOfMinute">
    <id>org.joda.time.ReadWritableDateTime.setSecondOfMinute( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>secondOfMinute</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="DateMidnight">
    <id>org.joda.time.DateMidnight.DateMidnight( Object )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="property">
    <id>org.joda.time.DateMidnight.property( DateTimeFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setDateTime">
    <id>org.joda.time.MutableDateTime.setDateTime( int int int int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
      <param>
        <type>int</type>
        <name>hourOfDay</name>
      </param>
      <param>
        <type>int</type>
        <name>minuteOfHour</name>
      </param>
      <param>
        <type>int</type>
        <name>secondOfMinute</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfSecond</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="getDateTimeMillis">
    <id>org.joda.time.Chronology.getDateTimeMillis( int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfDay</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="multipliedBy">
    <id>org.joda.time.Weeks.multipliedBy( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getChronology">
    <id>org.joda.time.convert.PartialConverter.getChronology( Object Chronology )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="LocalDate">
    <id>org.joda.time.LocalDate.LocalDate( Object Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chronology</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="appendSuffix">
    <id>org.joda.time.format.PeriodFormatterBuilder.appendSuffix( String String )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>singularText</name>
      </param>
      <param>
        <type>String</type>
        <name>pluralText</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseInto">
    <id>org.joda.time.format.InternalParser.parseInto( DateTimeParserBucket CharSequence int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeParserBucket</type>
        <name>bucket</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>text</name>
      </param>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="withStart">
    <id>org.joda.time.Interval.withStart( ReadableInstant )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>start</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.LocalTime.minus( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setMinuteOfHour">
    <id>org.joda.time.MutableDateTime.setMinuteOfHour( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>minuteOfHour</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="property">
    <id>org.joda.time.Partial.property( DateTimeFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setMillis">
    <id>org.joda.time.ReadWritableInstant.setMillis( long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="negated">
    <id>org.joda.time.Hours.negated( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="property">
    <id>org.joda.time.LocalDate.property( DateTimeFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.LocalDateTime.plus( ReadableDuration )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="appendSuffix">
    <id>org.joda.time.format.PeriodFormatterBuilder.appendSuffix( String )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPeriodBeforeEnd">
    <id>org.joda.time.MutableInterval.setPeriodBeforeEnd( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="printTo">
    <id>org.joda.time.format.PeriodPrinter.printTo( Writer ReadablePeriod Locale )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Writer</type>
        <name>out</name>
      </param>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="printTo">
    <id>org.joda.time.format.InternalPrinterDateTimePrinter.printTo( Writer ReadablePartial Locale )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Writer</type>
        <name>out</name>
      </param>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.Years.minus( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>years</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setDurationAfterStart">
    <id>org.joda.time.ReadWritableInterval.setDurationAfterStart( ReadableDuration )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.Instant.minus( ReadableDuration )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plusSeconds">
    <id>org.joda.time.Period.plusSeconds( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>seconds</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getInstantMillis">
    <id>org.joda.time.convert.ReadableInstantConverter.getInstantMillis( Object Chronology )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addHours">
    <id>org.joda.time.MutableDateTime.addHours( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hours</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withChronologyRetainFields">
    <id>org.joda.time.YearMonthDay.withChronologyRetainFields( Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Chronology</type>
        <name>newChronology</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="removeDurationConverter">
    <id>org.joda.time.convert.ConverterManager.removeDurationConverter( DurationConverter )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationConverter</type>
        <name>converter</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getMinimumValue">
    <id>org.joda.time.field.UnsupportedDateTimeField.getMinimumValue( long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseSeconds">
    <id>org.joda.time.Seconds.parseSeconds( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>periodStr</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="checkAlterDurationConverters">
    <id>org.joda.time.convert.ConverterManager.checkAlterDurationConverters( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="set">
    <id>org.joda.time.field.RemainderDateTimeField.set( long int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="set">
    <id>org.joda.time.ReadWritableInstant.set( DateTimeFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readFrom">
    <id>org.joda.time.tz.DateTimeZoneBuilder.readFrom( InputStream String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>in</name>
      </param>
      <param>
        <type>String</type>
        <name>id</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setExtended">
    <id>org.joda.time.DateTimeField.setExtended( long int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="BaseInterval">
    <id>org.joda.time.base.BaseInterval.BaseInterval( ReadablePeriod ReadableInstant )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="ZoneInfoProvider">
    <id>org.joda.time.tz.ZoneInfoProvider.ZoneInfoProvider( String ClassLoader boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>resourcePath</name>
      </param>
      <param>
        <type>ClassLoader</type>
        <name>loader</name>
      </param>
      <param>
        <type>boolean</type>
        <name>favorSystemLoader</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="set">
    <id>org.joda.time.field.UnsupportedDateTimeField.set( ReadablePartial int int[] String Locale )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>fieldIndex</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="withWeekOfWeekyear">
    <id>org.joda.time.DateMidnight.withWeekOfWeekyear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weekOfWeekyear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="Partial">
    <id>org.joda.time.Partial.Partial( DateTimeFieldType int Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chronology</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="MutableInterval">
    <id>org.joda.time.MutableInterval.MutableInterval( ReadableInstant ReadableDuration )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isBefore">
    <id>org.joda.time.base.AbstractPartial.isBefore( ReadablePartial )</id>
    <exceptions>
      <e>ClassCastException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setMonths">
    <id>org.joda.time.MutablePeriod.setMonths( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>months</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withDayOfMonth">
    <id>org.joda.time.LocalDate.withDayOfMonth( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="add">
    <id>org.joda.time.MutablePeriod.add( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parsePeriod">
    <id>org.joda.time.format.PeriodFormatter.parsePeriod( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toStandardMinutes">
    <id>org.joda.time.Days.toStandardMinutes( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="withMillis">
    <id>org.joda.time.Period.withMillis( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="patternForStyle">
    <id>org.joda.time.format.DateTimeFormat.patternForStyle( String Locale )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>style</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="get">
    <id>org.joda.time.ReadableInstant.get( DateTimeFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="checkInterval">
    <id>org.joda.time.base.AbstractInterval.checkInterval( long long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>start</name>
      </param>
      <param>
        <type>long</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addIntervalConverter">
    <id>org.joda.time.convert.ConverterManager.addIntervalConverter( IntervalConverter )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>IntervalConverter</type>
        <name>converter</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toDuration">
    <id>org.joda.time.ReadableInterval.toDuration( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getFieldType">
    <id>org.joda.time.YearMonth.getFieldType( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getMillis">
    <id>org.joda.time.field.UnsupportedDurationField.getMillis( long long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>value</name>
      </param>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getValue">
    <id>org.joda.time.LocalDate.getValue( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withPeriodType">
    <id>org.joda.time.Period.withPeriodType( PeriodType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>PeriodType</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getMaximumTextLength">
    <id>org.joda.time.field.UnsupportedDateTimeField.getMaximumTextLength( Locale )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="printTo">
    <id>org.joda.time.format.DateTimeFormatter.printTo( Appendable long Chronology )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Appendable</type>
        <name>appendable</name>
      </param>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getDurationMillis">
    <id>org.joda.time.convert.DurationConverter.getDurationMillis( Object )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setYear">
    <id>org.joda.time.ReadWritableDateTime.setYear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="negated">
    <id>org.joda.time.Weeks.negated( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="withYearOfCentury">
    <id>org.joda.time.DateMidnight.withYearOfCentury( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>yearOfCentury</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.Months.minus( Months )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>Months</type>
        <name>months</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="get">
    <id>org.joda.time.base.AbstractDateTime.get( DateTimeFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="add">
    <id>org.joda.time.field.UnsupportedDurationField.add( long int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="createFormatterForStyle">
    <id>org.joda.time.format.DateTimeFormat.createFormatterForStyle( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>style</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="BaseDuration">
    <id>org.joda.time.base.BaseDuration.BaseDuration( long long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>startInstant</name>
      </param>
      <param>
        <type>long</type>
        <name>endInstant</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addMonths">
    <id>org.joda.time.ReadWritableDateTime.addMonths( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>months</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="set">
    <id>org.joda.time.field.StrictDateTimeField.set( long int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="appendShortText">
    <id>org.joda.time.format.DateTimeFormatterBuilder.appendShortText( DateTimeFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="yearsBetween">
    <id>org.joda.time.Years.yearsBetween( ReadablePartial ReadablePartial )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadablePartial</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPartialValues">
    <id>org.joda.time.convert.AbstractConverter.getPartialValues( ReadablePartial Object Chronology )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>fieldSource</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setWeekOfWeekyear">
    <id>org.joda.time.MutableDateTime.setWeekOfWeekyear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weekOfWeekyear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getValue">
    <id>org.joda.time.DurationField.getValue( long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withFieldAdded">
    <id>org.joda.time.MonthDay.withFieldAdded( DurationFieldType int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>amount</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withDurationAdded">
    <id>org.joda.time.DateTime.withDurationAdded( long int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>durationToAdd</name>
      </param>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addWeeks">
    <id>org.joda.time.MutablePeriod.addWeeks( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weeks</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.Hours.plus( Hours )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>Hours</type>
        <name>hours</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setInto">
    <id>org.joda.time.convert.NullConverter.setInto( ReadWritableInterval Object Chronology )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadWritableInterval</type>
        <name>writableInterval</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="withYearOfCentury">
    <id>org.joda.time.LocalDate.withYearOfCentury( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>yearOfCentury</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="removeIntervalConverter">
    <id>org.joda.time.convert.ConverterManager.removeIntervalConverter( IntervalConverter )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>IntervalConverter</type>
        <name>converter</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getInstantMillis">
    <id>org.joda.time.convert.LongConverter.getInstantMillis( Object Chronology )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withWeekyear">
    <id>org.joda.time.DateTime.withWeekyear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weekyear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="mergePeriod">
    <id>org.joda.time.MutablePeriod.mergePeriod( ReadablePeriod )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="MutableInterval">
    <id>org.joda.time.MutableInterval.MutableInterval( Object )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>interval</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="appendSuffix">
    <id>org.joda.time.format.PeriodFormatterBuilder.appendSuffix( String[] String[] )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>String[]</type>
        <name>regularExpressions</name>
      </param>
      <param>
        <type>String[]</type>
        <name>suffixes</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withCenturyOfEra">
    <id>org.joda.time.LocalDate.withCenturyOfEra( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>centuryOfEra</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setEndMillis">
    <id>org.joda.time.MutableInterval.setEndMillis( long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>endInstant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setMillis">
    <id>org.joda.time.ReadWritablePeriod.setMillis( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withWeekyear">
    <id>org.joda.time.DateMidnight.withWeekyear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weekyear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setDays">
    <id>org.joda.time.MutablePeriod.setDays( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>days</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeZone">
    <id>org.joda.time.tz.ZoneInfoCompiler.writeZone( File DateTimeZoneBuilder DateTimeZone )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>outputDir</name>
      </param>
      <param>
        <type>DateTimeZoneBuilder</type>
        <name>builder</name>
      </param>
      <param>
        <type>DateTimeZone</type>
        <name>tz</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="appendLiteral">
    <id>org.joda.time.format.DateTimeFormatterBuilder.appendLiteral( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addMonths">
    <id>org.joda.time.ReadWritablePeriod.addMonths( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>months</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="weeksBetween">
    <id>org.joda.time.Weeks.weeksBetween( ReadablePartial ReadablePartial )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadablePartial</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="roundCeiling">
    <id>org.joda.time.field.UnsupportedDateTimeField.roundCeiling( long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="add">
    <id>org.joda.time.MutablePeriod.add( long Chronology )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>duration</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="compareTo">
    <id>org.joda.time.LocalDate.compareTo( ReadablePartial )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withField">
    <id>org.joda.time.LocalDate.withField( DateTimeFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withEra">
    <id>org.joda.time.LocalDate.withEra( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>era</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plusHours">
    <id>org.joda.time.Period.plusHours( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hours</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getValue">
    <id>org.joda.time.LocalDateTime.getValue( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isMatch">
    <id>org.joda.time.Partial.isMatch( ReadablePartial )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="DividedDateTimeField">
    <id>org.joda.time.field.DividedDateTimeField.DividedDateTimeField( DateTimeField DurationField DateTimeFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeField</type>
        <name>field</name>
      </param>
      <param>
        <type>DurationField</type>
        <name>rangeField</name>
      </param>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
      <param>
        <type>int</type>
        <name>divisor</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.Days.plus( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>days</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="fromCalendarFields">
    <id>org.joda.time.YearMonth.fromCalendarFields( Calendar )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Calendar</type>
        <name>calendar</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="printTo">
    <id>org.joda.time.format.InternalPrinter.printTo( Appendable ReadablePartial Locale )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Appendable</type>
        <name>appendable</name>
      </param>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getValue">
    <id>org.joda.time.ReadablePartial.getValue( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toStandardDays">
    <id>org.joda.time.Weeks.toStandardDays( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.Period.plus( ReadablePeriod )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="negated">
    <id>org.joda.time.Days.negated( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="safeToInt">
    <id>org.joda.time.field.FieldUtils.safeToInt( long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDateTimeMillis">
    <id>org.joda.time.chrono.ZonedChronology.getDateTimeMillis( int int int int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
      <param>
        <type>int</type>
        <name>hourOfDay</name>
      </param>
      <param>
        <type>int</type>
        <name>minuteOfHour</name>
      </param>
      <param>
        <type>int</type>
        <name>secondOfMinute</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfSecond</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="add">
    <id>org.joda.time.MutableDateTime.add( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setWeeks">
    <id>org.joda.time.MutablePeriod.setWeeks( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weeks</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setDayOfMonth">
    <id>org.joda.time.ReadWritableDateTime.setDayOfMonth( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="safeAdd">
    <id>org.joda.time.field.FieldUtils.safeAdd( long long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>val1</name>
      </param>
      <param>
        <type>long</type>
        <name>val2</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="appendUnknownString">
    <id>org.joda.time.format.DateTimeFormatterBuilder.appendUnknownString( Appendable int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Appendable</type>
        <name>appendable</name>
      </param>
      <param>
        <type>int</type>
        <name>len</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="append">
    <id>org.joda.time.format.PeriodFormatterBuilder.append( PeriodPrinter PeriodParser )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>PeriodPrinter</type>
        <name>printer</name>
      </param>
      <param>
        <type>PeriodParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="add">
    <id>org.joda.time.MutableDateTime.add( ReadableDuration int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getChronology">
    <id>org.joda.time.convert.PartialConverter.getChronology( Object DateTimeZone )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>DateTimeZone</type>
        <name>zone</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="Interval">
    <id>org.joda.time.Interval.Interval( ReadableInstant ReadableDuration )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="RemainderDateTimeField">
    <id>org.joda.time.field.RemainderDateTimeField.RemainderDateTimeField( DateTimeField DurationField DateTimeFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeField</type>
        <name>field</name>
      </param>
      <param>
        <type>DurationField</type>
        <name>rangeField</name>
      </param>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
      <param>
        <type>int</type>
        <name>divisor</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="add">
    <id>org.joda.time.MutablePeriod.add( ReadableDuration )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addMillis">
    <id>org.joda.time.MutablePeriod.addMillis( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setMinuteOfDay">
    <id>org.joda.time.ReadWritableDateTime.setMinuteOfDay( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>minuteOfDay</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="property">
    <id>org.joda.time.TimeOfDay.property( DateTimeFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setSecondOfDay">
    <id>org.joda.time.ReadWritableDateTime.setSecondOfDay( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>secondOfDay</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withMillisOfSecond">
    <id>org.joda.time.TimeOfDay.withMillisOfSecond( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="verifyValueBounds">
    <id>org.joda.time.field.FieldUtils.verifyValueBounds( String int int int )</id>
    <exceptions>
      <e>IllegalFieldValueException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>fieldName</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>lowerBound</name>
      </param>
      <param>
        <type>int</type>
        <name>upperBound</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="DateMidnight">
    <id>org.joda.time.DateMidnight.DateMidnight( Object DateTimeZone )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
      <param>
        <type>DateTimeZone</type>
        <name>zone</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="toDuration">
    <id>org.joda.time.base.AbstractInterval.toDuration( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getAsShortText">
    <id>org.joda.time.field.UnsupportedDateTimeField.getAsShortText( ReadablePartial Locale )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="toString">
    <id>org.joda.time.MonthDay.toString( String Locale )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>pattern</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addSeconds">
    <id>org.joda.time.MutablePeriod.addSeconds( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>seconds</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="printTo">
    <id>org.joda.time.format.DateTimeFormatter.printTo( Writer ReadableInstant )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Writer</type>
        <name>out</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>instant</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="forFields">
    <id>org.joda.time.format.ISODateTimeFormat.forFields( Collection boolean boolean )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Collection</type>
        <name>fields</name>
      </param>
      <param>
        <type>boolean</type>
        <name>extended</name>
      </param>
      <param>
        <type>boolean</type>
        <name>strictISO</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="withChronologyRetainFields">
    <id>org.joda.time.TimeOfDay.withChronologyRetainFields( Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Chronology</type>
        <name>newChronology</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="set">
    <id>org.joda.time.field.OffsetDateTimeField.set( long int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withYearOfEra">
    <id>org.joda.time.LocalDateTime.withYearOfEra( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>yearOfEra</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withDayOfMonth">
    <id>org.joda.time.MonthDay.withDayOfMonth( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="removeInstantConverter">
    <id>org.joda.time.convert.ConverterManager.removeInstantConverter( InstantConverter )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>InstantConverter</type>
        <name>converter</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addFieldInto">
    <id>org.joda.time.base.BasePeriod.addFieldInto( int[] DurationFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
      <param>
        <type>DurationFieldType</type>
        <name>field</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.Partial.plus( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toPrinter">
    <id>org.joda.time.format.DateTimeFormatterBuilder.toPrinter( )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getDurationMillis">
    <id>org.joda.time.convert.ReadableDurationConverter.getDurationMillis( Object )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ClassCastException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addHours">
    <id>org.joda.time.ReadWritablePeriod.addHours( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hours</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withDayOfYear">
    <id>org.joda.time.LocalDate.withDayOfYear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>dayOfYear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minusDays">
    <id>org.joda.time.Period.minusDays( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>days</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setTime">
    <id>org.joda.time.MutableDateTime.setTime( int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hour</name>
      </param>
      <param>
        <type>int</type>
        <name>minuteOfHour</name>
      </param>
      <param>
        <type>int</type>
        <name>secondOfMinute</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfSecond</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="addPeriod">
    <id>org.joda.time.base.BasePeriod.addPeriod( ReadablePeriod )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withDurationAdded">
    <id>org.joda.time.DateMidnight.withDurationAdded( ReadableDuration int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>durationToAdd</name>
      </param>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="dividedBy">
    <id>org.joda.time.Weeks.dividedBy( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>divisor</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setMillisOfSecond">
    <id>org.joda.time.MutableDateTime.setMillisOfSecond( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>millisOfSecond</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="set">
    <id>org.joda.time.ReadWritablePeriod.set( DurationFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationFieldType</type>
        <name>field</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getChronology">
    <id>org.joda.time.convert.CalendarConverter.getChronology( Object Chronology )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getInstantMillis">
    <id>org.joda.time.convert.StringConverter.getInstantMillis( Object Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="monthsBetween">
    <id>org.joda.time.Months.monthsBetween( ReadableInstant ReadableInstant )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="add">
    <id>org.joda.time.MutableDateTime.add( ReadablePeriod int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getField">
    <id>org.joda.time.base.AbstractPartial.getField( int Chronology )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getValueAsLong">
    <id>org.joda.time.field.UnsupportedDurationField.getValueAsLong( long long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>duration</name>
      </param>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setInterval">
    <id>org.joda.time.MutableInterval.setInterval( ReadableInstant ReadableInstant )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="BasePartial">
    <id>org.joda.time.base.BasePartial.BasePartial( Object Chronology DateTimeFormatter )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chronology</name>
      </param>
      <param>
        <type>DateTimeFormatter</type>
        <name>parser</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="withMinuteOfHour">
    <id>org.joda.time.DateTime.withMinuteOfHour( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>minute</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="negated">
    <id>org.joda.time.Period.negated( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="withYears">
    <id>org.joda.time.Period.withYears( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>years</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="fromCalendarFields">
    <id>org.joda.time.LocalDate.fromCalendarFields( Calendar )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Calendar</type>
        <name>calendar</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.DateMidnight.minus( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minusMinutes">
    <id>org.joda.time.Period.minusMinutes( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>minutes</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toStandardMinutes">
    <id>org.joda.time.Period.toStandardMinutes( )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="addField">
    <id>org.joda.time.base.BasePeriod.addField( DurationFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationFieldType</type>
        <name>field</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withField">
    <id>org.joda.time.YearMonthDay.withField( DateTimeFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withDurationBeforeEnd">
    <id>org.joda.time.Interval.withDurationBeforeEnd( ReadableDuration )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="get">
    <id>org.joda.time.LocalDateTime.get( DateTimeFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="BasePeriod">
    <id>org.joda.time.base.BasePeriod.BasePeriod( ReadablePartial ReadablePartial PeriodType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadablePartial</type>
        <name>end</name>
      </param>
      <param>
        <type>PeriodType</type>
        <name>type</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getInstance">
    <id>org.joda.time.chrono.ZonedChronology.getInstance( Chronology DateTimeZone )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Chronology</type>
        <name>base</name>
      </param>
      <param>
        <type>DateTimeZone</type>
        <name>zone</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getMaximumValue">
    <id>org.joda.time.field.UnsupportedDateTimeField.getMaximumValue( ReadablePartial int[] )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>instant</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="printTo">
    <id>org.joda.time.format.DateTimePrinter.printTo( Writer ReadablePartial Locale )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Writer</type>
        <name>out</name>
      </param>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.DateMidnight.minus( long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setCurrentMillisProvider">
    <id>org.joda.time.DateTimeUtils.setCurrentMillisProvider( MillisProvider )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>MillisProvider</type>
        <name>millisProvider</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="add">
    <id>org.joda.time.ReadWritablePeriod.add( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getWrappedValue">
    <id>org.joda.time.field.FieldUtils.getWrappedValue( int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>currentValue</name>
      </param>
      <param>
        <type>int</type>
        <name>wrapValue</name>
      </param>
      <param>
        <type>int</type>
        <name>minValue</name>
      </param>
      <param>
        <type>int</type>
        <name>maxValue</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="addDays">
    <id>org.joda.time.MutableDateTime.addDays( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>days</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="OffsetDateTimeField">
    <id>org.joda.time.field.OffsetDateTimeField.OffsetDateTimeField( DateTimeField int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeField</type>
        <name>field</name>
      </param>
      <param>
        <type>int</type>
        <name>offset</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setEnd">
    <id>org.joda.time.MutableInterval.setEnd( ReadableInstant )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>end</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withDurationAdded">
    <id>org.joda.time.Instant.withDurationAdded( ReadableDuration int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>durationToAdd</name>
      </param>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="append">
    <id>org.joda.time.format.DateTimeFormatterBuilder.append( DateTimePrinter DateTimeParser )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimePrinter</type>
        <name>printer</name>
      </param>
      <param>
        <type>DateTimeParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="dividedBy">
    <id>org.joda.time.Days.dividedBy( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>divisor</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="standardSecondsIn">
    <id>org.joda.time.Seconds.standardSecondsIn( ReadablePeriod )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="hoursIn">
    <id>org.joda.time.Hours.hoursIn( ReadableInterval )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInterval</type>
        <name>interval</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="loadZoneInfoMap">
    <id>org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap( InputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>InputStream</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getInstantMillis">
    <id>org.joda.time.convert.DateConverter.getInstantMillis( Object Chronology )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setWeeks">
    <id>org.joda.time.ReadWritablePeriod.setWeeks( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weeks</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.DateMidnight.plus( long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDateTimeMillis">
    <id>org.joda.time.chrono.GJChronology.getDateTimeMillis( int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfDay</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="withFieldAdded">
    <id>org.joda.time.YearMonth.withFieldAdded( DurationFieldType int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>amount</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="appendFraction">
    <id>org.joda.time.format.DateTimeFormatterBuilder.appendFraction( DateTimeFieldType int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>minDigits</name>
      </param>
      <param>
        <type>int</type>
        <name>maxDigits</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getDurationConverter">
    <id>org.joda.time.convert.ConverterManager.getDurationConverter( Object )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPartialValues">
    <id>org.joda.time.convert.PartialConverter.getPartialValues( ReadablePartial Object Chronology )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>fieldSource</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setInto">
    <id>org.joda.time.convert.ReadableDurationConverter.setInto( ReadWritablePeriod Object Chronology )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ClassCastException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadWritablePeriod</type>
        <name>writablePeriod</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.LocalTime.plus( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="YearMonth">
    <id>org.joda.time.YearMonth.YearMonth( Object )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="add">
    <id>org.joda.time.field.UnsupportedDateTimeField.add( ReadablePartial int int[] int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>fieldIndex</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
      <param>
        <type>int</type>
        <name>valueToAdd</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="withDurationAdded">
    <id>org.joda.time.LocalDateTime.withDurationAdded( ReadableDuration int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>durationToAdd</name>
      </param>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="printTo">
    <id>org.joda.time.format.DateTimeFormatter.printTo( Appendable ReadableInstant )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Appendable</type>
        <name>appendable</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>instant</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.DateTime.minus( ReadableDuration )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="TimeOfDay">
    <id>org.joda.time.TimeOfDay.TimeOfDay( Object )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="BasePeriod">
    <id>org.joda.time.base.BasePeriod.BasePeriod( ReadableInstant ReadableInstant PeriodType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>startInstant</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>endInstant</name>
      </param>
      <param>
        <type>PeriodType</type>
        <name>type</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="isEqual">
    <id>org.joda.time.base.AbstractPartial.isEqual( ReadablePartial )</id>
    <exceptions>
      <e>ClassCastException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="compareTo">
    <id>org.joda.time.base.AbstractDuration.compareTo( ReadableDuration )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>other</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="appendSeparator">
    <id>org.joda.time.format.PeriodFormatterBuilder.appendSeparator( String )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toString">
    <id>org.joda.time.LocalDateTime.toString( String Locale )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>pattern</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="printTo">
    <id>org.joda.time.format.InternalPrinter.printTo( Appendable long Chronology int DateTimeZone Locale )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Appendable</type>
        <name>appendable</name>
      </param>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
      <param>
        <type>int</type>
        <name>displayOffset</name>
      </param>
      <param>
        <type>DateTimeZone</type>
        <name>displayZone</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="toStandardSeconds">
    <id>org.joda.time.Period.toStandardSeconds( )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="MonthDay">
    <id>org.joda.time.MonthDay.MonthDay( Object )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getFieldType">
    <id>org.joda.time.base.AbstractPeriod.getFieldType( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="ZoneInfoProvider">
    <id>org.joda.time.tz.ZoneInfoProvider.ZoneInfoProvider( String ClassLoader )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>resourcePath</name>
      </param>
      <param>
        <type>ClassLoader</type>
        <name>loader</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="MutableInterval">
    <id>org.joda.time.MutableInterval.MutableInterval( ReadableInstant ReadableInstant )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="BaseDuration">
    <id>org.joda.time.base.BaseDuration.BaseDuration( ReadableInstant ReadableInstant )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.Days.plus( Days )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>Days</type>
        <name>days</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="between">
    <id>org.joda.time.base.BaseSingleFieldPeriod.between( ReadablePartial ReadablePartial ReadablePeriod )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadablePartial</type>
        <name>end</name>
      </param>
      <param>
        <type>ReadablePeriod</type>
        <name>zeroInstance</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="toFormatter">
    <id>org.joda.time.format.DateTimeFormatterBuilder.toFormatter( )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="withField">
    <id>org.joda.time.TimeOfDay.withField( DateTimeFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDateTimeMillis">
    <id>org.joda.time.chrono.LimitChronology.getDateTimeMillis( int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfDay</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="set">
    <id>org.joda.time.MutableDateTime.set( DateTimeFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="BaseDuration">
    <id>org.joda.time.base.BaseDuration.BaseDuration( Object )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setInterval">
    <id>org.joda.time.ReadWritableInterval.setInterval( ReadableInstant ReadableInstant )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>startInstant</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>endInstant</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="forID">
    <id>org.joda.time.DateTimeZone.forID( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withFields">
    <id>org.joda.time.LocalDateTime.withFields( ReadablePartial )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withFieldAdded">
    <id>org.joda.time.Partial.withFieldAdded( DurationFieldType int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>amount</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="add">
    <id>org.joda.time.convert.ConverterSet.add( Converter Converter[] )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>Converter</type>
        <name>converter</name>
      </param>
      <param>
        <type>Converter[]</type>
        <name>removed</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="Partial">
    <id>org.joda.time.Partial.Partial( DateTimeFieldType[] int[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType[]</type>
        <name>types</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="set">
    <id>org.joda.time.field.BaseDateTimeField.set( long int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setPeriod">
    <id>org.joda.time.MutablePeriod.setPeriod( ReadableInterval )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInterval</type>
        <name>interval</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addMinutes">
    <id>org.joda.time.ReadWritableDateTime.addMinutes( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>minutes</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withFieldAdded">
    <id>org.joda.time.LocalDateTime.withFieldAdded( DurationFieldType int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>amount</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setMillisOfSecond">
    <id>org.joda.time.ReadWritableDateTime.setMillisOfSecond( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>millisOfSecond</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDateTimeMillis">
    <id>org.joda.time.chrono.AssembledChronology.getDateTimeMillis( int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfDay</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="Period">
    <id>org.joda.time.Period.Period( Object )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="standardSeconds">
    <id>org.joda.time.Duration.standardSeconds( long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>seconds</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="OffsetDateTimeField">
    <id>org.joda.time.field.OffsetDateTimeField.OffsetDateTimeField( DateTimeField DateTimeFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeField</type>
        <name>field</name>
      </param>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
      <param>
        <type>int</type>
        <name>offset</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="remove">
    <id>org.joda.time.convert.ConverterSet.remove( Converter Converter[] )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>Converter</type>
        <name>converter</name>
      </param>
      <param>
        <type>Converter[]</type>
        <name>removed</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="verifyValueBounds">
    <id>org.joda.time.field.FieldUtils.verifyValueBounds( DateTimeField int int int )</id>
    <exceptions>
      <e>IllegalFieldValueException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeField</type>
        <name>field</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>lowerBound</name>
      </param>
      <param>
        <type>int</type>
        <name>upperBound</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="minusSeconds">
    <id>org.joda.time.Period.minusSeconds( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>seconds</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="append">
    <id>org.joda.time.format.DateTimeFormatterBuilder.append( DateTimeParser )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.DateMidnight.plus( ReadableDuration )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="MonthDay">
    <id>org.joda.time.MonthDay.MonthDay( Object Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chronology</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="fromCalendarFields">
    <id>org.joda.time.LocalTime.fromCalendarFields( Calendar )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Calendar</type>
        <name>calendar</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setDayOfYear">
    <id>org.joda.time.MutableDateTime.setDayOfYear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>dayOfYear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseMillis">
    <id>org.joda.time.format.DateTimeFormatter.parseMillis( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withMonthOfYear">
    <id>org.joda.time.DateMidnight.withMonthOfYear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setValue">
    <id>org.joda.time.base.BasePartial.setValue( int int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="multipliedBy">
    <id>org.joda.time.Hours.multipliedBy( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addMillis">
    <id>org.joda.time.ReadWritableDateTime.addMillis( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toDurationMillis">
    <id>org.joda.time.base.AbstractInterval.toDurationMillis( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="isAfter">
    <id>org.joda.time.base.AbstractPartial.isAfter( ReadablePartial )</id>
    <exceptions>
      <e>ClassCastException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withFieldAdded">
    <id>org.joda.time.TimeOfDay.withFieldAdded( DurationFieldType int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>amount</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.DateTime.minus( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.LocalDate.plus( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="yearsIn">
    <id>org.joda.time.Years.yearsIn( ReadableInterval )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInterval</type>
        <name>interval</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withMonthOfYear">
    <id>org.joda.time.LocalDate.withMonthOfYear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withPeriodAdded">
    <id>org.joda.time.LocalDateTime.withPeriodAdded( ReadablePeriod int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="requirePrinter">
    <id>org.joda.time.format.DateTimeFormatter.requirePrinter( )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="toFormatter">
    <id>org.joda.time.format.PeriodFormatterBuilder.toFormatter( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="Period">
    <id>org.joda.time.Period.Period( Object PeriodType Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>period</name>
      </param>
      <param>
        <type>PeriodType</type>
        <name>type</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.LocalDateTime.minus( ReadableDuration )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="ScaledDurationField">
    <id>org.joda.time.field.ScaledDurationField.ScaledDurationField( DurationField DurationFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationField</type>
        <name>field</name>
      </param>
      <param>
        <type>DurationFieldType</type>
        <name>type</name>
      </param>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="MutablePeriod">
    <id>org.joda.time.MutablePeriod.MutablePeriod( Object PeriodType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>period</name>
      </param>
      <param>
        <type>PeriodType</type>
        <name>type</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setDate">
    <id>org.joda.time.ReadWritableDateTime.setDate( int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="yearsBetween">
    <id>org.joda.time.Years.yearsBetween( ReadableInstant ReadableInstant )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setMinuteOfHour">
    <id>org.joda.time.ReadWritableDateTime.setMinuteOfHour( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>minuteOfHour</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="DateTimeZone">
    <id>org.joda.time.DateTimeZone.DateTimeZone( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>id</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.TimeOfDay.minus( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseMinutes">
    <id>org.joda.time.Minutes.parseMinutes( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>periodStr</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withYear">
    <id>org.joda.time.DateMidnight.withYear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setInto">
    <id>org.joda.time.convert.StringConverter.setInto( ReadWritablePeriod Object Chronology )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadWritablePeriod</type>
        <name>period</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="safeDivide">
    <id>org.joda.time.field.FieldUtils.safeDivide( long long RoundingMode )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>dividend</name>
      </param>
      <param>
        <type>long</type>
        <name>divisor</name>
      </param>
      <param>
        <type>RoundingMode</type>
        <name>roundingMode</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="createFormatterForPattern">
    <id>org.joda.time.format.DateTimeFormat.createFormatterForPattern( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>pattern</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="printTo">
    <id>org.joda.time.format.DateTimeFormatter.printTo( Writer ReadablePartial )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Writer</type>
        <name>out</name>
      </param>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseInto">
    <id>org.joda.time.format.PeriodParser.parseInto( ReadWritablePeriod String int Locale )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadWritablePeriod</type>
        <name>period</name>
      </param>
      <param>
        <type>String</type>
        <name>periodStr</name>
      </param>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setCurrentMillisFixed">
    <id>org.joda.time.DateTimeUtils.setCurrentMillisFixed( long )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>fixedMillis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addWeeks">
    <id>org.joda.time.MutableDateTime.addWeeks( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weeks</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="set">
    <id>org.joda.time.DateTimeField.set( ReadablePartial int int[] int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>fieldIndex</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
      <param>
        <type>int</type>
        <name>newValue</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="withMillisOfDay">
    <id>org.joda.time.LocalDateTime.withMillisOfDay( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withPeriodBeforeEnd">
    <id>org.joda.time.Interval.withPeriodBeforeEnd( ReadablePeriod )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="Interval">
    <id>org.joda.time.Interval.Interval( ReadableDuration ReadableInstant )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="normalizedStandard">
    <id>org.joda.time.Period.normalizedStandard( PeriodType )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>PeriodType</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="add">
    <id>org.joda.time.ReadWritableInstant.add( ReadablePeriod int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="weeksBetween">
    <id>org.joda.time.Weeks.weeksBetween( ReadableInstant ReadableInstant )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setWeekyear">
    <id>org.joda.time.ReadWritableDateTime.setWeekyear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weekyear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withDurationAdded">
    <id>org.joda.time.DateMidnight.withDurationAdded( long int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>durationToAdd</name>
      </param>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withWeekyear">
    <id>org.joda.time.LocalDateTime.withWeekyear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weekyear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setInto">
    <id>org.joda.time.convert.ReadablePeriodConverter.setInto( ReadWritablePeriod Object Chronology )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ClassCastException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadWritablePeriod</type>
        <name>duration</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.DateMidnight.plus( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="validateProvider">
    <id>org.joda.time.DateTimeZone.validateProvider( Provider )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Provider</type>
        <name>provider</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDateTimeMillis">
    <id>org.joda.time.chrono.ZonedChronology.getDateTimeMillis( long int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>hourOfDay</name>
      </param>
      <param>
        <type>int</type>
        <name>minuteOfHour</name>
      </param>
      <param>
        <type>int</type>
        <name>secondOfMinute</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfSecond</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="checkAlterIntervalConverters">
    <id>org.joda.time.convert.ConverterManager.checkAlterIntervalConverters( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="addWrapPartial">
    <id>org.joda.time.DateTimeField.addWrapPartial( ReadablePartial int int[] int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>fieldIndex</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
      <param>
        <type>int</type>
        <name>valueToAdd</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setMinutes">
    <id>org.joda.time.MutablePeriod.setMinutes( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>minutes</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setMonths">
    <id>org.joda.time.ReadWritablePeriod.setMonths( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>months</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="negated">
    <id>org.joda.time.Seconds.negated( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="plusWeeks">
    <id>org.joda.time.Period.plusWeeks( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weeks</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minusHours">
    <id>org.joda.time.Period.minusHours( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hours</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setInto">
    <id>org.joda.time.convert.NullConverter.setInto( ReadWritablePeriod Object Chronology )</id>
    <exceptions>
      <e>NullPointerException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadWritablePeriod</type>
        <name>duration</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="MutableInterval">
    <id>org.joda.time.MutableInterval.MutableInterval( ReadableInstant ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="MutablePeriod">
    <id>org.joda.time.MutablePeriod.MutablePeriod( Object PeriodType Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>period</name>
      </param>
      <param>
        <type>PeriodType</type>
        <name>type</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.TimeOfDay.plus( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getField">
    <id>org.joda.time.Partial.getField( int Chronology )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="between">
    <id>org.joda.time.base.BaseSingleFieldPeriod.between( ReadableInstant ReadableInstant DurationFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>end</name>
      </param>
      <param>
        <type>DurationFieldType</type>
        <name>field</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="safeMultiply">
    <id>org.joda.time.field.FieldUtils.safeMultiply( int int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>val1</name>
      </param>
      <param>
        <type>int</type>
        <name>val2</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setStart">
    <id>org.joda.time.MutableInterval.setStart( ReadableInstant )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>start</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addIndexedField">
    <id>org.joda.time.PeriodType.addIndexedField( ReadablePeriod int int[] int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
      <param>
        <type>int</type>
        <name>valueToAdd</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="printTo">
    <id>org.joda.time.format.InternalPrinterDateTimePrinter.printTo( Appendable ReadablePartial Locale )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Appendable</type>
        <name>appendable</name>
      </param>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="dividedBy">
    <id>org.joda.time.Hours.dividedBy( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>divisor</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="PreciseDateTimeField">
    <id>org.joda.time.field.PreciseDateTimeField.PreciseDateTimeField( DateTimeFieldType DurationField DurationField )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
      <param>
        <type>DurationField</type>
        <name>unit</name>
      </param>
      <param>
        <type>DurationField</type>
        <name>range</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setPeriod">
    <id>org.joda.time.MutablePeriod.setPeriod( long long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>startInstant</name>
      </param>
      <param>
        <type>long</type>
        <name>endInstant</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="clearPrefix">
    <id>org.joda.time.format.PeriodFormatterBuilder.clearPrefix( )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="YearMonthDay">
    <id>org.joda.time.YearMonthDay.YearMonthDay( Object Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chronology</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseInto">
    <id>org.joda.time.format.DateTimeFormatter.parseInto( ReadWritableInstant String int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadWritableInstant</type>
        <name>instant</name>
      </param>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="forStyle">
    <id>org.joda.time.format.DateTimeFormat.forStyle( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>style</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="weeksIn">
    <id>org.joda.time.Weeks.weeksIn( ReadableInterval )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInterval</type>
        <name>interval</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="DateTime">
    <id>org.joda.time.DateTime.DateTime( Object )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getValue">
    <id>org.joda.time.Partial.getValue( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toDateTime">
    <id>org.joda.time.LocalDateTime.toDateTime( )</id>
    <exceptions>
      <e>IllegalInstantException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="withSecondOfMinute">
    <id>org.joda.time.LocalDateTime.withSecondOfMinute( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>second</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="LocalTime">
    <id>org.joda.time.LocalTime.LocalTime( Object DateTimeZone )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
      <param>
        <type>DateTimeZone</type>
        <name>zone</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDateMidnightMillis">
    <id>org.joda.time.chrono.JulianChronology.getDateMidnightMillis( int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="writePaddedInteger">
    <id>org.joda.time.format.FormatUtils.writePaddedInteger( Writer long int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Writer</type>
        <name>out</name>
      </param>
      <param>
        <type>long</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="withHourOfDay">
    <id>org.joda.time.LocalTime.withHourOfDay( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hour</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="property">
    <id>org.joda.time.YearMonthDay.property( DateTimeFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addWeekyears">
    <id>org.joda.time.MutableDateTime.addWeekyears( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weekyears</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plusDays">
    <id>org.joda.time.Period.plusDays( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>days</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="BaseInterval">
    <id>org.joda.time.base.BaseInterval.BaseInterval( ReadableDuration ReadableInstant )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parsePatternTo">
    <id>org.joda.time.format.DateTimeFormat.parsePatternTo( DateTimeFormatterBuilder String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFormatterBuilder</type>
        <name>builder</name>
      </param>
      <param>
        <type>String</type>
        <name>pattern</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setDefault">
    <id>org.joda.time.DateTimeZone.setDefault( DateTimeZone )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeZone</type>
        <name>zone</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.Days.minus( Days )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>Days</type>
        <name>days</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addWrapField">
    <id>org.joda.time.field.BaseDateTimeField.addWrapField( ReadablePartial int int[] int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>fieldIndex</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
      <param>
        <type>int</type>
        <name>valueToAdd</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="set">
    <id>org.joda.time.DateTimeField.set( long String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addHours">
    <id>org.joda.time.MutablePeriod.addHours( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hours</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.DateTime.plus( long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAsText">
    <id>org.joda.time.field.UnsupportedDateTimeField.getAsText( ReadablePartial Locale )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getFieldType">
    <id>org.joda.time.base.BaseSingleFieldPeriod.getFieldType( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addYears">
    <id>org.joda.time.ReadWritableDateTime.addYears( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>years</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="hoursBetween">
    <id>org.joda.time.Hours.hoursBetween( ReadableInstant ReadableInstant )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.Seconds.plus( Seconds )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>Seconds</type>
        <name>seconds</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withPeriodAdded">
    <id>org.joda.time.LocalDate.withPeriodAdded( ReadablePeriod int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="remove">
    <id>org.joda.time.convert.ConverterSet.remove( int Converter[] )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>Converter[]</type>
        <name>removed</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withYearOfEra">
    <id>org.joda.time.DateMidnight.withYearOfEra( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>yearOfEra</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setDurationAfterStart">
    <id>org.joda.time.MutableInterval.setDurationAfterStart( ReadableDuration )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDateTimeMillis">
    <id>org.joda.time.chrono.AssembledChronology.getDateTimeMillis( long int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>hourOfDay</name>
      </param>
      <param>
        <type>int</type>
        <name>minuteOfHour</name>
      </param>
      <param>
        <type>int</type>
        <name>secondOfMinute</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfSecond</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="getAsShortText">
    <id>org.joda.time.field.UnsupportedDateTimeField.getAsShortText( long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="multipliedBy">
    <id>org.joda.time.Seconds.multipliedBy( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="MutableInterval">
    <id>org.joda.time.MutableInterval.MutableInterval( Object Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>interval</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chronology</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withFields">
    <id>org.joda.time.Period.withFields( ReadablePeriod )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getMillis">
    <id>org.joda.time.field.UnsupportedDurationField.getMillis( int long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setSeconds">
    <id>org.joda.time.MutablePeriod.setSeconds( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>seconds</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="add">
    <id>org.joda.time.field.BaseDateTimeField.add( ReadablePartial int int[] int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>fieldIndex</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
      <param>
        <type>int</type>
        <name>valueToAdd</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="withCenturyOfEra">
    <id>org.joda.time.DateMidnight.withCenturyOfEra( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>centuryOfEra</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isReadableInterval">
    <id>org.joda.time.convert.ReadableIntervalConverter.isReadableInterval( Object Chronology )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setHours">
    <id>org.joda.time.MutablePeriod.setHours( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hours</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getValue">
    <id>org.joda.time.base.BasePartial.getValue( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withSecondOfMinute">
    <id>org.joda.time.TimeOfDay.withSecondOfMinute( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>second</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setStart">
    <id>org.joda.time.ReadWritableInterval.setStart( ReadableInstant )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="property">
    <id>org.joda.time.DateTime.property( DateTimeFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAsShortText">
    <id>org.joda.time.field.UnsupportedDateTimeField.getAsShortText( int Locale )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>fieldValue</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="printTo">
    <id>org.joda.time.format.DateTimePrinter.printTo( Writer long Chronology int DateTimeZone Locale )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Writer</type>
        <name>out</name>
      </param>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
      <param>
        <type>int</type>
        <name>displayOffset</name>
      </param>
      <param>
        <type>DateTimeZone</type>
        <name>displayZone</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="secondsBetween">
    <id>org.joda.time.Seconds.secondsBetween( ReadablePartial ReadablePartial )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadablePartial</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="fromDateFields">
    <id>org.joda.time.TimeOfDay.fromDateFields( Date )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Date</type>
        <name>date</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseMutablePeriod">
    <id>org.joda.time.format.PeriodFormatter.parseMutablePeriod( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="openResource">
    <id>org.joda.time.tz.ZoneInfoProvider.openResource( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>name</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.Weeks.minus( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weeks</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeTo">
    <id>org.joda.time.tz.DateTimeZoneBuilder.writeTo( String DataOutput )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>zoneID</name>
      </param>
      <param>
        <type>DataOutput</type>
        <name>out</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getFieldType">
    <id>org.joda.time.MonthDay.getFieldType( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setMonthOfYear">
    <id>org.joda.time.ReadWritableDateTime.setMonthOfYear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="fromCalendarFields">
    <id>org.joda.time.YearMonthDay.fromCalendarFields( Calendar )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Calendar</type>
        <name>calendar</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="YearMonth">
    <id>org.joda.time.YearMonth.YearMonth( Object Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chronology</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withDayOfMonth">
    <id>org.joda.time.YearMonthDay.withDayOfMonth( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withMinuteOfHour">
    <id>org.joda.time.TimeOfDay.withMinuteOfHour( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>minute</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="fromDateFields">
    <id>org.joda.time.MonthDay.fromDateFields( Date )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Date</type>
        <name>date</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDateTimeMillis">
    <id>org.joda.time.Chronology.getDateTimeMillis( int int int int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
      <param>
        <type>int</type>
        <name>hourOfDay</name>
      </param>
      <param>
        <type>int</type>
        <name>minuteOfHour</name>
      </param>
      <param>
        <type>int</type>
        <name>secondOfMinute</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfSecond</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="toParser">
    <id>org.joda.time.format.DateTimeFormatterBuilder.toParser( )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="withMinuteOfHour">
    <id>org.joda.time.LocalTime.withMinuteOfHour( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>minute</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plusMinutes">
    <id>org.joda.time.Period.plusMinutes( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>minutes</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withMillisOfSecond">
    <id>org.joda.time.LocalTime.withMillisOfSecond( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withDayOfMonth">
    <id>org.joda.time.DateTime.withDayOfMonth( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="set">
    <id>org.joda.time.chrono.GJYearOfEraDateTimeField.set( long int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="convertText">
    <id>org.joda.time.field.BaseDateTimeField.convertText( String Locale )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.Seconds.minus( Seconds )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>Seconds</type>
        <name>seconds</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="daysBetween">
    <id>org.joda.time.Days.daysBetween( ReadablePartial ReadablePartial )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadablePartial</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="compareTo">
    <id>org.joda.time.base.BaseSingleFieldPeriod.compareTo( BaseSingleFieldPeriod )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>BaseSingleFieldPeriod</type>
        <name>other</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPeriod">
    <id>org.joda.time.ReadWritablePeriod.setPeriod( int int int int int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>years</name>
      </param>
      <param>
        <type>int</type>
        <name>months</name>
      </param>
      <param>
        <type>int</type>
        <name>weeks</name>
      </param>
      <param>
        <type>int</type>
        <name>days</name>
      </param>
      <param>
        <type>int</type>
        <name>hours</name>
      </param>
      <param>
        <type>int</type>
        <name>minutes</name>
      </param>
      <param>
        <type>int</type>
        <name>seconds</name>
      </param>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
    </params>
    <arity>8</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.Instant.minus( long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="get">
    <id>org.joda.time.LocalDate.get( DateTimeFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="add">
    <id>org.joda.time.ReadWritablePeriod.add( ReadableInterval )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInterval</type>
        <name>interval</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="appendPrefix">
    <id>org.joda.time.format.PeriodFormatterBuilder.appendPrefix( String[] String[] )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>String[]</type>
        <name>regularExpressions</name>
      </param>
      <param>
        <type>String[]</type>
        <name>prefixes</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withChronologyRetainFields">
    <id>org.joda.time.YearMonth.withChronologyRetainFields( Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Chronology</type>
        <name>newChronology</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readObject">
    <id>org.joda.time.chrono.AssembledChronology.readObject( ObjectInputStream )</id>
    <exceptions>
      <e>IOException</e>
      <e>ClassNotFoundException</e>
    </exceptions>
    <params>
      <param>
        <type>ObjectInputStream</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withFields">
    <id>org.joda.time.LocalTime.withFields( ReadablePartial )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="set">
    <id>org.joda.time.field.UnsupportedDateTimeField.set( long int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.Weeks.plus( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weeks</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withYear">
    <id>org.joda.time.LocalDate.withYear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withWeekOfWeekyear">
    <id>org.joda.time.DateTime.withWeekOfWeekyear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weekOfWeekyear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toDurationMillis">
    <id>org.joda.time.ReadableInterval.toDurationMillis( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="forOffsetHours">
    <id>org.joda.time.DateTimeZone.forOffsetHours( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hoursOffset</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="LocalDate">
    <id>org.joda.time.LocalDate.LocalDate( Object )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withWeekOfWeekyear">
    <id>org.joda.time.LocalDateTime.withWeekOfWeekyear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weekOfWeekyear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withTime">
    <id>org.joda.time.LocalDateTime.withTime( int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hourOfDay</name>
      </param>
      <param>
        <type>int</type>
        <name>minuteOfHour</name>
      </param>
      <param>
        <type>int</type>
        <name>secondOfMinute</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfSecond</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="withDayOfWeek">
    <id>org.joda.time.DateTime.withDayOfWeek( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>dayOfWeek</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="LocalDateTime">
    <id>org.joda.time.LocalDateTime.LocalDateTime( Object )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="removePartialConverter">
    <id>org.joda.time.convert.ConverterManager.removePartialConverter( PartialConverter )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>PartialConverter</type>
        <name>converter</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setInterval">
    <id>org.joda.time.ReadWritableInterval.setInterval( ReadableInterval )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInterval</type>
        <name>interval</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.Minutes.plus( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>minutes</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addHours">
    <id>org.joda.time.ReadWritableDateTime.addHours( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hours</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getInstance">
    <id>org.joda.time.chrono.LimitChronology.getInstance( Chronology ReadableDateTime ReadableDateTime )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Chronology</type>
        <name>base</name>
      </param>
      <param>
        <type>ReadableDateTime</type>
        <name>lowerLimit</name>
      </param>
      <param>
        <type>ReadableDateTime</type>
        <name>upperLimit</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="checkPeriod">
    <id>org.joda.time.format.PeriodFormatter.checkPeriod( ReadablePeriod )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="add">
    <id>org.joda.time.MutablePeriod.add( int int int int int int int int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>years</name>
      </param>
      <param>
        <type>int</type>
        <name>months</name>
      </param>
      <param>
        <type>int</type>
        <name>weeks</name>
      </param>
      <param>
        <type>int</type>
        <name>days</name>
      </param>
      <param>
        <type>int</type>
        <name>hours</name>
      </param>
      <param>
        <type>int</type>
        <name>minutes</name>
      </param>
      <param>
        <type>int</type>
        <name>seconds</name>
      </param>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
    </params>
    <arity>8</arity>
  </method>
  <method name="parseDays">
    <id>org.joda.time.Days.parseDays( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>periodStr</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="appendFixedSignedDecimal">
    <id>org.joda.time.format.DateTimeFormatterBuilder.appendFixedSignedDecimal( DateTimeFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>numDigits</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.Years.plus( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>years</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDateTimeMillis">
    <id>org.joda.time.chrono.LimitChronology.getDateTimeMillis( int int int int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
      <param>
        <type>int</type>
        <name>hourOfDay</name>
      </param>
      <param>
        <type>int</type>
        <name>minuteOfHour</name>
      </param>
      <param>
        <type>int</type>
        <name>secondOfMinute</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfSecond</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="getMaximumValue">
    <id>org.joda.time.field.UnsupportedDateTimeField.getMaximumValue( )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setDurationBeforeEnd">
    <id>org.joda.time.MutableInterval.setDurationBeforeEnd( ReadableDuration )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withEnd">
    <id>org.joda.time.Interval.withEnd( ReadableInstant )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>end</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withPeriodAdded">
    <id>org.joda.time.MonthDay.withPeriodAdded( ReadablePeriod int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseDataFile">
    <id>org.joda.time.tz.ZoneInfoCompiler.parseDataFile( BufferedReader boolean )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>BufferedReader</type>
        <name>in</name>
      </param>
      <param>
        <type>boolean</type>
        <name>backward</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="MutableInterval">
    <id>org.joda.time.MutableInterval.MutableInterval( long long Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>startInstant</name>
      </param>
      <param>
        <type>long</type>
        <name>endInstant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chronology</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setFieldInto">
    <id>org.joda.time.base.BasePeriod.setFieldInto( int[] DurationFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
      <param>
        <type>DurationFieldType</type>
        <name>field</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="safeMultiplyToInt">
    <id>org.joda.time.field.FieldUtils.safeMultiplyToInt( long long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>val1</name>
      </param>
      <param>
        <type>long</type>
        <name>val2</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withDurationAdded">
    <id>org.joda.time.DateTime.withDurationAdded( ReadableDuration int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>durationToAdd</name>
      </param>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addSeconds">
    <id>org.joda.time.ReadWritableDateTime.addSeconds( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>seconds</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withDate">
    <id>org.joda.time.DateTime.withDate( LocalDate )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>LocalDate</type>
        <name>date</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPeriod">
    <id>org.joda.time.MutablePeriod.setPeriod( long Chronology )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>duration</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="multipliedBy">
    <id>org.joda.time.Period.multipliedBy( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toDurationTo">
    <id>org.joda.time.base.BasePeriod.toDurationTo( ReadableInstant )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>endInstant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAsText">
    <id>org.joda.time.field.UnsupportedDateTimeField.getAsText( long Locale )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setTime">
    <id>org.joda.time.MutableDateTime.setTime( long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>millis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setHours">
    <id>org.joda.time.ReadWritablePeriod.setHours( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hours</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setTime">
    <id>org.joda.time.ReadWritableDateTime.setTime( int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hour</name>
      </param>
      <param>
        <type>int</type>
        <name>minuteOfHour</name>
      </param>
      <param>
        <type>int</type>
        <name>secondOfMinute</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfSecond</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="checkPeriodType">
    <id>org.joda.time.base.BasePeriod.checkPeriodType( PeriodType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>PeriodType</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="validate">
    <id>org.joda.time.chrono.BaseChronology.validate( ReadablePartial int[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="fromCalendarFields">
    <id>org.joda.time.TimeOfDay.fromCalendarFields( Calendar )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Calendar</type>
        <name>calendar</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPeriod">
    <id>org.joda.time.MutablePeriod.setPeriod( ReadableInstant ReadableInstant )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="Period">
    <id>org.joda.time.Period.Period( ReadablePartial ReadablePartial PeriodType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadablePartial</type>
        <name>end</name>
      </param>
      <param>
        <type>PeriodType</type>
        <name>type</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setInterval">
    <id>org.joda.time.ReadWritableInterval.setInterval( long long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>startInstant</name>
      </param>
      <param>
        <type>long</type>
        <name>endInstant</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="appendDecimal">
    <id>org.joda.time.format.DateTimeFormatterBuilder.appendDecimal( DateTimeFieldType int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>minDigits</name>
      </param>
      <param>
        <type>int</type>
        <name>maxDigits</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="parseMillis">
    <id>org.joda.time.format.DateTimeParserBucket.parseMillis( DateTimeParser CharSequence )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeParser</type>
        <name>parser</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>text</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="set">
    <id>org.joda.time.field.BaseDateTimeField.set( ReadablePartial int int[] String Locale )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>fieldIndex</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="set">
    <id>org.joda.time.field.UnsupportedDateTimeField.set( long String Locale )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="Partial">
    <id>org.joda.time.Partial.Partial( DateTimeFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="monthsIn">
    <id>org.joda.time.Months.monthsIn( ReadableInterval )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInterval</type>
        <name>interval</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.Partial.minus( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="convertLocalToUTC">
    <id>org.joda.time.DateTimeZone.convertLocalToUTC( long boolean )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalInstantException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instantLocal</name>
      </param>
      <param>
        <type>boolean</type>
        <name>strict</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withSecondOfMinute">
    <id>org.joda.time.DateTime.withSecondOfMinute( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>second</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setMillisOfDay">
    <id>org.joda.time.ReadWritableDateTime.setMillisOfDay( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>millisOfDay</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setChronology">
    <id>org.joda.time.ReadWritableInstant.setChronology( Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Chronology</type>
        <name>chronology</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeMillis">
    <id>org.joda.time.tz.DateTimeZoneBuilder.writeMillis( DataOutput long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataOutput</type>
        <name>out</name>
      </param>
      <param>
        <type>long</type>
        <name>millis</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="add">
    <id>org.joda.time.DateTimeField.add( ReadablePartial int int[] int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>fieldIndex</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
      <param>
        <type>int</type>
        <name>valueToAdd</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="withEndMillis">
    <id>org.joda.time.Interval.withEndMillis( long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>endInstant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withPeriodAfterStart">
    <id>org.joda.time.Interval.withPeriodAfterStart( ReadablePeriod )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setDate">
    <id>org.joda.time.MutableDateTime.setDate( int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="withHours">
    <id>org.joda.time.Period.withHours( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hours</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="Period">
    <id>org.joda.time.Period.Period( ReadablePartial ReadablePartial )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadablePartial</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withYear">
    <id>org.joda.time.YearMonth.withYear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setMonthOfYear">
    <id>org.joda.time.MutableDateTime.setMonthOfYear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withDayOfMonth">
    <id>org.joda.time.DateMidnight.withDayOfMonth( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addPartialConverter">
    <id>org.joda.time.convert.ConverterManager.addPartialConverter( PartialConverter )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>PartialConverter</type>
        <name>converter</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="computeMillis">
    <id>org.joda.time.format.DateTimeParserBucket.computeMillis( )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.Hours.minus( Hours )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>Hours</type>
        <name>hours</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withTime">
    <id>org.joda.time.DateTime.withTime( LocalTime )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>LocalTime</type>
        <name>time</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.Minutes.plus( Minutes )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>Minutes</type>
        <name>minutes</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="negated">
    <id>org.joda.time.Minutes.negated( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="add">
    <id>org.joda.time.ReadWritableInstant.add( ReadableDuration int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="compareTo">
    <id>org.joda.time.field.AbstractPartialFieldProperty.compareTo( ReadablePartial )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="appendPatternTo">
    <id>org.joda.time.format.DateTimeFormat.appendPatternTo( DateTimeFormatterBuilder String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFormatterBuilder</type>
        <name>builder</name>
      </param>
      <param>
        <type>String</type>
        <name>pattern</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="add">
    <id>org.joda.time.MutablePeriod.add( ReadableInterval )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInterval</type>
        <name>interval</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="monthsBetween">
    <id>org.joda.time.Months.monthsBetween( ReadablePartial ReadablePartial )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadablePartial</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="toLocalDateTime">
    <id>org.joda.time.LocalDate.toLocalDateTime( LocalTime )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>LocalTime</type>
        <name>time</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withYearOfCentury">
    <id>org.joda.time.DateTime.withYearOfCentury( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>yearOfCentury</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setDate">
    <id>org.joda.time.MutableDateTime.setDate( long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDateTimeMillis">
    <id>org.joda.time.chrono.ZonedChronology.getDateTimeMillis( int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfDay</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="MutableInterval">
    <id>org.joda.time.MutableInterval.MutableInterval( ReadableDuration ReadableInstant )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withField">
    <id>org.joda.time.YearMonth.withField( DateTimeFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="toDateTime">
    <id>org.joda.time.LocalDate.toDateTime( LocalTime DateTimeZone )</id>
    <exceptions>
      <e>IllegalInstantException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>LocalTime</type>
        <name>time</name>
      </param>
      <param>
        <type>DateTimeZone</type>
        <name>zone</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withDayOfYear">
    <id>org.joda.time.DateMidnight.withDayOfYear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>dayOfYear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="Interval">
    <id>org.joda.time.Interval.Interval( ReadablePeriod ReadableInstant )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="toStandardHours">
    <id>org.joda.time.Period.toStandardHours( )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="printTo">
    <id>org.joda.time.format.DateTimeFormatter.printTo( Writer long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Writer</type>
        <name>out</name>
      </param>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withFieldAdded">
    <id>org.joda.time.DateMidnight.withFieldAdded( DurationFieldType int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>amount</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDateTimeMillis">
    <id>org.joda.time.chrono.BaseChronology.getDateTimeMillis( long int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>hourOfDay</name>
      </param>
      <param>
        <type>int</type>
        <name>minuteOfHour</name>
      </param>
      <param>
        <type>int</type>
        <name>secondOfMinute</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfSecond</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="fromCalendarFields">
    <id>org.joda.time.LocalDateTime.fromCalendarFields( Calendar )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Calendar</type>
        <name>calendar</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDurationMillis">
    <id>org.joda.time.convert.LongConverter.getDurationMillis( Object )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="secondsBetween">
    <id>org.joda.time.Seconds.secondsBetween( ReadableInstant ReadableInstant )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="negated">
    <id>org.joda.time.Years.negated( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setPeriod">
    <id>org.joda.time.base.BasePeriod.setPeriod( int int int int int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>years</name>
      </param>
      <param>
        <type>int</type>
        <name>months</name>
      </param>
      <param>
        <type>int</type>
        <name>weeks</name>
      </param>
      <param>
        <type>int</type>
        <name>days</name>
      </param>
      <param>
        <type>int</type>
        <name>hours</name>
      </param>
      <param>
        <type>int</type>
        <name>minutes</name>
      </param>
      <param>
        <type>int</type>
        <name>seconds</name>
      </param>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
    </params>
    <arity>8</arity>
  </method>
  <method name="getDateTimeMillis">
    <id>org.joda.time.chrono.BaseChronology.getDateTimeMillis( int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfDay</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="DividedDateTimeField">
    <id>org.joda.time.field.DividedDateTimeField.DividedDateTimeField( DateTimeField DateTimeFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeField</type>
        <name>field</name>
      </param>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
      <param>
        <type>int</type>
        <name>divisor</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="MutableInterval">
    <id>org.joda.time.MutableInterval.MutableInterval( ReadablePeriod ReadableInstant )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withPeriodAdded">
    <id>org.joda.time.LocalTime.withPeriodAdded( ReadablePeriod int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="add">
    <id>org.joda.time.field.UnsupportedDateTimeField.add( long int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getValue">
    <id>org.joda.time.LocalTime.getValue( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="multipliedBy">
    <id>org.joda.time.Years.multipliedBy( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="append">
    <id>org.joda.time.format.DateTimeFormatterBuilder.append( DateTimePrinter DateTimeParser[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimePrinter</type>
        <name>printer</name>
      </param>
      <param>
        <type>DateTimeParser[]</type>
        <name>parsers</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withCenturyOfEra">
    <id>org.joda.time.LocalDateTime.withCenturyOfEra( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>centuryOfEra</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setDurationBeforeEnd">
    <id>org.joda.time.ReadWritableInterval.setDurationBeforeEnd( ReadableDuration )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="safeSubtract">
    <id>org.joda.time.field.FieldUtils.safeSubtract( long long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>val1</name>
      </param>
      <param>
        <type>long</type>
        <name>val2</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addSeconds">
    <id>org.joda.time.ReadWritablePeriod.addSeconds( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>seconds</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.LocalDateTime.minus( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setMillisOfDay">
    <id>org.joda.time.MutableDateTime.setMillisOfDay( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>millisOfDay</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="add">
    <id>org.joda.time.ReadWritableInstant.add( long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="set">
    <id>org.joda.time.field.BaseDateTimeField.set( ReadablePartial int int[] int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
      <param>
        <type>int</type>
        <name>fieldIndex</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
      <param>
        <type>int</type>
        <name>newValue</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="RemainderDateTimeField">
    <id>org.joda.time.field.RemainderDateTimeField.RemainderDateTimeField( DateTimeField DateTimeFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeField</type>
        <name>field</name>
      </param>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
      <param>
        <type>int</type>
        <name>divisor</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="LocalTime">
    <id>org.joda.time.LocalTime.LocalTime( Object Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chronology</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="standardDays">
    <id>org.joda.time.Duration.standardDays( long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>days</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="dividedBy">
    <id>org.joda.time.Minutes.dividedBy( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>divisor</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addWrapPartial">
    <id>org.joda.time.field.UnsupportedDateTimeField.addWrapPartial( ReadablePartial int int[] int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>fieldIndex</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
      <param>
        <type>int</type>
        <name>valueToAdd</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="printTo">
    <id>org.joda.time.format.DateTimePrinterInternalPrinter.printTo( Appendable long Chronology int DateTimeZone Locale )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Appendable</type>
        <name>appendable</name>
      </param>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
      <param>
        <type>int</type>
        <name>displayOffset</name>
      </param>
      <param>
        <type>DateTimeZone</type>
        <name>displayZone</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="toStandardDays">
    <id>org.joda.time.Duration.toStandardDays( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="multipliedBy">
    <id>org.joda.time.Months.multipliedBy( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPeriod">
    <id>org.joda.time.MutablePeriod.setPeriod( ReadableDuration Chronology )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withPeriodAdded">
    <id>org.joda.time.Partial.withPeriodAdded( ReadablePeriod int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="fromCalendarFields">
    <id>org.joda.time.MonthDay.fromCalendarFields( Calendar )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Calendar</type>
        <name>calendar</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseYears">
    <id>org.joda.time.Years.parseYears( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>periodStr</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="safeDivide">
    <id>org.joda.time.field.FieldUtils.safeDivide( long long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>dividend</name>
      </param>
      <param>
        <type>long</type>
        <name>divisor</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="minutesBetween">
    <id>org.joda.time.Minutes.minutesBetween( ReadablePartial ReadablePartial )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadablePartial</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="appendPattern">
    <id>org.joda.time.format.DateTimeFormatterBuilder.appendPattern( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>pattern</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withMillisOfDay">
    <id>org.joda.time.LocalTime.withMillisOfDay( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDifferenceAsLong">
    <id>org.joda.time.field.UnsupportedDurationField.getDifferenceAsLong( long long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>minuendInstant</name>
      </param>
      <param>
        <type>long</type>
        <name>subtrahendInstant</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getInstantMillis">
    <id>org.joda.time.convert.InstantConverter.getInstantMillis( Object Chronology )</id>
    <exceptions>
      <e>ClassCastException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="compare">
    <id>org.joda.time.DateTimeComparator.compare( Object Object )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>lhsObj</name>
      </param>
      <param>
        <type>Object</type>
        <name>rhsObj</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="compile">
    <id>org.joda.time.tz.ZoneInfoCompiler.compile( File File[] )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>outputDir</name>
      </param>
      <param>
        <type>File[]</type>
        <name>sources</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addWeekyears">
    <id>org.joda.time.ReadWritableDateTime.addWeekyears( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weekyears</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="Partial">
    <id>org.joda.time.Partial.Partial( Chronology DateTimeFieldType[] int[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Chronology</type>
        <name>chronology</name>
      </param>
      <param>
        <type>DateTimeFieldType[]</type>
        <name>types</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getIntervalConverter">
    <id>org.joda.time.convert.ConverterManager.getIntervalConverter( Object )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getChronology">
    <id>org.joda.time.convert.InstantConverter.getChronology( Object Chronology )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getAsText">
    <id>org.joda.time.field.UnsupportedDateTimeField.getAsText( long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="Instant">
    <id>org.joda.time.Instant.Instant( Object )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getMinimumValue">
    <id>org.joda.time.field.UnsupportedDateTimeField.getMinimumValue( )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setEnd">
    <id>org.joda.time.ReadWritableInterval.setEnd( ReadableInstant )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withFields">
    <id>org.joda.time.DateTime.withFields( ReadablePartial )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minutesIn">
    <id>org.joda.time.Minutes.minutesIn( ReadableInterval )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInterval</type>
        <name>interval</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addPeriodInto">
    <id>org.joda.time.base.BasePeriod.addPeriodInto( int[] ReadablePeriod )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="toString">
    <id>org.joda.time.LocalDate.toString( String Locale )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>pattern</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setNameProvider">
    <id>org.joda.time.DateTimeZone.setNameProvider( NameProvider )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>NameProvider</type>
        <name>nameProvider</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addWrapField">
    <id>org.joda.time.field.UnsupportedDateTimeField.addWrapField( ReadablePartial int int[] int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>fieldIndex</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
      <param>
        <type>int</type>
        <name>valueToAdd</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="MutablePeriod">
    <id>org.joda.time.MutablePeriod.MutablePeriod( Object Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>period</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="MutableInterval">
    <id>org.joda.time.MutableInterval.MutableInterval( long long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>startInstant</name>
      </param>
      <param>
        <type>long</type>
        <name>endInstant</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.LocalDateTime.plus( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="indexOfSupported">
    <id>org.joda.time.base.AbstractPartial.indexOfSupported( DurationFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationFieldType</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="append">
    <id>org.joda.time.format.DateTimeFormatterBuilder.append( DateTimePrinter )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimePrinter</type>
        <name>printer</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setHourOfDay">
    <id>org.joda.time.MutableDateTime.setHourOfDay( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hourOfDay</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toString">
    <id>org.joda.time.ReadableDateTime.toString( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>pattern</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.YearMonthDay.minus( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="property">
    <id>org.joda.time.MonthDay.property( DateTimeFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withFieldAdded">
    <id>org.joda.time.DateTime.withFieldAdded( DurationFieldType int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>amount</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withMillisOfDay">
    <id>org.joda.time.DateTime.withMillisOfDay( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="safeMultiply">
    <id>org.joda.time.field.FieldUtils.safeMultiply( long long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>val1</name>
      </param>
      <param>
        <type>long</type>
        <name>val2</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setDayOfWeek">
    <id>org.joda.time.ReadWritableDateTime.setDayOfWeek( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>dayOfWeek</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withMonthOfYear">
    <id>org.joda.time.LocalDateTime.withMonthOfYear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="fieldDifference">
    <id>org.joda.time.Period.fieldDifference( ReadablePartial ReadablePartial )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadablePartial</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="checkAlterPeriodConverters">
    <id>org.joda.time.convert.ConverterManager.checkAlterPeriodConverters( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="withHourOfDay">
    <id>org.joda.time.TimeOfDay.withHourOfDay( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hour</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="Interval">
    <id>org.joda.time.Interval.Interval( ReadableInstant ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.LocalDate.minus( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getValueAsLong">
    <id>org.joda.time.field.UnsupportedDurationField.getValueAsLong( long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setDayOfMonth">
    <id>org.joda.time.MutableDateTime.setDayOfMonth( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getFieldType">
    <id>org.joda.time.Partial.getFieldType( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withChronologyRetainFields">
    <id>org.joda.time.Partial.withChronologyRetainFields( Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Chronology</type>
        <name>newChronology</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="compareTo">
    <id>org.joda.time.field.AbstractPartialFieldProperty.compareTo( ReadableInstant )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="forPattern">
    <id>org.joda.time.format.DateTimeFormat.forPattern( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>pattern</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="compareTo">
    <id>org.joda.time.field.AbstractReadableInstantFieldProperty.compareTo( ReadableInstant )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="roundHalfFloor">
    <id>org.joda.time.field.UnsupportedDateTimeField.roundHalfFloor( long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getMinimumValue">
    <id>org.joda.time.field.UnsupportedDateTimeField.getMinimumValue( ReadablePartial int[] )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>instant</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="set">
    <id>org.joda.time.DateTimeField.set( long String Locale )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setValue">
    <id>org.joda.time.MutablePeriod.setValue( int int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="computeMillis">
    <id>org.joda.time.format.DateTimeParserBucket.computeMillis( boolean CharSequence )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>resetFields</name>
      </param>
      <param>
        <type>CharSequence</type>
        <name>text</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withDayOfWeek">
    <id>org.joda.time.LocalDateTime.withDayOfWeek( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>dayOfWeek</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="mergePeriodInto">
    <id>org.joda.time.base.BasePeriod.mergePeriodInto( int[] ReadablePeriod )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="plusMonths">
    <id>org.joda.time.Period.plusMonths( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>months</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getMaximumShortTextLength">
    <id>org.joda.time.field.UnsupportedDateTimeField.getMaximumShortTextLength( Locale )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toStandardSeconds">
    <id>org.joda.time.Minutes.toStandardSeconds( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="writeTo">
    <id>org.joda.time.tz.DateTimeZoneBuilder.writeTo( String OutputStream )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>zoneID</name>
      </param>
      <param>
        <type>OutputStream</type>
        <name>out</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="Period">
    <id>org.joda.time.Period.Period( Object PeriodType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>period</name>
      </param>
      <param>
        <type>PeriodType</type>
        <name>type</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getChronology">
    <id>org.joda.time.convert.CalendarConverter.getChronology( Object DateTimeZone )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>DateTimeZone</type>
        <name>zone</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getField">
    <id>org.joda.time.ReadablePartial.getField( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withPeriodAdded">
    <id>org.joda.time.YearMonth.withPeriodAdded( ReadablePeriod int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withEra">
    <id>org.joda.time.DateTime.withEra( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>era</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="BasePeriod">
    <id>org.joda.time.base.BasePeriod.BasePeriod( long PeriodType Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>duration</name>
      </param>
      <param>
        <type>PeriodType</type>
        <name>type</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="withYear">
    <id>org.joda.time.LocalDateTime.withYear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toStandardSeconds">
    <id>org.joda.time.Days.toStandardSeconds( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="negated">
    <id>org.joda.time.Months.negated( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="checkAlterInstantConverters">
    <id>org.joda.time.convert.ConverterManager.checkAlterInstantConverters( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="parseMutableDateTime">
    <id>org.joda.time.format.DateTimeFormatter.parseMutableDateTime( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="add">
    <id>org.joda.time.DateTimeField.add( long long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>long</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="add">
    <id>org.joda.time.MutablePeriod.add( DurationFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationFieldType</type>
        <name>field</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setInterval">
    <id>org.joda.time.base.BaseInterval.setInterval( long long Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>startInstant</name>
      </param>
      <param>
        <type>long</type>
        <name>endInstant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getAsText">
    <id>org.joda.time.field.UnsupportedDateTimeField.getAsText( int Locale )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>fieldValue</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="minusYears">
    <id>org.joda.time.Period.minusYears( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>years</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="LocalDate">
    <id>org.joda.time.LocalDate.LocalDate( Object DateTimeZone )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
      <param>
        <type>DateTimeZone</type>
        <name>zone</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="toDateTime">
    <id>org.joda.time.LocalDateTime.toDateTime( DateTimeZone )</id>
    <exceptions>
      <e>IllegalInstantException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeZone</type>
        <name>zone</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="fromDateFields">
    <id>org.joda.time.YearMonth.fromDateFields( Date )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Date</type>
        <name>date</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="fromDateFields">
    <id>org.joda.time.LocalDate.fromDateFields( Date )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Date</type>
        <name>date</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withYearOfEra">
    <id>org.joda.time.DateTime.withYearOfEra( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>yearOfEra</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getFieldType">
    <id>org.joda.time.YearMonthDay.getFieldType( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.Hours.plus( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hours</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPeriod">
    <id>org.joda.time.MutablePeriod.setPeriod( ReadableDuration )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addWrapField">
    <id>org.joda.time.field.UnsupportedDateTimeField.addWrapField( long int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="convertText">
    <id>org.joda.time.chrono.GJDayOfWeekDateTimeField.convertText( String Locale )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="compareTo">
    <id>org.joda.time.base.AbstractInstant.compareTo( ReadableInstant )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>other</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addWrapField">
    <id>org.joda.time.DateTimeField.addWrapField( ReadablePartial int int[] int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>fieldIndex</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
      <param>
        <type>int</type>
        <name>valueToAdd</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="withPeriodAdded">
    <id>org.joda.time.DateTime.withPeriodAdded( ReadablePeriod int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="safeMultiply">
    <id>org.joda.time.field.FieldUtils.safeMultiply( long int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>val1</name>
      </param>
      <param>
        <type>int</type>
        <name>val2</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPartialValues">
    <id>org.joda.time.convert.AbstractConverter.getPartialValues( ReadablePartial Object Chronology DateTimeFormatter )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>fieldSource</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
      <param>
        <type>DateTimeFormatter</type>
        <name>parser</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="withMillisOfSecond">
    <id>org.joda.time.DateTime.withMillisOfSecond( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.Instant.plus( ReadableDuration )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="appendSeparatorIfFieldsAfter">
    <id>org.joda.time.format.PeriodFormatterBuilder.appendSeparatorIfFieldsAfter( String )</id>
    <exceptions>
      <e>IllegalStateException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getFieldType">
    <id>org.joda.time.ReadablePeriod.getFieldType( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addDays">
    <id>org.joda.time.ReadWritableDateTime.addDays( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>days</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseLocalDate">
    <id>org.joda.time.format.DateTimeFormatter.parseLocalDate( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addMillis">
    <id>org.joda.time.MutableDateTime.addMillis( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withDayOfWeek">
    <id>org.joda.time.LocalDate.withDayOfWeek( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>dayOfWeek</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getValue">
    <id>org.joda.time.DurationField.getValue( long long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>duration</name>
      </param>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.MonthDay.minus( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getPeriodType">
    <id>org.joda.time.convert.ReadablePeriodConverter.getPeriodType( Object )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.DateMidnight.minus( ReadableDuration )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withWeekyear">
    <id>org.joda.time.LocalDate.withWeekyear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weekyear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="get">
    <id>org.joda.time.base.AbstractPartial.get( DateTimeFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="fromDateFields">
    <id>org.joda.time.YearMonthDay.fromDateFields( Date )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Date</type>
        <name>date</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.DateTime.plus( ReadableDuration )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseWeeks">
    <id>org.joda.time.Weeks.parseWeeks( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>periodStr</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="standardMinutesIn">
    <id>org.joda.time.Minutes.standardMinutesIn( ReadablePeriod )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="roundFloor">
    <id>org.joda.time.field.UnsupportedDateTimeField.roundFloor( long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="isReadableInterval">
    <id>org.joda.time.convert.IntervalConverter.isReadableInterval( Object Chronology )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDateTimeMillis">
    <id>org.joda.time.chrono.LimitChronology.getDateTimeMillis( long int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>hourOfDay</name>
      </param>
      <param>
        <type>int</type>
        <name>minuteOfHour</name>
      </param>
      <param>
        <type>int</type>
        <name>secondOfMinute</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfSecond</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="addWeeks">
    <id>org.joda.time.ReadWritableDateTime.addWeeks( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weeks</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addMinutes">
    <id>org.joda.time.ReadWritablePeriod.addMinutes( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>minutes</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="compareTo">
    <id>org.joda.time.LocalTime.compareTo( ReadablePartial )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="convertUTCToLocal">
    <id>org.joda.time.DateTimeZone.convertUTCToLocal( long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instantUTC</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withTime">
    <id>org.joda.time.DateTime.withTime( int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hourOfDay</name>
      </param>
      <param>
        <type>int</type>
        <name>minuteOfHour</name>
      </param>
      <param>
        <type>int</type>
        <name>secondOfMinute</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfSecond</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="setPeriodAfterStart">
    <id>org.joda.time.ReadWritableInterval.setPeriodAfterStart( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.DateTime.minus( long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="checkPermission">
    <id>org.joda.time.DateTimeUtils.checkPermission( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="withDurationAdded">
    <id>org.joda.time.Instant.withDurationAdded( long int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>durationToAdd</name>
      </param>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="safeAdd">
    <id>org.joda.time.field.FieldUtils.safeAdd( int int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>val1</name>
      </param>
      <param>
        <type>int</type>
        <name>val2</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="appendPaddedInteger">
    <id>org.joda.time.format.FormatUtils.appendPaddedInteger( Appendable long int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Appendable</type>
        <name>appendable</name>
      </param>
      <param>
        <type>long</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getValue">
    <id>org.joda.time.ReadablePeriod.getValue( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="MutableDateTime">
    <id>org.joda.time.MutableDateTime.MutableDateTime( Object DateTimeZone )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
      <param>
        <type>DateTimeZone</type>
        <name>zone</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.Hours.minus( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hours</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="BaseDateTime">
    <id>org.joda.time.base.BaseDateTime.BaseDateTime( Object Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chronology</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withPeriodAdded">
    <id>org.joda.time.YearMonthDay.withPeriodAdded( ReadablePeriod int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPeriodConverter">
    <id>org.joda.time.convert.ConverterManager.getPeriodConverter( Object )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="appendSignedDecimal">
    <id>org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal( DateTimeFieldType int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>minDigits</name>
      </param>
      <param>
        <type>int</type>
        <name>maxDigits</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="minusMonths">
    <id>org.joda.time.Period.minusMonths( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>months</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="add">
    <id>org.joda.time.MutableDateTime.add( DurationFieldType int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationFieldType</type>
        <name>type</name>
      </param>
      <param>
        <type>int</type>
        <name>amount</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withField">
    <id>org.joda.time.Period.withField( DurationFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationFieldType</type>
        <name>field</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getFieldType">
    <id>org.joda.time.ReadablePartial.getFieldType( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="LocalTime">
    <id>org.joda.time.LocalTime.LocalTime( Object )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setValue">
    <id>org.joda.time.base.BasePeriod.setValue( int int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withDate">
    <id>org.joda.time.DateTime.withDate( int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.Days.minus( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>days</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="add">
    <id>org.joda.time.MutableDateTime.add( long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setCurrentMillisOffset">
    <id>org.joda.time.DateTimeUtils.setCurrentMillisOffset( long )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>offsetMillis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="BasePeriod">
    <id>org.joda.time.base.BasePeriod.BasePeriod( Object PeriodType Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>period</name>
      </param>
      <param>
        <type>PeriodType</type>
        <name>type</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setField">
    <id>org.joda.time.base.BasePeriod.setField( DurationFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationFieldType</type>
        <name>field</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="remainder">
    <id>org.joda.time.field.UnsupportedDateTimeField.remainder( long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="printTo">
    <id>org.joda.time.format.DateTimeFormatter.printTo( Appendable ReadablePartial )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Appendable</type>
        <name>appendable</name>
      </param>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withDays">
    <id>org.joda.time.Period.withDays( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>days</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setYears">
    <id>org.joda.time.ReadWritablePeriod.setYears( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>years</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setTime">
    <id>org.joda.time.MutableDateTime.setTime( ReadableInstant )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getInstance">
    <id>org.joda.time.chrono.LenientChronology.getInstance( Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Chronology</type>
        <name>base</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="hoursBetween">
    <id>org.joda.time.Hours.hoursBetween( ReadablePartial ReadablePartial )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadablePartial</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="parseLocalTime">
    <id>org.joda.time.format.DateTimeFormatter.parseLocalTime( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="BaseInterval">
    <id>org.joda.time.base.BaseInterval.BaseInterval( Object Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>interval</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="printTo">
    <id>org.joda.time.format.DateTimePrinterInternalPrinter.printTo( Appendable ReadablePartial Locale )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Appendable</type>
        <name>appendable</name>
      </param>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="withSecondOfMinute">
    <id>org.joda.time.LocalTime.withSecondOfMinute( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>second</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="standardMinutes">
    <id>org.joda.time.Duration.standardMinutes( long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>minutes</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="BasePartial">
    <id>org.joda.time.base.BasePartial.BasePartial( Object Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chronology</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addDays">
    <id>org.joda.time.ReadWritablePeriod.addDays( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>days</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="BaseInterval">
    <id>org.joda.time.base.BaseInterval.BaseInterval( ReadableInstant ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withField">
    <id>org.joda.time.DateMidnight.withField( DateTimeFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="fromDateFields">
    <id>org.joda.time.LocalDateTime.fromDateFields( Date )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Date</type>
        <name>date</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.Weeks.minus( Weeks )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>Weeks</type>
        <name>weeks</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.YearMonth.minus( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="compareTo">
    <id>org.joda.time.field.AbstractReadableInstantFieldProperty.compareTo( ReadablePartial )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toString">
    <id>org.joda.time.ReadableDateTime.toString( String Locale )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>pattern</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withYear">
    <id>org.joda.time.YearMonthDay.withYear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="appendUnpaddedInteger">
    <id>org.joda.time.format.FormatUtils.appendUnpaddedInteger( Appendable int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Appendable</type>
        <name>appendable</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="checkPrinter">
    <id>org.joda.time.format.PeriodFormatter.checkPrinter( )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="LocalDateTime">
    <id>org.joda.time.LocalDateTime.LocalDateTime( Object Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chronology</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getValue">
    <id>org.joda.time.base.BaseSingleFieldPeriod.getValue( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="ZeroIsMaxDateTimeField">
    <id>org.joda.time.field.ZeroIsMaxDateTimeField.ZeroIsMaxDateTimeField( DateTimeField DateTimeFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeField</type>
        <name>field</name>
      </param>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setMinuteOfDay">
    <id>org.joda.time.MutableDateTime.setMinuteOfDay( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>minuteOfDay</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="forOffsetHoursMinutes">
    <id>org.joda.time.DateTimeZone.forOffsetHoursMinutes( int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hoursOffset</name>
      </param>
      <param>
        <type>int</type>
        <name>minutesOffset</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="daysIn">
    <id>org.joda.time.Days.daysIn( ReadableInterval )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInterval</type>
        <name>interval</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addYears">
    <id>org.joda.time.MutablePeriod.addYears( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>years</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseInto">
    <id>org.joda.time.format.PeriodFormatter.parseInto( ReadWritablePeriod String int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadWritablePeriod</type>
        <name>period</name>
      </param>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
      <param>
        <type>int</type>
        <name>position</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setInterval">
    <id>org.joda.time.MutableInterval.setInterval( ReadableInterval )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInterval</type>
        <name>interval</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toStandardWeeks">
    <id>org.joda.time.Period.toStandardWeeks( )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getInstantMillis">
    <id>org.joda.time.convert.CalendarConverter.getInstantMillis( Object Chronology )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withFieldAdded">
    <id>org.joda.time.YearMonthDay.withFieldAdded( DurationFieldType int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>amount</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="appendUnpaddedInteger">
    <id>org.joda.time.format.FormatUtils.appendUnpaddedInteger( Appendable long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Appendable</type>
        <name>appendable</name>
      </param>
      <param>
        <type>long</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="addMinutes">
    <id>org.joda.time.MutableDateTime.addMinutes( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>minutes</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="add">
    <id>org.joda.time.ReadWritableInstant.add( ReadableDuration )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableDuration</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getFieldType">
    <id>org.joda.time.TimeOfDay.getFieldType( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withYear">
    <id>org.joda.time.DateTime.withYear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="checkYearsAndMonths">
    <id>org.joda.time.Period.checkYearsAndMonths( String )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>destintionType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPeriod">
    <id>org.joda.time.MutablePeriod.setPeriod( int int int int int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>years</name>
      </param>
      <param>
        <type>int</type>
        <name>months</name>
      </param>
      <param>
        <type>int</type>
        <name>weeks</name>
      </param>
      <param>
        <type>int</type>
        <name>days</name>
      </param>
      <param>
        <type>int</type>
        <name>hours</name>
      </param>
      <param>
        <type>int</type>
        <name>minutes</name>
      </param>
      <param>
        <type>int</type>
        <name>seconds</name>
      </param>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
    </params>
    <arity>8</arity>
  </method>
  <method name="ZoneInfoProvider">
    <id>org.joda.time.tz.ZoneInfoProvider.ZoneInfoProvider( String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>resourcePath</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="checkAlterPartialConverters">
    <id>org.joda.time.convert.ConverterManager.checkAlterPartialConverters( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="withMinuteOfHour">
    <id>org.joda.time.LocalDateTime.withMinuteOfHour( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>minute</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="secondsIn">
    <id>org.joda.time.Seconds.secondsIn( ReadableInterval )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInterval</type>
        <name>interval</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="standardDaysIn">
    <id>org.joda.time.Days.standardDaysIn( ReadablePeriod )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.Minutes.minus( Minutes )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>Minutes</type>
        <name>minutes</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="readMillis">
    <id>org.joda.time.tz.DateTimeZoneBuilder.readMillis( DataInput )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataInput</type>
        <name>in</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="append">
    <id>org.joda.time.format.DateTimeFormatterBuilder.append( DateTimeFormatter )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFormatter</type>
        <name>formatter</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="minutesBetween">
    <id>org.joda.time.Minutes.minutesBetween( ReadableInstant ReadableInstant )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="toStandardDays">
    <id>org.joda.time.Period.toStandardDays( )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="getInstance">
    <id>org.joda.time.field.UnsupportedDateTimeField.getInstance( DateTimeFieldType DurationField )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
      <param>
        <type>DurationField</type>
        <name>durationField</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.Minutes.minus( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>minutes</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withWeeks">
    <id>org.joda.time.Period.withWeeks( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weeks</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getValue">
    <id>org.joda.time.field.UnsupportedDurationField.getValue( long long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>duration</name>
      </param>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="Interval">
    <id>org.joda.time.Interval.Interval( Object )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>interval</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="compareTo">
    <id>org.joda.time.base.AbstractPartial.compareTo( ReadablePartial )</id>
    <exceptions>
      <e>NullPointerException</e>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>other</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="Duration">
    <id>org.joda.time.Duration.Duration( Object )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPeriod">
    <id>org.joda.time.base.BasePeriod.setPeriod( ReadablePeriod )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="printTo">
    <id>org.joda.time.format.InternalPrinterDateTimePrinter.printTo( Writer long Chronology int DateTimeZone Locale )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Writer</type>
        <name>out</name>
      </param>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
      <param>
        <type>int</type>
        <name>displayOffset</name>
      </param>
      <param>
        <type>DateTimeZone</type>
        <name>displayZone</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>6</arity>
  </method>
  <method name="getDurationMillis">
    <id>org.joda.time.convert.StringConverter.getDurationMillis( Object )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeUnpaddedInteger">
    <id>org.joda.time.format.FormatUtils.writeUnpaddedInteger( Writer int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Writer</type>
        <name>out</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setYears">
    <id>org.joda.time.MutablePeriod.setYears( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>years</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="Interval">
    <id>org.joda.time.Interval.Interval( long long DateTimeZone )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>startInstant</name>
      </param>
      <param>
        <type>long</type>
        <name>endInstant</name>
      </param>
      <param>
        <type>DateTimeZone</type>
        <name>zone</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="BasePeriod">
    <id>org.joda.time.base.BasePeriod.BasePeriod( int int int int int int int int PeriodType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>years</name>
      </param>
      <param>
        <type>int</type>
        <name>months</name>
      </param>
      <param>
        <type>int</type>
        <name>weeks</name>
      </param>
      <param>
        <type>int</type>
        <name>days</name>
      </param>
      <param>
        <type>int</type>
        <name>hours</name>
      </param>
      <param>
        <type>int</type>
        <name>minutes</name>
      </param>
      <param>
        <type>int</type>
        <name>seconds</name>
      </param>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
      <param>
        <type>PeriodType</type>
        <name>type</name>
      </param>
    </params>
    <arity>9</arity>
  </method>
  <method name="toStandardHours">
    <id>org.joda.time.Duration.toStandardHours( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="DateTime">
    <id>org.joda.time.DateTime.DateTime( Object DateTimeZone )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
      <param>
        <type>DateTimeZone</type>
        <name>zone</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="BaseInterval">
    <id>org.joda.time.base.BaseInterval.BaseInterval( ReadableInstant ReadableInstant )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="isLeap">
    <id>org.joda.time.field.UnsupportedDateTimeField.isLeap( long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="requireParser">
    <id>org.joda.time.format.DateTimeFormatter.requireParser( )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="isContiguous">
    <id>org.joda.time.DateTimeUtils.isContiguous( ReadablePartial )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setInto">
    <id>org.joda.time.convert.ReadableIntervalConverter.setInto( ReadWritableInterval Object Chronology )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadWritableInterval</type>
        <name>writableInterval</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setDayOfYear">
    <id>org.joda.time.ReadWritableDateTime.setDayOfYear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>dayOfYear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="get">
    <id>org.joda.time.field.UnsupportedDateTimeField.get( long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="OffsetDateTimeField">
    <id>org.joda.time.field.OffsetDateTimeField.OffsetDateTimeField( DateTimeField DateTimeFieldType int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeField</type>
        <name>field</name>
      </param>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
      <param>
        <type>int</type>
        <name>offset</name>
      </param>
      <param>
        <type>int</type>
        <name>minValue</name>
      </param>
      <param>
        <type>int</type>
        <name>maxValue</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="withMillisOfSecond">
    <id>org.joda.time.LocalDateTime.withMillisOfSecond( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toStandardDuration">
    <id>org.joda.time.Period.toStandardDuration( )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="appendPaddedInteger">
    <id>org.joda.time.format.FormatUtils.appendPaddedInteger( Appendable int int )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Appendable</type>
        <name>appenadble</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>size</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setDate">
    <id>org.joda.time.MutableDateTime.setDate( ReadableInstant )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setStartMillis">
    <id>org.joda.time.ReadWritableInterval.setStartMillis( long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>millisInstant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toStandardHours">
    <id>org.joda.time.Days.toStandardHours( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="appendText">
    <id>org.joda.time.format.DateTimeFormatterBuilder.appendText( DateTimeFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toStandardMinutes">
    <id>org.joda.time.Hours.toStandardMinutes( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="MutableDateTime">
    <id>org.joda.time.MutableDateTime.MutableDateTime( Object Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chronology</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getMinimumValue">
    <id>org.joda.time.field.UnsupportedDateTimeField.getMinimumValue( ReadablePartial )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="add">
    <id>org.joda.time.ReadWritablePeriod.add( int int int int int int int int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>years</name>
      </param>
      <param>
        <type>int</type>
        <name>months</name>
      </param>
      <param>
        <type>int</type>
        <name>weeks</name>
      </param>
      <param>
        <type>int</type>
        <name>days</name>
      </param>
      <param>
        <type>int</type>
        <name>hours</name>
      </param>
      <param>
        <type>int</type>
        <name>minutes</name>
      </param>
      <param>
        <type>int</type>
        <name>seconds</name>
      </param>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
    </params>
    <arity>8</arity>
  </method>
  <method name="setCurrentMillisSystem">
    <id>org.joda.time.DateTimeUtils.setCurrentMillisSystem( )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="setPeriod">
    <id>org.joda.time.MutablePeriod.setPeriod( ReadablePeriod )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withPeriodAdded">
    <id>org.joda.time.DateMidnight.withPeriodAdded( ReadablePeriod int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getMillis">
    <id>org.joda.time.field.UnsupportedDurationField.getMillis( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getAsText">
    <id>org.joda.time.field.UnsupportedDateTimeField.getAsText( ReadablePartial int Locale )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
      <param>
        <type>int</type>
        <name>fieldValue</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="minus">
    <id>org.joda.time.Period.minus( ReadablePeriod )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="writeUnpaddedInteger">
    <id>org.joda.time.format.FormatUtils.writeUnpaddedInteger( Writer long )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Writer</type>
        <name>out</name>
      </param>
      <param>
        <type>long</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getInstantConverter">
    <id>org.joda.time.convert.ConverterManager.getInstantConverter( Object )</id>
    <exceptions>
      <e>IllegalStateException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="property">
    <id>org.joda.time.MutableDateTime.property( DateTimeFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addYears">
    <id>org.joda.time.ReadWritablePeriod.addYears( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>years</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setProvider">
    <id>org.joda.time.DateTimeZone.setProvider( Provider )</id>
    <exceptions>
      <e>SecurityException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Provider</type>
        <name>provider</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="ZoneInfoProvider">
    <id>org.joda.time.tz.ZoneInfoProvider.ZoneInfoProvider( File )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>File</type>
        <name>fileDir</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseDateTime">
    <id>org.joda.time.format.DateTimeFormatter.parseDateTime( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withWeekOfWeekyear">
    <id>org.joda.time.LocalDate.withWeekOfWeekyear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>weekOfWeekyear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setPeriod">
    <id>org.joda.time.ReadWritablePeriod.setPeriod( ReadablePeriod )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="get">
    <id>org.joda.time.base.AbstractInstant.get( DateTimeFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="set">
    <id>org.joda.time.field.PreciseDateTimeField.set( long int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setStartMillis">
    <id>org.joda.time.MutableInterval.setStartMillis( long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>startInstant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="computeMillis">
    <id>org.joda.time.format.DateTimeParserBucket.computeMillis( boolean String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>resetFields</name>
      </param>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="toStandardSeconds">
    <id>org.joda.time.Weeks.toStandardSeconds( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.DateTime.plus( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withCenturyOfEra">
    <id>org.joda.time.DateTime.withCenturyOfEra( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>centuryOfEra</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withMonthOfYear">
    <id>org.joda.time.DateTime.withMonthOfYear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="get">
    <id>org.joda.time.base.AbstractInstant.get( DateTimeField )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeField</type>
        <name>field</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withFieldAdded">
    <id>org.joda.time.Period.withFieldAdded( DurationFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationFieldType</type>
        <name>field</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="Period">
    <id>org.joda.time.Period.Period( int int int int int int int int PeriodType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>years</name>
      </param>
      <param>
        <type>int</type>
        <name>months</name>
      </param>
      <param>
        <type>int</type>
        <name>weeks</name>
      </param>
      <param>
        <type>int</type>
        <name>days</name>
      </param>
      <param>
        <type>int</type>
        <name>hours</name>
      </param>
      <param>
        <type>int</type>
        <name>minutes</name>
      </param>
      <param>
        <type>int</type>
        <name>seconds</name>
      </param>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
      <param>
        <type>PeriodType</type>
        <name>type</name>
      </param>
    </params>
    <arity>9</arity>
  </method>
  <method name="YearMonthDay">
    <id>org.joda.time.YearMonthDay.YearMonthDay( Object )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addMonths">
    <id>org.joda.time.MutableDateTime.addMonths( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>months</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="normalizedStandard">
    <id>org.joda.time.Period.normalizedStandard( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="DateMidnight">
    <id>org.joda.time.DateMidnight.DateMidnight( Object Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chronology</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setMinutes">
    <id>org.joda.time.ReadWritablePeriod.setMinutes( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>minutes</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getLeapAmount">
    <id>org.joda.time.field.UnsupportedDateTimeField.getLeapAmount( long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withDayOfWeek">
    <id>org.joda.time.DateMidnight.withDayOfWeek( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>dayOfWeek</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="set">
    <id>org.joda.time.chrono.GJEraDateTimeField.set( long int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>era</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setDayOfWeek">
    <id>org.joda.time.MutableDateTime.setDayOfWeek( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>dayOfWeek</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="set">
    <id>org.joda.time.field.UnsupportedDateTimeField.set( ReadablePartial int int[] int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>fieldIndex</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
      <param>
        <type>int</type>
        <name>newValue</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getValue">
    <id>org.joda.time.base.BasePeriod.getValue( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getDateTimeMillis">
    <id>org.joda.time.Chronology.getDateTimeMillis( long int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>hourOfDay</name>
      </param>
      <param>
        <type>int</type>
        <name>minuteOfHour</name>
      </param>
      <param>
        <type>int</type>
        <name>secondOfMinute</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfSecond</name>
      </param>
    </params>
    <arity>5</arity>
  </method>
  <method name="withField">
    <id>org.joda.time.LocalTime.withField( DateTimeFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withHourOfDay">
    <id>org.joda.time.DateTime.withHourOfDay( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hour</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="add">
    <id>org.joda.time.ReadWritablePeriod.add( DurationFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationFieldType</type>
        <name>field</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withSeconds">
    <id>org.joda.time.Period.withSeconds( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>seconds</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getWrappedValue">
    <id>org.joda.time.field.FieldUtils.getWrappedValue( int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>minValue</name>
      </param>
      <param>
        <type>int</type>
        <name>maxValue</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="setDurationAfterStart">
    <id>org.joda.time.MutableInterval.setDurationAfterStart( long )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plusYears">
    <id>org.joda.time.Period.plusYears( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>years</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="property">
    <id>org.joda.time.LocalTime.property( DateTimeFieldType )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="DateTime">
    <id>org.joda.time.DateTime.DateTime( Object Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chronology</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="dividedBy">
    <id>org.joda.time.Seconds.dividedBy( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>divisor</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="standardPeriodIn">
    <id>org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn( ReadablePeriod long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
      <param>
        <type>long</type>
        <name>millisPerUnit</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withFieldAddWrapped">
    <id>org.joda.time.Partial.withFieldAddWrapped( DurationFieldType int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>amount</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withEra">
    <id>org.joda.time.DateMidnight.withEra( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>era</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withDayOfMonth">
    <id>org.joda.time.LocalDateTime.withDayOfMonth( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="add">
    <id>org.joda.time.field.UnsupportedDurationField.add( long long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>long</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withMonthOfYear">
    <id>org.joda.time.MonthDay.withMonthOfYear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="ZoneInfoProvider">
    <id>org.joda.time.tz.ZoneInfoProvider.ZoneInfoProvider( )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.Instant.plus( long )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="computeMillis">
    <id>org.joda.time.format.DateTimeParserBucket.computeMillis( boolean )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>boolean</type>
        <name>resetFields</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withDate">
    <id>org.joda.time.LocalDateTime.withDate( int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="getPartialValues">
    <id>org.joda.time.convert.ReadablePartialConverter.getPartialValues( ReadablePartial Object Chronology )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>fieldSource</name>
      </param>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>3</arity>
  </method>
  <method name="appendOptional">
    <id>org.joda.time.format.DateTimeFormatterBuilder.appendOptional( DateTimeParser )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeParser</type>
        <name>parser</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="roundHalfCeiling">
    <id>org.joda.time.field.UnsupportedDateTimeField.roundHalfCeiling( long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="main">
    <id>org.joda.time.tz.ZoneInfoCompiler.main( String[] )</id>
    <exceptions>
      <e>Exception</e>
    </exceptions>
    <params>
      <param>
        <type>String[]</type>
        <name>args</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setHourOfDay">
    <id>org.joda.time.ReadWritableDateTime.setHourOfDay( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hourOfDay</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="BasePeriod">
    <id>org.joda.time.base.BasePeriod.BasePeriod( long long PeriodType Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>startInstant</name>
      </param>
      <param>
        <type>long</type>
        <name>endInstant</name>
      </param>
      <param>
        <type>PeriodType</type>
        <name>type</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="multipliedBy">
    <id>org.joda.time.Minutes.multipliedBy( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>scalar</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="Interval">
    <id>org.joda.time.Interval.Interval( long long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>startInstant</name>
      </param>
      <param>
        <type>long</type>
        <name>endInstant</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="withEra">
    <id>org.joda.time.LocalDateTime.withEra( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>era</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withFieldAdded">
    <id>org.joda.time.LocalDate.withFieldAdded( DurationFieldType int )</id>
    <exceptions>
      <e>ArithmeticException</e>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DurationFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>amount</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="add">
    <id>org.joda.time.ReadWritableInstant.add( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withField">
    <id>org.joda.time.DateTime.withField( DateTimeFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="PreciseDurationDateTimeField">
    <id>org.joda.time.field.PreciseDurationDateTimeField.PreciseDurationDateTimeField( DateTimeFieldType DurationField )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>type</name>
      </param>
      <param>
        <type>DurationField</type>
        <name>unit</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDateTimeMillis">
    <id>org.joda.time.chrono.BaseChronology.getDateTimeMillis( int int int int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
      <param>
        <type>int</type>
        <name>hourOfDay</name>
      </param>
      <param>
        <type>int</type>
        <name>minuteOfHour</name>
      </param>
      <param>
        <type>int</type>
        <name>secondOfMinute</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfSecond</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="setValue">
    <id>org.joda.time.ReadWritablePeriod.setValue( int int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="set">
    <id>org.joda.time.field.UnsupportedDateTimeField.set( long String )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>String</type>
        <name>text</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getMaximumValue">
    <id>org.joda.time.field.UnsupportedDateTimeField.getMaximumValue( ReadablePartial )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.MonthDay.plus( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toStandardMinutes">
    <id>org.joda.time.Weeks.toStandardMinutes( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="add">
    <id>org.joda.time.field.BaseDateTimeField.add( long long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>long</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="verifyValueBounds">
    <id>org.joda.time.field.FieldUtils.verifyValueBounds( DateTimeFieldType int int int )</id>
    <exceptions>
      <e>IllegalFieldValueException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
      <param>
        <type>int</type>
        <name>lowerBound</name>
      </param>
      <param>
        <type>int</type>
        <name>upperBound</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="getAsShortText">
    <id>org.joda.time.field.UnsupportedDateTimeField.getAsShortText( long Locale )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="set">
    <id>org.joda.time.field.DividedDateTimeField.set( long int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="add">
    <id>org.joda.time.field.UnsupportedDateTimeField.add( long long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>long</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="set">
    <id>org.joda.time.chrono.BasicWeekyearDateTimeField.set( long int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getPeriodType">
    <id>org.joda.time.convert.PeriodConverter.getPeriodType( Object )</id>
    <exceptions>
      <e>ClassCastException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>object</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addSeconds">
    <id>org.joda.time.MutableDateTime.addSeconds( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>seconds</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="setIndexedField">
    <id>org.joda.time.PeriodType.setIndexedField( ReadablePeriod int int[] int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
      <param>
        <type>int</type>
        <name>newValue</name>
      </param>
    </params>
    <arity>4</arity>
  </method>
  <method name="MutableDateTime">
    <id>org.joda.time.MutableDateTime.MutableDateTime( Object )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withField">
    <id>org.joda.time.Partial.withField( DateTimeFieldType int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>DateTimeFieldType</type>
        <name>fieldType</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getDateTimeMillis">
    <id>org.joda.time.chrono.BasicChronology.getDateTimeMillis( int int int int int int int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>year</name>
      </param>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
      <param>
        <type>int</type>
        <name>dayOfMonth</name>
      </param>
      <param>
        <type>int</type>
        <name>hourOfDay</name>
      </param>
      <param>
        <type>int</type>
        <name>minuteOfHour</name>
      </param>
      <param>
        <type>int</type>
        <name>secondOfMinute</name>
      </param>
      <param>
        <type>int</type>
        <name>millisOfSecond</name>
      </param>
    </params>
    <arity>7</arity>
  </method>
  <method name="withMinutes">
    <id>org.joda.time.Period.withMinutes( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>minutes</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="validate">
    <id>org.joda.time.Chronology.validate( ReadablePartial int[] )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePartial</type>
        <name>partial</name>
      </param>
      <param>
        <type>int[]</type>
        <name>values</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="readFrom">
    <id>org.joda.time.tz.DateTimeZoneBuilder.readFrom( DataInput String )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>DataInput</type>
        <name>in</name>
      </param>
      <param>
        <type>String</type>
        <name>id</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="Interval">
    <id>org.joda.time.Interval.Interval( ReadableInstant ReadableInstant )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setSecondOfDay">
    <id>org.joda.time.MutableDateTime.setSecondOfDay( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>secondOfDay</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="mergePeriod">
    <id>org.joda.time.base.BasePeriod.mergePeriod( ReadablePeriod )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="printTo">
    <id>org.joda.time.format.PeriodFormatter.printTo( Writer ReadablePeriod )</id>
    <exceptions>
      <e>IOException</e>
    </exceptions>
    <params>
      <param>
        <type>Writer</type>
        <name>out</name>
      </param>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setInterval">
    <id>org.joda.time.MutableInterval.setInterval( long long )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>startInstant</name>
      </param>
      <param>
        <type>long</type>
        <name>endInstant</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.YearMonth.plus( ReadablePeriod )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getFieldType">
    <id>org.joda.time.PeriodType.getFieldType( int )</id>
    <exceptions>
      <e>IndexOutOfBoundsException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>index</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="withMonthOfYear">
    <id>org.joda.time.YearMonth.withMonthOfYear( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>monthOfYear</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.Seconds.plus( int )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>seconds</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toStandardMinutes">
    <id>org.joda.time.Duration.toStandardMinutes( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="withHourOfDay">
    <id>org.joda.time.LocalDateTime.withHourOfDay( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>hour</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plus">
    <id>org.joda.time.Years.plus( Years )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params>
      <param>
        <type>Years</type>
        <name>years</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="toString">
    <id>org.joda.time.base.BasePartial.toString( String Locale )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>pattern</name>
      </param>
      <param>
        <type>Locale</type>
        <name>locale</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="setSeconds">
    <id>org.joda.time.ReadWritablePeriod.setSeconds( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>seconds</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="getValue">
    <id>org.joda.time.field.UnsupportedDurationField.getValue( long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>duration</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="set">
    <id>org.joda.time.DateTimeField.set( long int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>instant</name>
      </param>
      <param>
        <type>int</type>
        <name>value</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="TimeOfDay">
    <id>org.joda.time.TimeOfDay.TimeOfDay( Object Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>instant</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chronology</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="getMillis">
    <id>org.joda.time.field.UnsupportedDurationField.getMillis( long )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>long</type>
        <name>value</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="parseHours">
    <id>org.joda.time.Hours.parseHours( String )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>String</type>
        <name>periodStr</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="plusMillis">
    <id>org.joda.time.Period.plusMillis( int )</id>
    <exceptions>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>millis</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addYears">
    <id>org.joda.time.MutableDateTime.addYears( int )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>int</type>
        <name>years</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="addInstantConverter">
    <id>org.joda.time.convert.ConverterManager.addInstantConverter( InstantConverter )</id>
    <exceptions>
      <e>SecurityException</e>
    </exceptions>
    <params>
      <param>
        <type>InstantConverter</type>
        <name>converter</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
  <method name="daysBetween">
    <id>org.joda.time.Days.daysBetween( ReadableInstant ReadableInstant )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadableInstant</type>
        <name>start</name>
      </param>
      <param>
        <type>ReadableInstant</type>
        <name>end</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="toStandardSeconds">
    <id>org.joda.time.Hours.toStandardSeconds( )</id>
    <exceptions>
      <e>ArithmeticException</e>
    </exceptions>
    <params/>
    <arity>0</arity>
  </method>
  <method name="Period">
    <id>org.joda.time.Period.Period( Object Chronology )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
      <e>UnsupportedOperationException</e>
    </exceptions>
    <params>
      <param>
        <type>Object</type>
        <name>period</name>
      </param>
      <param>
        <type>Chronology</type>
        <name>chrono</name>
      </param>
    </params>
    <arity>2</arity>
  </method>
  <method name="standardHoursIn">
    <id>org.joda.time.Hours.standardHoursIn( ReadablePeriod )</id>
    <exceptions>
      <e>IllegalArgumentException</e>
    </exceptions>
    <params>
      <param>
        <type>ReadablePeriod</type>
        <name>period</name>
      </param>
    </params>
    <arity>1</arity>
  </method>
</methods>
